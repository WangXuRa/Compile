class Node:
    def __init__(self, node_type, value=None):
        self.node_type = node_type  # Type of node (e.g., "PROGRAM", "STATEMENT")
        self.value = value          # Value for terminal nodes (e.g., identifier, number)
        self.children : list[Node] = []          # List of child nodes
        self.parent = None

    def add_child(self, child_node):
        self.children.append(child_node)

    def __repr__(self, level=0):
        # if it is not a leaf node, recursively print its leaves
        if self.children:
            ret = "  " * level + "<" + self.node_type + ">" + "\n"
            for child in self.children:
                # print(ret)
                ret += child.__repr__(level + 1)
            ret += "  " * level + "</" + self.node_type + ">" + "\n"
            return ret
        # if it is a leaf node, then only print one line for the node
        else:
            ret = "  " * level + "<" + self.node_type + ">"
            if self.value:
                ret += repr(self.value)[1:-1]
            ret += "</" + self.node_type + ">" + "\n"
            return ret


# functions inside the parser class
def visitTerminal(self, node):
    # Access the token associated with the terminal node
    token = node.getSymbol()

    # Get the token type (numeric value)
    token_type = token.type

    token_name = self.lexer.symbolicNames[token_type]
    
    # print("visited terminal node: ", token_name)
    
    
    node = Node(token_name, str(token.text))
    # print(node)
    return node
    
def visitChildren(self, node):
    if isinstance(node, ParserRuleContext):
        # print("visited children")
        # print(node.getRuleIndex(), node.getText())
        rule_idx = node.getRuleIndex()
        if 0 <= rule_idx <= len(node.parser.ruleNames):
            result = Node(node.parser.ruleNames[node.getRuleIndex()])
        else:
            print(f"Error: {rule_idx} is our of bounds")
            return None
        # result = Node(node.GetType().Name)
        n = node.getChildCount()
        for i in range(n):
            if not self.shouldVisitNextChild(node, result):
                return result

            c = node.getChild(i)
            childResult = c.accept(self)
            if childResult is not None:
                result.add_child(childResult)

        # print(result)
        return result
    return None