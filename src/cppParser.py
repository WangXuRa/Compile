# Generated from cppParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

if __name__ is not None and "." in __name__:
    from .CPP14ParserBase import CPP14ParserBase
else:
    from CPP14ParserBase import CPP14ParserBase

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0093")
        buf.write("\u0810\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\3\2\5\2\u0182\n\2\3\2\3\2\3\3\6\3\u0187")
        buf.write("\n\3\r\3\16\3\u0188\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0192")
        buf.write("\n\3\3\4\3\4\5\4\u0196\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u019f\n\5\3\5\5\5\u01a2\n\5\3\6\3\6\5\6\u01a6\n\6")
        buf.write("\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u01ae\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u01b5\n\7\3\7\5\7\u01b8\n\7\3\7\7\7\u01bb\n\7")
        buf.write("\f\7\16\7\u01be\13\7\3\b\3\b\5\b\u01c2\n\b\3\b\3\b\3\t")
        buf.write("\3\t\5\t\u01c8\n\t\3\t\3\t\3\n\3\n\3\n\3\n\5\n\u01d0\n")
        buf.write("\n\5\n\u01d2\n\n\3\13\3\13\3\f\3\f\3\f\7\f\u01d9\n\f\f")
        buf.write("\f\16\f\u01dc\13\f\3\f\5\f\u01df\n\f\3\r\3\r\5\r\u01e3")
        buf.write("\n\r\3\16\5\16\u01e6\n\16\3\16\3\16\5\16\u01ea\n\16\3")
        buf.write("\17\5\17\u01ed\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u01f4")
        buf.write("\n\20\3\20\3\20\5\20\u01f8\n\20\3\20\5\20\u01fb\n\20\3")
        buf.write("\20\5\20\u01fe\n\20\3\20\5\20\u0201\n\20\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u0207\n\21\3\21\3\21\5\21\u020b\n\21\3\21\3")
        buf.write("\21\5\21\u020f\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u021d\n\21\3\21\3\21\5")
        buf.write("\21\u0221\n\21\3\21\3\21\3\21\3\21\5\21\u0227\n\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u022e\n\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0234\n\21\3\21\3\21\5\21\u0238\n\21\3\21\3\21")
        buf.write("\7\21\u023c\n\21\f\21\16\21\u023f\13\21\3\22\3\22\3\23")
        buf.write("\3\23\3\24\5\24\u0246\n\24\3\24\3\24\3\24\5\24\u024b\n")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u0258\n\24\3\25\3\25\3\25\3\25\3\25\5\25\u025f")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u026b\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\5\25\u0275\n\25\3\26\3\26\3\27\5\27\u027a\n\27\3\27")
        buf.write("\3\27\5\27\u027e\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u0285")
        buf.write("\n\27\3\27\5\27\u0288\n\27\3\30\3\30\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u0290\n\31\3\32\3\32\5\32\u0294\n\32\3\32\5\32")
        buf.write("\u0297\n\32\3\33\3\33\3\33\3\33\3\33\5\33\u029e\n\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\5\33\u02a5\n\33\7\33\u02a7\n\33")
        buf.write("\f\33\16\33\u02aa\13\33\3\34\3\34\5\34\u02ae\n\34\3\34")
        buf.write("\3\34\5\34\u02b2\n\34\3\35\5\35\u02b5\n\35\3\35\3\35\3")
        buf.write("\35\5\35\u02ba\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u02c9\n\37\3 \3 \3")
        buf.write(" \7 \u02ce\n \f \16 \u02d1\13 \3!\3!\3!\7!\u02d6\n!\f")
        buf.write("!\16!\u02d9\13!\3\"\3\"\3\"\7\"\u02de\n\"\f\"\16\"\u02e1")
        buf.write("\13\"\3#\3#\3#\3#\7#\u02e7\n#\f#\16#\u02ea\13#\3$\3$\3")
        buf.write("$\3$\5$\u02f0\n$\3%\3%\3%\7%\u02f5\n%\f%\16%\u02f8\13")
        buf.write("%\3&\3&\3&\7&\u02fd\n&\f&\16&\u0300\13&\3\'\3\'\3\'\7")
        buf.write("\'\u0305\n\'\f\'\16\'\u0308\13\'\3(\3(\3(\7(\u030d\n(")
        buf.write("\f(\16(\u0310\13(\3)\3)\3)\7)\u0315\n)\f)\16)\u0318\13")
        buf.write(")\3*\3*\3*\7*\u031d\n*\f*\16*\u0320\13*\3+\3+\3+\7+\u0325")
        buf.write("\n+\f+\16+\u0328\13+\3,\3,\3,\3,\3,\3,\5,\u0330\n,\3-")
        buf.write("\3-\3-\3-\3-\3-\5-\u0338\n-\3.\3.\3/\3/\3/\7/\u033f\n")
        buf.write("/\f/\16/\u0342\13/\3\60\3\60\3\61\3\61\3\61\5\61\u0349")
        buf.write("\n\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0351\n\61\5")
        buf.write("\61\u0353\n\61\3\62\5\62\u0356\n\62\3\62\3\62\3\62\3\62")
        buf.write("\5\62\u035c\n\62\3\62\3\62\3\62\3\63\5\63\u0362\n\63\3")
        buf.write("\63\3\63\3\64\3\64\5\64\u0368\n\64\3\64\3\64\3\65\6\65")
        buf.write("\u036d\n\65\r\65\16\65\u036e\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\5\66\u0378\n\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\5\66\u0380\n\66\3\67\3\67\5\67\u0384\n\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u038b\n\67\5\67\u038d\n\67\38\38")
        buf.write("\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u03a1")
        buf.write("\n8\38\38\58\u03a5\n8\38\38\38\38\58\u03ab\n8\38\38\3")
        buf.write("8\58\u03b0\n8\39\39\59\u03b4\n9\3:\5:\u03b7\n:\3:\3:\3")
        buf.write(":\3;\3;\5;\u03be\n;\3<\3<\3<\3<\3<\5<\u03c5\n<\3<\3<\5")
        buf.write("<\u03c9\n<\3<\3<\3=\3=\3>\6>\u03d0\n>\r>\16>\u03d1\3?")
        buf.write("\3?\3?\3?\3?\3?\3?\3?\3?\5?\u03dd\n?\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\5@\u03e7\n@\3A\3A\3A\5A\u03ec\nA\3A\3A\3A\3A\3")
        buf.write("B\5B\u03f3\nB\3B\5B\u03f6\nB\3B\3B\3B\5B\u03fb\nB\3B\3")
        buf.write("B\3B\5B\u0400\nB\3C\3C\3C\3C\3C\3C\3C\3C\3D\3D\3E\3E\3")
        buf.write("E\3F\3F\3F\3F\3F\3F\5F\u0415\nF\3G\6G\u0418\nG\rG\16G")
        buf.write("\u0419\3G\5G\u041d\nG\3H\3H\3I\3I\3J\3J\3K\3K\3K\5K\u0428")
        buf.write("\nK\3L\3L\3L\3L\5L\u042e\nL\3M\6M\u0431\nM\rM\16M\u0432")
        buf.write("\3M\5M\u0436\nM\3N\6N\u0439\nN\rN\16N\u043a\3N\5N\u043e")
        buf.write("\nN\3O\3O\3P\3P\3Q\5Q\u0445\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u045c\nQ\3")
        buf.write("R\3R\3R\3R\5R\u0462\nR\3S\3S\3S\3S\5S\u0468\nS\3S\3S\3")
        buf.write("T\3T\5T\u046e\nT\3T\5T\u0471\nT\3T\3T\3T\3T\5T\u0477\n")
        buf.write("T\3T\3T\5T\u047b\nT\3T\3T\5T\u047f\nT\3T\5T\u0482\nT\3")
        buf.write("U\3U\3V\3V\3V\3V\5V\u048a\nV\5V\u048c\nV\3V\3V\3W\3W\5")
        buf.write("W\u0492\nW\3W\5W\u0495\nW\3W\5W\u0498\nW\3W\5W\u049b\n")
        buf.write("W\3X\3X\5X\u049f\nX\3X\3X\5X\u04a3\nX\3X\3X\3Y\3Y\5Y\u04a9")
        buf.write("\nY\3Z\3Z\3Z\3[\3[\3[\7[\u04b1\n[\f[\16[\u04b4\13[\3\\")
        buf.write("\3\\\3\\\5\\\u04b9\n\\\3]\3]\3^\3^\5^\u04bf\n^\3_\3_\3")
        buf.write("`\5`\u04c4\n`\3`\3`\3`\5`\u04c9\n`\3`\3`\5`\u04cd\n`\3")
        buf.write("`\3`\3a\3a\3b\3b\3b\3b\3b\3b\3c\5c\u04da\nc\3c\3c\3d\3")
        buf.write("d\5d\u04e0\nd\3d\3d\5d\u04e4\nd\3d\3d\3d\3e\5e\u04ea\n")
        buf.write("e\3e\3e\3e\5e\u04ef\ne\3e\3e\3e\3f\3f\3f\3f\3f\3f\3g\3")
        buf.write("g\3g\3g\5g\u04fe\ng\3g\3g\5g\u0502\ng\3h\6h\u0505\nh\r")
        buf.write("h\16h\u0506\3i\3i\3i\5i\u050c\ni\3i\3i\3i\5i\u0511\ni")
        buf.write("\3j\3j\3j\3j\5j\u0517\nj\3j\5j\u051a\nj\3j\3j\3k\3k\3")
        buf.write("k\7k\u0521\nk\fk\16k\u0524\13k\3k\5k\u0527\nk\3l\3l\3")
        buf.write("l\5l\u052c\nl\3l\3l\5l\u0530\nl\3m\3m\3n\3n\5n\u0536\n")
        buf.write("n\3n\3n\3o\6o\u053b\no\ro\16o\u053c\3p\3p\3p\3p\3p\3p")
        buf.write("\3p\3p\3p\3p\3p\3p\3p\6p\u054c\np\rp\16p\u054d\5p\u0550")
        buf.write("\np\3q\3q\3q\7q\u0555\nq\fq\16q\u0558\13q\3r\3r\5r\u055c")
        buf.write("\nr\3s\3s\3s\3s\3s\5s\u0563\ns\3t\3t\5t\u0567\nt\7t\u0569")
        buf.write("\nt\ft\16t\u056c\13t\3t\3t\3u\3u\3u\5u\u0573\nu\3u\3u")
        buf.write("\3u\3u\5u\u0579\nu\3u\3u\3u\3u\5u\u057f\nu\3u\3u\5u\u0583")
        buf.write("\nu\5u\u0585\nu\7u\u0587\nu\fu\16u\u058a\13u\3v\3v\5v")
        buf.write("\u058e\nv\3v\3v\5v\u0592\nv\3v\5v\u0595\nv\3v\5v\u0598")
        buf.write("\nv\3v\5v\u059b\nv\3w\3w\3w\5w\u05a0\nw\3x\3x\5x\u05a4")
        buf.write("\nx\3x\5x\u05a7\nx\3x\3x\5x\u05ab\nx\3x\5x\u05ae\nx\5")
        buf.write("x\u05b0\nx\3y\6y\u05b3\ny\ry\16y\u05b4\3z\3z\3{\3{\3|")
        buf.write("\5|\u05bc\n|\3|\3|\3}\3}\5}\u05c2\n}\3~\3~\5~\u05c6\n")
        buf.write("~\3~\3~\3~\3~\5~\u05cc\n~\3\177\7\177\u05cf\n\177\f\177")
        buf.write("\16\177\u05d2\13\177\3\177\3\177\5\177\u05d6\n\177\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u05dd\n\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\5\u0080\u05e2\n\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u05e6\n\u0080\7\u0080\u05e8\n\u0080\f")
        buf.write("\u0080\16\u0080\u05eb\13\u0080\3\u0081\7\u0081\u05ee\n")
        buf.write("\u0081\f\u0081\16\u0081\u05f1\13\u0081\3\u0081\3\u0081")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u05f9\n\u0082")
        buf.write("\3\u0082\3\u0082\5\u0082\u05fd\n\u0082\7\u0082\u05ff\n")
        buf.write("\u0082\f\u0082\16\u0082\u0602\13\u0082\3\u0083\3\u0083")
        buf.write("\5\u0083\u0606\n\u0083\3\u0083\5\u0083\u0609\n\u0083\3")
        buf.write("\u0084\3\u0084\3\u0084\7\u0084\u060e\n\u0084\f\u0084\16")
        buf.write("\u0084\u0611\13\u0084\3\u0085\5\u0085\u0614\n\u0085\3")
        buf.write("\u0085\3\u0085\3\u0085\5\u0085\u0619\n\u0085\5\u0085\u061b")
        buf.write("\n\u0085\3\u0085\3\u0085\5\u0085\u061f\n\u0085\3\u0086")
        buf.write("\5\u0086\u0622\n\u0086\3\u0086\5\u0086\u0625\n\u0086\3")
        buf.write("\u0086\3\u0086\5\u0086\u0629\n\u0086\3\u0086\3\u0086\3")
        buf.write("\u0087\5\u0087\u062e\n\u0087\3\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0635\n\u0087\3\u0088\3\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\5\u0088\u063c\n\u0088\3\u0089\3")
        buf.write("\u0089\3\u0089\5\u0089\u0641\n\u0089\3\u008a\3\u008a\5")
        buf.write("\u008a\u0645\n\u008a\3\u008b\3\u008b\5\u008b\u0649\n\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u064e\n\u008b\7\u008b")
        buf.write("\u0650\n\u008b\f\u008b\16\u008b\u0653\13\u008b\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u0658\n\u008c\5\u008c\u065a\n")
        buf.write("\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d\u0660\n")
        buf.write("\u008d\3\u008e\3\u008e\3\u008e\5\u008e\u0665\n\u008e\3")
        buf.write("\u008e\3\u008e\3\u008f\3\u008f\5\u008f\u066b\n\u008f\3")
        buf.write("\u008f\3\u008f\5\u008f\u066f\n\u008f\5\u008f\u0671\n\u008f")
        buf.write("\3\u008f\5\u008f\u0674\n\u008f\3\u008f\3\u008f\5\u008f")
        buf.write("\u0678\n\u008f\3\u008f\3\u008f\5\u008f\u067c\n\u008f\5")
        buf.write("\u008f\u067e\n\u008f\5\u008f\u0680\n\u008f\3\u0090\5\u0090")
        buf.write("\u0683\n\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0092")
        buf.write("\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\6\u0093\u068f")
        buf.write("\n\u0093\r\u0093\16\u0093\u0690\3\u0094\5\u0094\u0694")
        buf.write("\n\u0094\3\u0094\5\u0094\u0697\n\u0094\3\u0094\5\u0094")
        buf.write("\u069a\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u06a3\n\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\7\u0095\u06a8\n\u0095\f\u0095\16\u0095\u06ab")
        buf.write("\13\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u06b6\n\u0096\3\u0096")
        buf.write("\3\u0096\5\u0096\u06ba\n\u0096\3\u0096\5\u0096\u06bd\n")
        buf.write("\u0096\3\u0096\3\u0096\5\u0096\u06c1\n\u0096\3\u0097\6")
        buf.write("\u0097\u06c4\n\u0097\r\u0097\16\u0097\u06c5\3\u0098\3")
        buf.write("\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009b\3\u009b\5\u009b\u06d2\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u06d7\n\u009b\7\u009b\u06d9\n\u009b\f")
        buf.write("\u009b\16\u009b\u06dc\13\u009b\3\u009c\5\u009c\u06df\n")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u06e4\n\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\5\u009c\u06e9\n\u009c\3\u009c\3")
        buf.write("\u009c\5\u009c\u06ed\n\u009c\3\u009d\5\u009d\u06f0\n\u009d")
        buf.write("\3\u009d\3\u009d\5\u009d\u06f4\n\u009d\3\u009e\3\u009e")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u06ff\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0703\n")
        buf.write("\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\5\u00a4")
        buf.write("\u070a\n\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u070f\n")
        buf.write("\u00a4\7\u00a4\u0711\n\u00a4\f\u00a4\16\u00a4\u0714\13")
        buf.write("\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0719\n\u00a5\3")
        buf.write("\u00a5\3\u00a5\5\u00a5\u071d\n\u00a5\3\u00a6\3\u00a6\5")
        buf.write("\u00a6\u0721\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3")
        buf.write("\u00a8\3\u00a8\3\u00a8\5\u00a8\u072a\n\u00a8\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\7\u00aa\u0735\n\u00aa\f\u00aa\16\u00aa\u0738")
        buf.write("\13\u00aa\3\u00ab\3\u00ab\5\u00ab\u073c\n\u00ab\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0743\n\u00ac")
        buf.write("\3\u00ac\3\u00ac\5\u00ac\u0747\n\u00ac\3\u00ac\5\u00ac")
        buf.write("\u074a\n\u00ac\3\u00ac\5\u00ac\u074d\n\u00ac\3\u00ac\5")
        buf.write("\u00ac\u0750\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0754\n\u00ac")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0759\n\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0760\n\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u0764\n\u00ae\3\u00ae\3\u00ae")
        buf.write("\5\u00ae\u0768\n\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0")
        buf.write("\5\u00b0\u076e\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0")
        buf.write("\u0773\n\u00b0\7\u00b0\u0775\n\u00b0\f\u00b0\16\u00b0")
        buf.write("\u0778\13\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u077d")
        buf.write("\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0783")
        buf.write("\n\u00b2\3\u00b2\5\u00b2\u0786\n\u00b2\3\u00b3\5\u00b3")
        buf.write("\u0789\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b6\3\u00b6\5\u00b6\u0799\n\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b7\6\u00b7\u079f\n\u00b7\r\u00b7\16\u00b7")
        buf.write("\u07a0\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b9\5\u00b9\u07aa\n\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u07af\n\u00b9\3\u00b9\5\u00b9\u07b2\n\u00b9\3")
        buf.write("\u00ba\3\u00ba\5\u00ba\u07b6\n\u00ba\3\u00bb\3\u00bb\5")
        buf.write("\u00bb\u07ba\n\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u07bf")
        buf.write("\n\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\5\u00bd\u07c5")
        buf.write("\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u07ca\n\u00bd")
        buf.write("\7\u00bd\u07cc\n\u00bd\f\u00bd\16\u00bd\u07cf\13\u00bd")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u07d7\n\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u07dc\n")
        buf.write("\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u07e1\n\u00bf\3")
        buf.write("\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf")
        buf.write("\u080c\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u0419\6\f \64")
        buf.write("\u00e8\u00c1\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc")
        buf.write("\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e")
        buf.write("\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120")
        buf.write("\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132")
        buf.write("\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144")
        buf.write("\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156")
        buf.write("\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168")
        buf.write("\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a")
        buf.write("\u017c\u017e\2\31\4\2ccgg\6\2\32\32!!<<CC\4\2~~\u0083")
        buf.write("\u0083\3\2z{\4\2]_cf\4\2}}\u0084\u0084\3\2_a\3\2]^\4\2")
        buf.write("hivw\3\2tu\4\2ggjs\7\2&&\61\61;;AAHH\5\2$$..RR\4\2\60")
        buf.write("\60>>\4\2??PP\4\2\27\27DD\3\2W\\\4\2ccxx\4\2\30\30TT\3")
        buf.write("\2\35\36\4\2((\67\67\3\28:\3\2\3\t\2\u08ef\2\u0181\3\2")
        buf.write("\2\2\4\u0191\3\2\2\2\6\u0195\3\2\2\2\b\u01a1\3\2\2\2\n")
        buf.write("\u01a3\3\2\2\2\f\u01a9\3\2\2\2\16\u01bf\3\2\2\2\20\u01c5")
        buf.write("\3\2\2\2\22\u01d1\3\2\2\2\24\u01d3\3\2\2\2\26\u01d5\3")
        buf.write("\2\2\2\30\u01e2\3\2\2\2\32\u01e9\3\2\2\2\34\u01ec\3\2")
        buf.write("\2\2\36\u01f1\3\2\2\2 \u0220\3\2\2\2\"\u0240\3\2\2\2$")
        buf.write("\u0242\3\2\2\2&\u0257\3\2\2\2(\u0274\3\2\2\2*\u0276\3")
        buf.write("\2\2\2,\u0279\3\2\2\2.\u0289\3\2\2\2\60\u028d\3\2\2\2")
        buf.write("\62\u0296\3\2\2\2\64\u0298\3\2\2\2\66\u02b1\3\2\2\28\u02b4")
        buf.write("\3\2\2\2:\u02bd\3\2\2\2<\u02c8\3\2\2\2>\u02ca\3\2\2\2")
        buf.write("@\u02d2\3\2\2\2B\u02da\3\2\2\2D\u02e2\3\2\2\2F\u02ef\3")
        buf.write("\2\2\2H\u02f1\3\2\2\2J\u02f9\3\2\2\2L\u0301\3\2\2\2N\u0309")
        buf.write("\3\2\2\2P\u0311\3\2\2\2R\u0319\3\2\2\2T\u0321\3\2\2\2")
        buf.write("V\u0329\3\2\2\2X\u0337\3\2\2\2Z\u0339\3\2\2\2\\\u033b")
        buf.write("\3\2\2\2^\u0343\3\2\2\2`\u0352\3\2\2\2b\u0355\3\2\2\2")
        buf.write("d\u0361\3\2\2\2f\u0365\3\2\2\2h\u036c\3\2\2\2j\u037f\3")
        buf.write("\2\2\2l\u038c\3\2\2\2n\u03af\3\2\2\2p\u03b3\3\2\2\2r\u03b6")
        buf.write("\3\2\2\2t\u03bd\3\2\2\2v\u03c8\3\2\2\2x\u03cc\3\2\2\2")
        buf.write("z\u03cf\3\2\2\2|\u03dc\3\2\2\2~\u03e6\3\2\2\2\u0080\u03e8")
        buf.write("\3\2\2\2\u0082\u03ff\3\2\2\2\u0084\u0401\3\2\2\2\u0086")
        buf.write("\u0409\3\2\2\2\u0088\u040b\3\2\2\2\u008a\u0414\3\2\2\2")
        buf.write("\u008c\u0417\3\2\2\2\u008e\u041e\3\2\2\2\u0090\u0420\3")
        buf.write("\2\2\2\u0092\u0422\3\2\2\2\u0094\u0427\3\2\2\2\u0096\u042d")
        buf.write("\3\2\2\2\u0098\u0430\3\2\2\2\u009a\u0438\3\2\2\2\u009c")
        buf.write("\u043f\3\2\2\2\u009e\u0441\3\2\2\2\u00a0\u045b\3\2\2\2")
        buf.write("\u00a2\u0461\3\2\2\2\u00a4\u0463\3\2\2\2\u00a6\u0481\3")
        buf.write("\2\2\2\u00a8\u0483\3\2\2\2\u00aa\u0485\3\2\2\2\u00ac\u048f")
        buf.write("\3\2\2\2\u00ae\u049c\3\2\2\2\u00b0\u04a6\3\2\2\2\u00b2")
        buf.write("\u04aa\3\2\2\2\u00b4\u04ad\3\2\2\2\u00b6\u04b5\3\2\2\2")
        buf.write("\u00b8\u04ba\3\2\2\2\u00ba\u04be\3\2\2\2\u00bc\u04c0\3")
        buf.write("\2\2\2\u00be\u04c3\3\2\2\2\u00c0\u04d0\3\2\2\2\u00c2\u04d2")
        buf.write("\3\2\2\2\u00c4\u04d9\3\2\2\2\u00c6\u04dd\3\2\2\2\u00c8")
        buf.write("\u04e9\3\2\2\2\u00ca\u04f3\3\2\2\2\u00cc\u04f9\3\2\2\2")
        buf.write("\u00ce\u0504\3\2\2\2\u00d0\u0510\3\2\2\2\u00d2\u0512\3")
        buf.write("\2\2\2\u00d4\u051d\3\2\2\2\u00d6\u052b\3\2\2\2\u00d8\u0531")
        buf.write("\3\2\2\2\u00da\u0533\3\2\2\2\u00dc\u053a\3\2\2\2\u00de")
        buf.write("\u054f\3\2\2\2\u00e0\u0551\3\2\2\2\u00e2\u0559\3\2\2\2")
        buf.write("\u00e4\u0562\3\2\2\2\u00e6\u056a\3\2\2\2\u00e8\u0578\3")
        buf.write("\2\2\2\u00ea\u058b\3\2\2\2\u00ec\u059c\3\2\2\2\u00ee\u05af")
        buf.write("\3\2\2\2\u00f0\u05b2\3\2\2\2\u00f2\u05b6\3\2\2\2\u00f4")
        buf.write("\u05b8\3\2\2\2\u00f6\u05bb\3\2\2\2\u00f8\u05bf\3\2\2\2")
        buf.write("\u00fa\u05cb\3\2\2\2\u00fc\u05d0\3\2\2\2\u00fe\u05dc\3")
        buf.write("\2\2\2\u0100\u05ef\3\2\2\2\u0102\u05f4\3\2\2\2\u0104\u0603")
        buf.write("\3\2\2\2\u0106\u060a\3\2\2\2\u0108\u0613\3\2\2\2\u010a")
        buf.write("\u0621\3\2\2\2\u010c\u0634\3\2\2\2\u010e\u063b\3\2\2\2")
        buf.write("\u0110\u0640\3\2\2\2\u0112\u0644\3\2\2\2\u0114\u0646\3")
        buf.write("\2\2\2\u0116\u0654\3\2\2\2\u0118\u065f\3\2\2\2\u011a\u0661")
        buf.write("\3\2\2\2\u011c\u067f\3\2\2\2\u011e\u0682\3\2\2\2\u0120")
        buf.write("\u0686\3\2\2\2\u0122\u0688\3\2\2\2\u0124\u068e\3\2\2\2")
        buf.write("\u0126\u06a2\3\2\2\2\u0128\u06a4\3\2\2\2\u012a\u06c0\3")
        buf.write("\2\2\2\u012c\u06c3\3\2\2\2\u012e\u06c7\3\2\2\2\u0130\u06c9")
        buf.write("\3\2\2\2\u0132\u06cc\3\2\2\2\u0134\u06cf\3\2\2\2\u0136")
        buf.write("\u06de\3\2\2\2\u0138\u06f3\3\2\2\2\u013a\u06f5\3\2\2\2")
        buf.write("\u013c\u06f7\3\2\2\2\u013e\u06f9\3\2\2\2\u0140\u06fc\3")
        buf.write("\2\2\2\u0142\u0700\3\2\2\2\u0144\u0704\3\2\2\2\u0146\u0707")
        buf.write("\3\2\2\2\u0148\u0715\3\2\2\2\u014a\u0720\3\2\2\2\u014c")
        buf.write("\u0722\3\2\2\2\u014e\u0725\3\2\2\2\u0150\u072b\3\2\2\2")
        buf.write("\u0152\u0731\3\2\2\2\u0154\u073b\3\2\2\2\u0156\u0746\3")
        buf.write("\2\2\2\u0158\u0755\3\2\2\2\u015a\u0767\3\2\2\2\u015c\u0769")
        buf.write("\3\2\2\2\u015e\u076b\3\2\2\2\u0160\u077c\3\2\2\2\u0162")
        buf.write("\u077e\3\2\2\2\u0164\u0788\3\2\2\2\u0166\u078d\3\2\2\2")
        buf.write("\u0168\u0792\3\2\2\2\u016a\u0796\3\2\2\2\u016c\u079e\3")
        buf.write("\2\2\2\u016e\u07a2\3\2\2\2\u0170\u07b1\3\2\2\2\u0172\u07b3")
        buf.write("\3\2\2\2\u0174\u07b9\3\2\2\2\u0176\u07bb\3\2\2\2\u0178")
        buf.write("\u07c2\3\2\2\2\u017a\u07d6\3\2\2\2\u017c\u080b\3\2\2\2")
        buf.write("\u017e\u080d\3\2\2\2\u0180\u0182\5z>\2\u0181\u0180\3\2")
        buf.write("\2\2\u0181\u0182\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0184")
        buf.write("\7\2\2\3\u0184\3\3\2\2\2\u0185\u0187\5\u017e\u00c0\2\u0186")
        buf.write("\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u0192\3\2\2\2\u018a\u0192\7")
        buf.write("G\2\2\u018b\u018c\7W\2\2\u018c\u018d\5\\/\2\u018d\u018e")
        buf.write("\7X\2\2\u018e\u0192\3\2\2\2\u018f\u0192\5\6\4\2\u0190")
        buf.write("\u0192\5\16\b\2\u0191\u0186\3\2\2\2\u0191\u018a\3\2\2")
        buf.write("\2\u0191\u018b\3\2\2\2\u0191\u018f\3\2\2\2\u0191\u0190")
        buf.write("\3\2\2\2\u0192\5\3\2\2\2\u0193\u0196\5\b\5\2\u0194\u0196")
        buf.write("\5\n\6\2\u0195\u0193\3\2\2\2\u0195\u0194\3\2\2\2\u0196")
        buf.write("\7\3\2\2\2\u0197\u01a2\7\u0086\2\2\u0198\u01a2\5\u014c")
        buf.write("\u00a7\2\u0199\u01a2\5\u013e\u00a0\2\u019a\u01a2\5\u014e")
        buf.write("\u00a8\2\u019b\u019e\7e\2\2\u019c\u019f\5\u0118\u008d")
        buf.write("\2\u019d\u019f\5\u00a4S\2\u019e\u019c\3\2\2\2\u019e\u019d")
        buf.write("\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u01a2\5\u015a\u00ae")
        buf.write("\2\u01a1\u0197\3\2\2\2\u01a1\u0198\3\2\2\2\u01a1\u0199")
        buf.write("\3\2\2\2\u01a1\u019a\3\2\2\2\u01a1\u019b\3\2\2\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a2\t\3\2\2\2\u01a3\u01a5\5\f\7\2\u01a4")
        buf.write("\u01a6\7F\2\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2\2\2")
        buf.write("\u01a6\u01a7\3\2\2\2\u01a7\u01a8\5\b\5\2\u01a8\13\3\2")
        buf.write("\2\2\u01a9\u01ad\b\7\1\2\u01aa\u01ae\5\u00a2R\2\u01ab")
        buf.write("\u01ae\5\u00ba^\2\u01ac\u01ae\5\u00a4S\2\u01ad\u01aa\3")
        buf.write("\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\7\u0081\2\2\u01b0")
        buf.write("\u01bc\3\2\2\2\u01b1\u01b7\f\3\2\2\u01b2\u01b8\7\u0086")
        buf.write("\2\2\u01b3\u01b5\7F\2\2\u01b4\u01b3\3\2\2\2\u01b4\u01b5")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b8\5\u0158\u00ad")
        buf.write("\2\u01b7\u01b2\3\2\2\2\u01b7\u01b4\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01bb\7\u0081\2\2\u01ba\u01b1\3\2\2\2\u01bb")
        buf.write("\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2")
        buf.write("\u01bd\r\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01c1\5\20")
        buf.write("\t\2\u01c0\u01c2\5\36\20\2\u01c1\u01c0\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\5f\64\2\u01c4")
        buf.write("\17\3\2\2\2\u01c5\u01c7\7Y\2\2\u01c6\u01c8\5\22\n\2\u01c7")
        buf.write("\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2")
        buf.write("\u01c9\u01ca\7Z\2\2\u01ca\21\3\2\2\2\u01cb\u01d2\5\26")
        buf.write("\f\2\u01cc\u01cf\5\24\13\2\u01cd\u01ce\7|\2\2\u01ce\u01d0")
        buf.write("\5\26\f\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0")
        buf.write("\u01d2\3\2\2\2\u01d1\u01cb\3\2\2\2\u01d1\u01cc\3\2\2\2")
        buf.write("\u01d2\23\3\2\2\2\u01d3\u01d4\t\2\2\2\u01d4\25\3\2\2\2")
        buf.write("\u01d5\u01da\5\30\r\2\u01d6\u01d7\7|\2\2\u01d7\u01d9\5")
        buf.write("\30\r\2\u01d8\u01d6\3\2\2\2\u01d9\u01dc\3\2\2\2\u01da")
        buf.write("\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01de\3\2\2\2")
        buf.write("\u01dc\u01da\3\2\2\2\u01dd\u01df\7\u0085\2\2\u01de\u01dd")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\27\3\2\2\2\u01e0\u01e3")
        buf.write("\5\32\16\2\u01e1\u01e3\5\34\17\2\u01e2\u01e0\3\2\2\2\u01e2")
        buf.write("\u01e1\3\2\2\2\u01e3\31\3\2\2\2\u01e4\u01e6\7c\2\2\u01e5")
        buf.write("\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01ea\7\u0086\2\2\u01e8\u01ea\7G\2\2\u01e9\u01e5")
        buf.write("\3\2\2\2\u01e9\u01e8\3\2\2\2\u01ea\33\3\2\2\2\u01eb\u01ed")
        buf.write("\7c\2\2\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01ef\7\u0086\2\2\u01ef\u01f0\5\u010e")
        buf.write("\u0088\2\u01f0\35\3\2\2\2\u01f1\u01f3\7W\2\2\u01f2\u01f4")
        buf.write("\5\u0104\u0083\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2")
        buf.write("\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\7X\2\2\u01f6\u01f8")
        buf.write("\7\61\2\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u01fa\3\2\2\2\u01f9\u01fb\5\u0174\u00bb\2\u01fa\u01f9")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3\2\2\2\u01fc")
        buf.write("\u01fe\5\u00ceh\2\u01fd\u01fc\3\2\2\2\u01fd\u01fe\3\2")
        buf.write("\2\2\u01fe\u0200\3\2\2\2\u01ff\u0201\5\u00ecw\2\u0200")
        buf.write("\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\37\3\2\2\2\u0202")
        buf.write("\u0203\b\21\1\2\u0203\u0221\5\4\3\2\u0204\u0207\5\u00a0")
        buf.write("Q\2\u0205\u0207\5\u0162\u00b2\2\u0206\u0204\3\2\2\2\u0206")
        buf.write("\u0205\3\2\2\2\u0207\u020e\3\2\2\2\u0208\u020a\7W\2\2")
        buf.write("\u0209\u020b\5$\23\2\u020a\u0209\3\2\2\2\u020a\u020b\3")
        buf.write("\2\2\2\u020b\u020c\3\2\2\2\u020c\u020f\7X\2\2\u020d\u020f")
        buf.write("\5\u0116\u008c\2\u020e\u0208\3\2\2\2\u020e\u020d\3\2\2")
        buf.write("\2\u020f\u0221\3\2\2\2\u0210\u0211\t\3\2\2\u0211\u0212")
        buf.write("\7h\2\2\u0212\u0213\5\u00f8}\2\u0213\u0214\7i\2\2\u0214")
        buf.write("\u0215\7W\2\2\u0215\u0216\5\\/\2\u0216\u0217\7X\2\2\u0217")
        buf.write("\u0221\3\2\2\2\u0218\u0219\5\"\22\2\u0219\u021c\7W\2\2")
        buf.write("\u021a\u021d\5\\/\2\u021b\u021d\5\u00f8}\2\u021c\u021a")
        buf.write("\3\2\2\2\u021c\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u021f\7X\2\2\u021f\u0221\3\2\2\2\u0220\u0202\3\2\2\2")
        buf.write("\u0220\u0206\3\2\2\2\u0220\u0210\3\2\2\2\u0220\u0218\3")
        buf.write("\2\2\2\u0221\u023d\3\2\2\2\u0222\u0223\f\t\2\2\u0223\u0226")
        buf.write("\7Y\2\2\u0224\u0227\5\\/\2\u0225\u0227\5\u0116\u008c\2")
        buf.write("\u0226\u0224\3\2\2\2\u0226\u0225\3\2\2\2\u0227\u0228\3")
        buf.write("\2\2\2\u0228\u0229\7Z\2\2\u0229\u023c\3\2\2\2\u022a\u022b")
        buf.write("\f\b\2\2\u022b\u022d\7W\2\2\u022c\u022e\5$\23\2\u022d")
        buf.write("\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f\3\2\2\2")
        buf.write("\u022f\u023c\7X\2\2\u0230\u0231\f\6\2\2\u0231\u0237\t")
        buf.write("\4\2\2\u0232\u0234\7F\2\2\u0233\u0232\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0238\5\6\4\2\u0236")
        buf.write("\u0238\5&\24\2\u0237\u0233\3\2\2\2\u0237\u0236\3\2\2\2")
        buf.write("\u0238\u023c\3\2\2\2\u0239\u023a\f\5\2\2\u023a\u023c\t")
        buf.write("\5\2\2\u023b\u0222\3\2\2\2\u023b\u022a\3\2\2\2\u023b\u0230")
        buf.write("\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023f\3\2\2\2\u023d")
        buf.write("\u023b\3\2\2\2\u023d\u023e\3\2\2\2\u023e!\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u0240\u0241\7M\2\2\u0241#\3\2\2\2\u0242")
        buf.write("\u0243\5\u0114\u008b\2\u0243%\3\2\2\2\u0244\u0246\5\f")
        buf.write("\7\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u024a")
        buf.write("\3\2\2\2\u0247\u0248\5\u00a2R\2\u0248\u0249\7\u0081\2")
        buf.write("\2\u0249\u024b\3\2\2\2\u024a\u0247\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\7e\2\2\u024d")
        buf.write("\u0258\5\u00a2R\2\u024e\u024f\5\f\7\2\u024f\u0250\7F\2")
        buf.write("\2\u0250\u0251\5\u0158\u00ad\2\u0251\u0252\7\u0081\2\2")
        buf.write("\u0252\u0253\7e\2\2\u0253\u0254\5\u00a2R\2\u0254\u0258")
        buf.write("\3\2\2\2\u0255\u0256\7e\2\2\u0256\u0258\5\u00a4S\2\u0257")
        buf.write("\u0245\3\2\2\2\u0257\u024e\3\2\2\2\u0257\u0255\3\2\2\2")
        buf.write("\u0258\'\3\2\2\2\u0259\u0275\5 \21\2\u025a\u025f\7z\2")
        buf.write("\2\u025b\u025f\7{\2\2\u025c\u025f\5*\26\2\u025d\u025f")
        buf.write("\7@\2\2\u025e\u025a\3\2\2\2\u025e\u025b\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025e\u025d\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write("\u0260\u0275\5(\25\2\u0261\u026a\7@\2\2\u0262\u0263\7")
        buf.write("W\2\2\u0263\u0264\5\u00f8}\2\u0264\u0265\7X\2\2\u0265")
        buf.write("\u026b\3\2\2\2\u0266\u0267\7\u0085\2\2\u0267\u0268\7W")
        buf.write("\2\2\u0268\u0269\7\u0086\2\2\u0269\u026b\7X\2\2\u026a")
        buf.write("\u0262\3\2\2\2\u026a\u0266\3\2\2\2\u026b\u0275\3\2\2\2")
        buf.write("\u026c\u026d\7\r\2\2\u026d\u026e\7W\2\2\u026e\u026f\5")
        buf.write("\u00f8}\2\u026f\u0270\7X\2\2\u0270\u0275\3\2\2\2\u0271")
        buf.write("\u0275\5:\36\2\u0272\u0275\5,\27\2\u0273\u0275\58\35\2")
        buf.write("\u0274\u0259\3\2\2\2\u0274\u025e\3\2\2\2\u0274\u0261\3")
        buf.write("\2\2\2\u0274\u026c\3\2\2\2\u0274\u0271\3\2\2\2\u0274\u0272")
        buf.write("\3\2\2\2\u0274\u0273\3\2\2\2\u0275)\3\2\2\2\u0276\u0277")
        buf.write("\t\6\2\2\u0277+\3\2\2\2\u0278\u027a\7\u0081\2\2\u0279")
        buf.write("\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\3\2\2\2")
        buf.write("\u027b\u027d\7\63\2\2\u027c\u027e\5.\30\2\u027d\u027c")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0284\3\2\2\2\u027f")
        buf.write("\u0285\5\60\31\2\u0280\u0281\7W\2\2\u0281\u0282\5\u00f8")
        buf.write("}\2\u0282\u0283\7X\2\2\u0283\u0285\3\2\2\2\u0284\u027f")
        buf.write("\3\2\2\2\u0284\u0280\3\2\2\2\u0285\u0287\3\2\2\2\u0286")
        buf.write("\u0288\5\66\34\2\u0287\u0286\3\2\2\2\u0287\u0288\3\2\2")
        buf.write("\2\u0288-\3\2\2\2\u0289\u028a\7W\2\2\u028a\u028b\5$\23")
        buf.write("\2\u028b\u028c\7X\2\2\u028c/\3\2\2\2\u028d\u028f\5\u0098")
        buf.write("M\2\u028e\u0290\5\62\32\2\u028f\u028e\3\2\2\2\u028f\u0290")
        buf.write("\3\2\2\2\u0290\61\3\2\2\2\u0291\u0293\5\u00eex\2\u0292")
        buf.write("\u0294\5\62\32\2\u0293\u0292\3\2\2\2\u0293\u0294\3\2\2")
        buf.write("\2\u0294\u0297\3\2\2\2\u0295\u0297\5\64\33\2\u0296\u0291")
        buf.write("\3\2\2\2\u0296\u0295\3\2\2\2\u0297\63\3\2\2\2\u0298\u0299")
        buf.write("\b\33\1\2\u0299\u029a\7Y\2\2\u029a\u029b\5\\/\2\u029b")
        buf.write("\u029d\7Z\2\2\u029c\u029e\5\u00ceh\2\u029d\u029c\3\2\2")
        buf.write("\2\u029d\u029e\3\2\2\2\u029e\u02a8\3\2\2\2\u029f\u02a0")
        buf.write("\f\3\2\2\u02a0\u02a1\7Y\2\2\u02a1\u02a2\5^\60\2\u02a2")
        buf.write("\u02a4\7Z\2\2\u02a3\u02a5\5\u00ceh\2\u02a4\u02a3\3\2\2")
        buf.write("\2\u02a4\u02a5\3\2\2\2\u02a5\u02a7\3\2\2\2\u02a6\u029f")
        buf.write("\3\2\2\2\u02a7\u02aa\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\65\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab")
        buf.write("\u02ad\7W\2\2\u02ac\u02ae\5$\23\2\u02ad\u02ac\3\2\2\2")
        buf.write("\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b2\7")
        buf.write("X\2\2\u02b0\u02b2\5\u0116\u008c\2\u02b1\u02ab\3\2\2\2")
        buf.write("\u02b1\u02b0\3\2\2\2\u02b2\67\3\2\2\2\u02b3\u02b5\7\u0081")
        buf.write("\2\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6")
        buf.write("\3\2\2\2\u02b6\u02b9\7\36\2\2\u02b7\u02b8\7Y\2\2\u02b8")
        buf.write("\u02ba\7Z\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2")
        buf.write("\u02ba\u02bb\3\2\2\2\u02bb\u02bc\5<\37\2\u02bc9\3\2\2")
        buf.write("\2\u02bd\u02be\7\64\2\2\u02be\u02bf\7W\2\2\u02bf\u02c0")
        buf.write("\5\\/\2\u02c0\u02c1\7X\2\2\u02c1;\3\2\2\2\u02c2\u02c9")
        buf.write("\5(\25\2\u02c3\u02c4\7W\2\2\u02c4\u02c5\5\u00f8}\2\u02c5")
        buf.write("\u02c6\7X\2\2\u02c6\u02c7\5<\37\2\u02c7\u02c9\3\2\2\2")
        buf.write("\u02c8\u02c2\3\2\2\2\u02c8\u02c3\3\2\2\2\u02c9=\3\2\2")
        buf.write("\2\u02ca\u02cf\5<\37\2\u02cb\u02cc\t\7\2\2\u02cc\u02ce")
        buf.write("\5<\37\2\u02cd\u02cb\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf")
        buf.write("\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0?\3\2\2\2\u02d1")
        buf.write("\u02cf\3\2\2\2\u02d2\u02d7\5> \2\u02d3\u02d4\t\b\2\2\u02d4")
        buf.write("\u02d6\5> \2\u02d5\u02d3\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8A\3\2\2\2\u02d9")
        buf.write("\u02d7\3\2\2\2\u02da\u02df\5@!\2\u02db\u02dc\t\t\2\2\u02dc")
        buf.write("\u02de\5@!\2\u02dd\u02db\3\2\2\2\u02de\u02e1\3\2\2\2\u02df")
        buf.write("\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0C\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e8\5B\"\2\u02e3\u02e4\5F$\2\u02e4")
        buf.write("\u02e5\5B\"\2\u02e5\u02e7\3\2\2\2\u02e6\u02e3\3\2\2\2")
        buf.write("\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3")
        buf.write("\2\2\2\u02e9E\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02ec")
        buf.write("\7i\2\2\u02ec\u02f0\7i\2\2\u02ed\u02ee\7h\2\2\u02ee\u02f0")
        buf.write("\7h\2\2\u02ef\u02eb\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0")
        buf.write("G\3\2\2\2\u02f1\u02f6\5D#\2\u02f2\u02f3\t\n\2\2\u02f3")
        buf.write("\u02f5\5D#\2\u02f4\u02f2\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6")
        buf.write("\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7I\3\2\2\2\u02f8")
        buf.write("\u02f6\3\2\2\2\u02f9\u02fe\5H%\2\u02fa\u02fb\t\13\2\2")
        buf.write("\u02fb\u02fd\5H%\2\u02fc\u02fa\3\2\2\2\u02fd\u0300\3\2")
        buf.write("\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ffK\3")
        buf.write("\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0306\5J&\2\u0302\u0303")
        buf.write("\7c\2\2\u0303\u0305\5J&\2\u0304\u0302\3\2\2\2\u0305\u0308")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("M\3\2\2\2\u0308\u0306\3\2\2\2\u0309\u030e\5L\'\2\u030a")
        buf.write("\u030b\7b\2\2\u030b\u030d\5L\'\2\u030c\u030a\3\2\2\2\u030d")
        buf.write("\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030fO\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u0316\5N(\2")
        buf.write("\u0312\u0313\7d\2\2\u0313\u0315\5N(\2\u0314\u0312\3\2")
        buf.write("\2\2\u0315\u0318\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317")
        buf.write("\3\2\2\2\u0317Q\3\2\2\2\u0318\u0316\3\2\2\2\u0319\u031e")
        buf.write("\5P)\2\u031a\u031b\7x\2\2\u031b\u031d\5P)\2\u031c\u031a")
        buf.write("\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031fS\3\2\2\2\u0320\u031e\3\2\2\2\u0321")
        buf.write("\u0326\5R*\2\u0322\u0323\7y\2\2\u0323\u0325\5R*\2\u0324")
        buf.write("\u0322\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2")
        buf.write("\u0326\u0327\3\2\2\2\u0327U\3\2\2\2\u0328\u0326\3\2\2")
        buf.write("\2\u0329\u032f\5T+\2\u032a\u032b\7\177\2\2\u032b\u032c")
        buf.write("\5\\/\2\u032c\u032d\7\u0080\2\2\u032d\u032e\5X-\2\u032e")
        buf.write("\u0330\3\2\2\2\u032f\u032a\3\2\2\2\u032f\u0330\3\2\2\2")
        buf.write("\u0330W\3\2\2\2\u0331\u0338\5V,\2\u0332\u0333\5T+\2\u0333")
        buf.write("\u0334\5Z.\2\u0334\u0335\5\u0112\u008a\2\u0335\u0338\3")
        buf.write("\2\2\2\u0336\u0338\5\u0172\u00ba\2\u0337\u0331\3\2\2\2")
        buf.write("\u0337\u0332\3\2\2\2\u0337\u0336\3\2\2\2\u0338Y\3\2\2")
        buf.write("\2\u0339\u033a\t\f\2\2\u033a[\3\2\2\2\u033b\u0340\5X-")
        buf.write("\2\u033c\u033d\7|\2\2\u033d\u033f\5X-\2\u033e\u033c\3")
        buf.write("\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341")
        buf.write("\3\2\2\2\u0341]\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0344")
        buf.write("\5V,\2\u0344_\3\2\2\2\u0345\u0353\5b\62\2\u0346\u0353")
        buf.write("\5x=\2\u0347\u0349\5\u00ceh\2\u0348\u0347\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u0350\3\2\2\2\u034a\u0351\5d\63\2")
        buf.write("\u034b\u0351\5f\64\2\u034c\u0351\5j\66\2\u034d\u0351\5")
        buf.write("n8\2\u034e\u0351\5v<\2\u034f\u0351\5\u0168\u00b5\2\u0350")
        buf.write("\u034a\3\2\2\2\u0350\u034b\3\2\2\2\u0350\u034c\3\2\2\2")
        buf.write("\u0350\u034d\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u034f\3")
        buf.write("\2\2\2\u0351\u0353\3\2\2\2\u0352\u0345\3\2\2\2\u0352\u0346")
        buf.write("\3\2\2\2\u0352\u0348\3\2\2\2\u0353a\3\2\2\2\u0354\u0356")
        buf.write("\5\u00ceh\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356")
        buf.write("\u035b\3\2\2\2\u0357\u035c\7\u0086\2\2\u0358\u0359\7\22")
        buf.write("\2\2\u0359\u035c\5^\60\2\u035a\u035c\7\35\2\2\u035b\u0357")
        buf.write("\3\2\2\2\u035b\u0358\3\2\2\2\u035b\u035a\3\2\2\2\u035c")
        buf.write("\u035d\3\2\2\2\u035d\u035e\7\u0080\2\2\u035e\u035f\5`")
        buf.write("\61\2\u035fc\3\2\2\2\u0360\u0362\5\\/\2\u0361\u0360\3")
        buf.write("\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364")
        buf.write("\7\u0082\2\2\u0364e\3\2\2\2\u0365\u0367\7[\2\2\u0366\u0368")
        buf.write("\5h\65\2\u0367\u0366\3\2\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369\u036a\7\\\2\2\u036ag\3\2\2\2\u036b")
        buf.write("\u036d\5`\61\2\u036c\u036b\3\2\2\2\u036d\u036e\3\2\2\2")
        buf.write("\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036fi\3\2\2")
        buf.write("\2\u0370\u0371\7-\2\2\u0371\u0372\7W\2\2\u0372\u0373\5")
        buf.write("l\67\2\u0373\u0374\7X\2\2\u0374\u0377\5`\61\2\u0375\u0376")
        buf.write("\7\"\2\2\u0376\u0378\5`\61\2\u0377\u0375\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u0380\3\2\2\2\u0379\u037a\7E\2\2")
        buf.write("\u037a\u037b\7W\2\2\u037b\u037c\5l\67\2\u037c\u037d\7")
        buf.write("X\2\2\u037d\u037e\5`\61\2\u037e\u0380\3\2\2\2\u037f\u0370")
        buf.write("\3\2\2\2\u037f\u0379\3\2\2\2\u0380k\3\2\2\2\u0381\u038d")
        buf.write("\5\\/\2\u0382\u0384\5\u00ceh\2\u0383\u0382\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386\5\u008c")
        buf.write("G\2\u0386\u038a\5\u00e4s\2\u0387\u0388\7g\2\2\u0388\u038b")
        buf.write("\5\u0112\u008a\2\u0389\u038b\5\u0116\u008c\2\u038a\u0387")
        buf.write("\3\2\2\2\u038a\u0389\3\2\2\2\u038b\u038d\3\2\2\2\u038c")
        buf.write("\u0381\3\2\2\2\u038c\u0383\3\2\2\2\u038dm\3\2\2\2\u038e")
        buf.write("\u038f\7V\2\2\u038f\u0390\7W\2\2\u0390\u0391\5l\67\2\u0391")
        buf.write("\u0392\7X\2\2\u0392\u0393\5`\61\2\u0393\u03b0\3\2\2\2")
        buf.write("\u0394\u0395\7\37\2\2\u0395\u0396\5`\61\2\u0396\u0397")
        buf.write("\7V\2\2\u0397\u0398\7W\2\2\u0398\u0399\5\\/\2\u0399\u039a")
        buf.write("\7X\2\2\u039a\u039b\7\u0082\2\2\u039b\u03b0\3\2\2\2\u039c")
        buf.write("\u039d\7*\2\2\u039d\u03aa\7W\2\2\u039e\u03a0\5p9\2\u039f")
        buf.write("\u03a1\5l\67\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2")
        buf.write("\u03a1\u03a2\3\2\2\2\u03a2\u03a4\7\u0082\2\2\u03a3\u03a5")
        buf.write("\5\\/\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03ab\3\2\2\2\u03a6\u03a7\5r:\2\u03a7\u03a8\7\u0080\2")
        buf.write("\2\u03a8\u03a9\5t;\2\u03a9\u03ab\3\2\2\2\u03aa\u039e\3")
        buf.write("\2\2\2\u03aa\u03a6\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad")
        buf.write("\7X\2\2\u03ad\u03ae\5`\61\2\u03ae\u03b0\3\2\2\2\u03af")
        buf.write("\u038e\3\2\2\2\u03af\u0394\3\2\2\2\u03af\u039c\3\2\2\2")
        buf.write("\u03b0o\3\2\2\2\u03b1\u03b4\5d\63\2\u03b2\u03b4\5\u0082")
        buf.write("B\2\u03b3\u03b1\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b4q\3\2")
        buf.write("\2\2\u03b5\u03b7\5\u00ceh\2\u03b6\u03b5\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\5\u008c")
        buf.write("G\2\u03b9\u03ba\5\u00e4s\2\u03bas\3\2\2\2\u03bb\u03be")
        buf.write("\5\\/\2\u03bc\u03be\5\u0116\u008c\2\u03bd\u03bb\3\2\2")
        buf.write("\2\u03bd\u03bc\3\2\2\2\u03beu\3\2\2\2\u03bf\u03c9\7\21")
        buf.write("\2\2\u03c0\u03c9\7\33\2\2\u03c1\u03c4\7=\2\2\u03c2\u03c5")
        buf.write("\5\\/\2\u03c3\u03c5\5\u0116\u008c\2\u03c4\u03c2\3\2\2")
        buf.write("\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c9")
        buf.write("\3\2\2\2\u03c6\u03c7\7,\2\2\u03c7\u03c9\7\u0086\2\2\u03c8")
        buf.write("\u03bf\3\2\2\2\u03c8\u03c0\3\2\2\2\u03c8\u03c1\3\2\2\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\7")
        buf.write("\u0082\2\2\u03cbw\3\2\2\2\u03cc\u03cd\5~@\2\u03cdy\3\2")
        buf.write("\2\2\u03ce\u03d0\5|?\2\u03cf\u03ce\3\2\2\2\u03d0\u03d1")
        buf.write("\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("{\3\2\2\2\u03d3\u03dd\5~@\2\u03d4\u03dd\5\u010a\u0086")
        buf.write("\2\u03d5\u03dd\5\u0150\u00a9\2\u03d6\u03dd\5\u0164\u00b3")
        buf.write("\2\u03d7\u03dd\5\u0166\u00b4\2\u03d8\u03dd\5\u00ccg\2")
        buf.write("\u03d9\u03dd\5\u00be`\2\u03da\u03dd\5\u0086D\2\u03db\u03dd")
        buf.write("\5\u0088E\2\u03dc\u03d3\3\2\2\2\u03dc\u03d4\3\2\2\2\u03dc")
        buf.write("\u03d5\3\2\2\2\u03dc\u03d6\3\2\2\2\u03dc\u03d7\3\2\2\2")
        buf.write("\u03dc\u03d8\3\2\2\2\u03dc\u03d9\3\2\2\2\u03dc\u03da\3")
        buf.write("\2\2\2\u03dc\u03db\3\2\2\2\u03dd}\3\2\2\2\u03de\u03e7")
        buf.write("\5\u0082B\2\u03df\u03e7\5\u00caf\2\u03e0\u03e7\5\u00c2")
        buf.write("b\2\u03e1\u03e7\5\u00c6d\2\u03e2\u03e7\5\u00c8e\2\u03e3")
        buf.write("\u03e7\5\u0084C\2\u03e4\u03e7\5\u0080A\2\u03e5\u03e7\5")
        buf.write("\u00aeX\2\u03e6\u03de\3\2\2\2\u03e6\u03df\3\2\2\2\u03e6")
        buf.write("\u03e0\3\2\2\2\u03e6\u03e1\3\2\2\2\u03e6\u03e2\3\2\2\2")
        buf.write("\u03e6\u03e3\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e5\3")
        buf.write("\2\2\2\u03e7\177\3\2\2\2\u03e8\u03e9\7Q\2\2\u03e9\u03eb")
        buf.write("\7\u0086\2\2\u03ea\u03ec\5\u00ceh\2\u03eb\u03ea\3\2\2")
        buf.write("\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee")
        buf.write("\7g\2\2\u03ee\u03ef\5\u00f8}\2\u03ef\u03f0\7\u0082\2\2")
        buf.write("\u03f0\u0081\3\2\2\2\u03f1\u03f3\5\u008cG\2\u03f2\u03f1")
        buf.write("\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\3\2\2\2\u03f4")
        buf.write("\u03f6\5\u00e0q\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2")
        buf.write("\2\2\u03f6\u03f7\3\2\2\2\u03f7\u0400\7\u0082\2\2\u03f8")
        buf.write("\u03fa\5\u00ceh\2\u03f9\u03fb\5\u008cG\2\u03fa\u03f9\3")
        buf.write("\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd")
        buf.write("\5\u00e0q\2\u03fd\u03fe\7\u0082\2\2\u03fe\u0400\3\2\2")
        buf.write("\2\u03ff\u03f2\3\2\2\2\u03ff\u03f8\3\2\2\2\u0400\u0083")
        buf.write("\3\2\2\2\u0401\u0402\7B\2\2\u0402\u0403\7W\2\2\u0403\u0404")
        buf.write("\5^\60\2\u0404\u0405\7|\2\2\u0405\u0406\7\6\2\2\u0406")
        buf.write("\u0407\7X\2\2\u0407\u0408\7\u0082\2\2\u0408\u0085\3\2")
        buf.write("\2\2\u0409\u040a\7\u0082\2\2\u040a\u0087\3\2\2\2\u040b")
        buf.write("\u040c\5\u00ceh\2\u040c\u040d\7\u0082\2\2\u040d\u0089")
        buf.write("\3\2\2\2\u040e\u0415\5\u008eH\2\u040f\u0415\5\u0094K\2")
        buf.write("\u0410\u0415\5\u0090I\2\u0411\u0415\7+\2\2\u0412\u0415")
        buf.write("\7L\2\2\u0413\u0415\7\31\2\2\u0414\u040e\3\2\2\2\u0414")
        buf.write("\u040f\3\2\2\2\u0414\u0410\3\2\2\2\u0414\u0411\3\2\2\2")
        buf.write("\u0414\u0412\3\2\2\2\u0414\u0413\3\2\2\2\u0415\u008b\3")
        buf.write("\2\2\2\u0416\u0418\5\u008aF\2\u0417\u0416\3\2\2\2\u0418")
        buf.write("\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u0419\u0417\3\2\2\2")
        buf.write("\u041a\u041c\3\2\2\2\u041b\u041d\5\u00ceh\2\u041c\u041b")
        buf.write("\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u008d\3\2\2\2\u041e")
        buf.write("\u041f\t\r\2\2\u041f\u008f\3\2\2\2\u0420\u0421\t\16\2")
        buf.write("\2\u0421\u0091\3\2\2\2\u0422\u0423\7\u0086\2\2\u0423\u0093")
        buf.write("\3\2\2\2\u0424\u0428\5\u0096L\2\u0425\u0428\5\u011a\u008e")
        buf.write("\2\u0426\u0428\5\u00aaV\2\u0427\u0424\3\2\2\2\u0427\u0425")
        buf.write("\3\2\2\2\u0427\u0426\3\2\2\2\u0428\u0095\3\2\2\2\u0429")
        buf.write("\u042e\5\u00a0Q\2\u042a\u042e\5\u00a6T\2\u042b\u042e\5")
        buf.write("\u0162\u00b2\2\u042c\u042e\5\u00f2z\2\u042d\u0429\3\2")
        buf.write("\2\2\u042d\u042a\3\2\2\2\u042d\u042b\3\2\2\2\u042d\u042c")
        buf.write("\3\2\2\2\u042e\u0097\3\2\2\2\u042f\u0431\5\u0094K\2\u0430")
        buf.write("\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0430\3\2\2\2")
        buf.write("\u0432\u0433\3\2\2\2\u0433\u0435\3\2\2\2\u0434\u0436\5")
        buf.write("\u00ceh\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436")
        buf.write("\u0099\3\2\2\2\u0437\u0439\5\u0096L\2\u0438\u0437\3\2")
        buf.write("\2\2\u0439\u043a\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b")
        buf.write("\3\2\2\2\u043b\u043d\3\2\2\2\u043c\u043e\5\u00ceh\2\u043d")
        buf.write("\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u009b\3\2\2\2")
        buf.write("\u043f\u0440\t\17\2\2\u0440\u009d\3\2\2\2\u0441\u0442")
        buf.write("\t\20\2\2\u0442\u009f\3\2\2\2\u0443\u0445\5\f\7\2\u0444")
        buf.write("\u0443\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0446\3\2\2\2")
        buf.write("\u0446\u045c\5\u00a2R\2\u0447\u0448\5\f\7\2\u0448\u0449")
        buf.write("\7F\2\2\u0449\u044a\5\u0158\u00ad\2\u044a\u045c\3\2\2")
        buf.write("\2\u044b\u045c\7\24\2\2\u044c\u045c\7\25\2\2\u044d\u045c")
        buf.write("\7\26\2\2\u044e\u045c\7U\2\2\u044f\u045c\7\20\2\2\u0450")
        buf.write("\u045c\7>\2\2\u0451\u045c\7/\2\2\u0452\u045c\7\60\2\2")
        buf.write("\u0453\u045c\7)\2\2\u0454\u045c\7?\2\2\u0455\u045c\7P")
        buf.write("\2\2\u0456\u045c\7)\2\2\u0457\u045c\7 \2\2\u0458\u045c")
        buf.write("\7S\2\2\u0459\u045c\7\17\2\2\u045a\u045c\5\u00a4S\2\u045b")
        buf.write("\u0444\3\2\2\2\u045b\u0447\3\2\2\2\u045b\u044b\3\2\2\2")
        buf.write("\u045b\u044c\3\2\2\2\u045b\u044d\3\2\2\2\u045b\u044e\3")
        buf.write("\2\2\2\u045b\u044f\3\2\2\2\u045b\u0450\3\2\2\2\u045b\u0451")
        buf.write("\3\2\2\2\u045b\u0452\3\2\2\2\u045b\u0453\3\2\2\2\u045b")
        buf.write("\u0454\3\2\2\2\u045b\u0455\3\2\2\2\u045b\u0456\3\2\2\2")
        buf.write("\u045b\u0457\3\2\2\2\u045b\u0458\3\2\2\2\u045b\u0459\3")
        buf.write("\2\2\2\u045b\u045a\3\2\2\2\u045c\u00a1\3\2\2\2\u045d\u0462")
        buf.write("\5\u0118\u008d\2\u045e\u0462\5\u00a8U\2\u045f\u0462\5")
        buf.write("\u0092J\2\u0460\u0462\5\u0158\u00ad\2\u0461\u045d\3\2")
        buf.write("\2\2\u0461\u045e\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0460")
        buf.write("\3\2\2\2\u0462\u00a3\3\2\2\2\u0463\u0464\7\34\2\2\u0464")
        buf.write("\u0467\7W\2\2\u0465\u0468\5\\/\2\u0466\u0468\7\17\2\2")
        buf.write("\u0467\u0465\3\2\2\2\u0467\u0466\3\2\2\2\u0468\u0469\3")
        buf.write("\2\2\2\u0469\u046a\7X\2\2\u046a\u00a5\3\2\2\2\u046b\u047a")
        buf.write("\5\u0122\u0092\2\u046c\u046e\5\u00ceh\2\u046d\u046c\3")
        buf.write("\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470\3\2\2\2\u046f\u0471")
        buf.write("\5\f\7\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471")
        buf.write("\u0472\3\2\2\2\u0472\u047b\7\u0086\2\2\u0473\u047b\5\u0158")
        buf.write("\u00ad\2\u0474\u0476\5\f\7\2\u0475\u0477\7F\2\2\u0476")
        buf.write("\u0475\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2")
        buf.write("\u0478\u0479\5\u0158\u00ad\2\u0479\u047b\3\2\2\2\u047a")
        buf.write("\u046d\3\2\2\2\u047a\u0473\3\2\2\2\u047a\u0474\3\2\2\2")
        buf.write("\u047b\u0482\3\2\2\2\u047c\u047e\7#\2\2\u047d\u047f\5")
        buf.write("\f\7\2\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480")
        buf.write("\3\2\2\2\u0480\u0482\7\u0086\2\2\u0481\u046b\3\2\2\2\u0481")
        buf.write("\u047c\3\2\2\2\u0482\u00a7\3\2\2\2\u0483\u0484\7\u0086")
        buf.write("\2\2\u0484\u00a9\3\2\2\2\u0485\u0486\5\u00acW\2\u0486")
        buf.write("\u048b\7[\2\2\u0487\u0489\5\u00b4[\2\u0488\u048a\7|\2")
        buf.write("\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c")
        buf.write("\3\2\2\2\u048b\u0487\3\2\2\2\u048b\u048c\3\2\2\2\u048c")
        buf.write("\u048d\3\2\2\2\u048d\u048e\7\\\2\2\u048e\u00ab\3\2\2\2")
        buf.write("\u048f\u0491\5\u00b0Y\2\u0490\u0492\5\u00ceh\2\u0491\u0490")
        buf.write("\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0497\3\2\2\2\u0493")
        buf.write("\u0495\5\f\7\2\u0494\u0493\3\2\2\2\u0494\u0495\3\2\2\2")
        buf.write("\u0495\u0496\3\2\2\2\u0496\u0498\7\u0086\2\2\u0497\u0494")
        buf.write("\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\3\2\2\2\u0499")
        buf.write("\u049b\5\u00b2Z\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2")
        buf.write("\2\2\u049b\u00ad\3\2\2\2\u049c\u049e\5\u00b0Y\2\u049d")
        buf.write("\u049f\5\u00ceh\2\u049e\u049d\3\2\2\2\u049e\u049f\3\2")
        buf.write("\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2\7\u0086\2\2\u04a1")
        buf.write("\u04a3\5\u00b2Z\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3\3\2")
        buf.write("\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\7\u0082\2\2\u04a5")
        buf.write("\u00af\3\2\2\2\u04a6\u04a8\7#\2\2\u04a7\u04a9\t\21\2\2")
        buf.write("\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u00b1\3")
        buf.write("\2\2\2\u04aa\u04ab\7\u0080\2\2\u04ab\u04ac\5\u0098M\2")
        buf.write("\u04ac\u00b3\3\2\2\2\u04ad\u04b2\5\u00b6\\\2\u04ae\u04af")
        buf.write("\7|\2\2\u04af\u04b1\5\u00b6\\\2\u04b0\u04ae\3\2\2\2\u04b1")
        buf.write("\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2")
        buf.write("\u04b3\u00b5\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b5\u04b8\5")
        buf.write("\u00b8]\2\u04b6\u04b7\7g\2\2\u04b7\u04b9\5^\60\2\u04b8")
        buf.write("\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u00b7\3\2\2\2")
        buf.write("\u04ba\u04bb\7\u0086\2\2\u04bb\u00b9\3\2\2\2\u04bc\u04bf")
        buf.write("\5\u00bc_\2\u04bd\u04bf\5\u00c0a\2\u04be\u04bc\3\2\2\2")
        buf.write("\u04be\u04bd\3\2\2\2\u04bf\u00bb\3\2\2\2\u04c0\u04c1\7")
        buf.write("\u0086\2\2\u04c1\u00bd\3\2\2\2\u04c2\u04c4\7.\2\2\u04c3")
        buf.write("\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2")
        buf.write("\u04c5\u04c8\7\62\2\2\u04c6\u04c9\7\u0086\2\2\u04c7\u04c9")
        buf.write("\5\u00bc_\2\u04c8\u04c6\3\2\2\2\u04c8\u04c7\3\2\2\2\u04c8")
        buf.write("\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\7[\2\2")
        buf.write("\u04cb\u04cd\5z>\2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2")
        buf.write("\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\7\\\2\2\u04cf\u00bf")
        buf.write("\3\2\2\2\u04d0\u04d1\7\u0086\2\2\u04d1\u00c1\3\2\2\2\u04d2")
        buf.write("\u04d3\7\62\2\2\u04d3\u04d4\7\u0086\2\2\u04d4\u04d5\7")
        buf.write("g\2\2\u04d5\u04d6\5\u00c4c\2\u04d6\u04d7\7\u0082\2\2\u04d7")
        buf.write("\u00c3\3\2\2\2\u04d8\u04da\5\f\7\2\u04d9\u04d8\3\2\2\2")
        buf.write("\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\5")
        buf.write("\u00ba^\2\u04dc\u00c5\3\2\2\2\u04dd\u04e3\7Q\2\2\u04de")
        buf.write("\u04e0\7N\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2")
        buf.write("\u04e0\u04e1\3\2\2\2\u04e1\u04e4\5\f\7\2\u04e2\u04e4\7")
        buf.write("\u0081\2\2\u04e3\u04df\3\2\2\2\u04e3\u04e2\3\2\2\2\u04e4")
        buf.write("\u04e5\3\2\2\2\u04e5\u04e6\5\b\5\2\u04e6\u04e7\7\u0082")
        buf.write("\2\2\u04e7\u00c7\3\2\2\2\u04e8\u04ea\5\u00ceh\2\u04e9")
        buf.write("\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2")
        buf.write("\u04eb\u04ec\7Q\2\2\u04ec\u04ee\7\62\2\2\u04ed\u04ef\5")
        buf.write("\f\7\2\u04ee\u04ed\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0")
        buf.write("\3\2\2\2\u04f0\u04f1\5\u00ba^\2\u04f1\u04f2\7\u0082\2")
        buf.write("\2\u04f2\u00c9\3\2\2\2\u04f3\u04f4\7\16\2\2\u04f4\u04f5")
        buf.write("\7W\2\2\u04f5\u04f6\7\6\2\2\u04f6\u04f7\7X\2\2\u04f7\u04f8")
        buf.write("\7\u0082\2\2\u04f8\u00cb\3\2\2\2\u04f9\u04fa\7&\2\2\u04fa")
        buf.write("\u0501\7\6\2\2\u04fb\u04fd\7[\2\2\u04fc\u04fe\5z>\2\u04fd")
        buf.write("\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u04ff\3\2\2\2")
        buf.write("\u04ff\u0502\7\\\2\2\u0500\u0502\5|?\2\u0501\u04fb\3\2")
        buf.write("\2\2\u0501\u0500\3\2\2\2\u0502\u00cd\3\2\2\2\u0503\u0505")
        buf.write("\5\u00d0i\2\u0504\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506")
        buf.write("\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u00cf\3\2\2\2")
        buf.write("\u0508\u0509\7Y\2\2\u0509\u050b\7Y\2\2\u050a\u050c\5\u00d4")
        buf.write("k\2\u050b\u050a\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050e\7Z\2\2\u050e\u0511\7Z\2\2\u050f\u0511")
        buf.write("\5\u00d2j\2\u0510\u0508\3\2\2\2\u0510\u050f\3\2\2\2\u0511")
        buf.write("\u00d1\3\2\2\2\u0512\u0513\7\f\2\2\u0513\u0516\7W\2\2")
        buf.write("\u0514\u0517\5\u00f8}\2\u0515\u0517\5^\60\2\u0516\u0514")
        buf.write("\3\2\2\2\u0516\u0515\3\2\2\2\u0517\u0519\3\2\2\2\u0518")
        buf.write("\u051a\7\u0085\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2")
        buf.write("\2\2\u051a\u051b\3\2\2\2\u051b\u051c\7X\2\2\u051c\u00d3")
        buf.write("\3\2\2\2\u051d\u0522\5\u00d6l\2\u051e\u051f\7|\2\2\u051f")
        buf.write("\u0521\5\u00d6l\2\u0520\u051e\3\2\2\2\u0521\u0524\3\2")
        buf.write("\2\2\u0522\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0526")
        buf.write("\3\2\2\2\u0524\u0522\3\2\2\2\u0525\u0527\7\u0085\2\2\u0526")
        buf.write("\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u00d5\3\2\2\2")
        buf.write("\u0528\u0529\5\u00d8m\2\u0529\u052a\7\u0081\2\2\u052a")
        buf.write("\u052c\3\2\2\2\u052b\u0528\3\2\2\2\u052b\u052c\3\2\2\2")
        buf.write("\u052c\u052d\3\2\2\2\u052d\u052f\7\u0086\2\2\u052e\u0530")
        buf.write("\5\u00dan\2\u052f\u052e\3\2\2\2\u052f\u0530\3\2\2\2\u0530")
        buf.write("\u00d7\3\2\2\2\u0531\u0532\7\u0086\2\2\u0532\u00d9\3\2")
        buf.write("\2\2\u0533\u0535\7W\2\2\u0534\u0536\5\u00dco\2\u0535\u0534")
        buf.write("\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\3\2\2\2\u0537")
        buf.write("\u0538\7X\2\2\u0538\u00db\3\2\2\2\u0539\u053b\5\u00de")
        buf.write("p\2\u053a\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u053a")
        buf.write("\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u00dd\3\2\2\2\u053e")
        buf.write("\u053f\7W\2\2\u053f\u0540\5\u00dco\2\u0540\u0541\7X\2")
        buf.write("\2\u0541\u0550\3\2\2\2\u0542\u0543\7Y\2\2\u0543\u0544")
        buf.write("\5\u00dco\2\u0544\u0545\7Z\2\2\u0545\u0550\3\2\2\2\u0546")
        buf.write("\u0547\7[\2\2\u0547\u0548\5\u00dco\2\u0548\u0549\7\\\2")
        buf.write("\2\u0549\u0550\3\2\2\2\u054a\u054c\n\22\2\2\u054b\u054a")
        buf.write("\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054b\3\2\2\2\u054d")
        buf.write("\u054e\3\2\2\2\u054e\u0550\3\2\2\2\u054f\u053e\3\2\2\2")
        buf.write("\u054f\u0542\3\2\2\2\u054f\u0546\3\2\2\2\u054f\u054b\3")
        buf.write("\2\2\2\u0550\u00df\3\2\2\2\u0551\u0556\5\u00e2r\2\u0552")
        buf.write("\u0553\7|\2\2\u0553\u0555\5\u00e2r\2\u0554\u0552\3\2\2")
        buf.write("\2\u0555\u0558\3\2\2\2\u0556\u0554\3\2\2\2\u0556\u0557")
        buf.write("\3\2\2\2\u0557\u00e1\3\2\2\2\u0558\u0556\3\2\2\2\u0559")
        buf.write("\u055b\5\u00e4s\2\u055a\u055c\5\u010e\u0088\2\u055b\u055a")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u00e3\3\2\2\2\u055d")
        buf.write("\u0563\5\u00e6t\2\u055e\u055f\5\u00e8u\2\u055f\u0560\5")
        buf.write("\u00eav\2\u0560\u0561\5\u00ecw\2\u0561\u0563\3\2\2\2\u0562")
        buf.write("\u055d\3\2\2\2\u0562\u055e\3\2\2\2\u0563\u00e5\3\2\2\2")
        buf.write("\u0564\u0566\5\u00eex\2\u0565\u0567\7\30\2\2\u0566\u0565")
        buf.write("\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0569\3\2\2\2\u0568")
        buf.write("\u0564\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2")
        buf.write("\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c\u056a\3")
        buf.write("\2\2\2\u056d\u056e\5\u00e8u\2\u056e\u00e7\3\2\2\2\u056f")
        buf.write("\u0570\bu\1\2\u0570\u0572\5\u00f6|\2\u0571\u0573\5\u00ce")
        buf.write("h\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0579")
        buf.write("\3\2\2\2\u0574\u0575\7W\2\2\u0575\u0576\5\u00e6t\2\u0576")
        buf.write("\u0577\7X\2\2\u0577\u0579\3\2\2\2\u0578\u056f\3\2\2\2")
        buf.write("\u0578\u0574\3\2\2\2\u0579\u0588\3\2\2\2\u057a\u0584\f")
        buf.write("\4\2\2\u057b\u0585\5\u00eav\2\u057c\u057e\7Y\2\2\u057d")
        buf.write("\u057f\5^\60\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2")
        buf.write("\u057f\u0580\3\2\2\2\u0580\u0582\7Z\2\2\u0581\u0583\5")
        buf.write("\u00ceh\2\u0582\u0581\3\2\2\2\u0582\u0583\3\2\2\2\u0583")
        buf.write("\u0585\3\2\2\2\u0584\u057b\3\2\2\2\u0584\u057c\3\2\2\2")
        buf.write("\u0585\u0587\3\2\2\2\u0586\u057a\3\2\2\2\u0587\u058a\3")
        buf.write("\2\2\2\u0588\u0586\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u00e9")
        buf.write("\3\2\2\2\u058a\u0588\3\2\2\2\u058b\u058d\7W\2\2\u058c")
        buf.write("\u058e\5\u0104\u0083\2\u058d\u058c\3\2\2\2\u058d\u058e")
        buf.write("\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0591\7X\2\2\u0590")
        buf.write("\u0592\5\u00f0y\2\u0591\u0590\3\2\2\2\u0591\u0592\3\2")
        buf.write("\2\2\u0592\u0594\3\2\2\2\u0593\u0595\5\u00f4{\2\u0594")
        buf.write("\u0593\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0597\3\2\2\2")
        buf.write("\u0596\u0598\5\u0174\u00bb\2\u0597\u0596\3\2\2\2\u0597")
        buf.write("\u0598\3\2\2\2\u0598\u059a\3\2\2\2\u0599\u059b\5\u00ce")
        buf.write("h\2\u059a\u0599\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u00eb")
        buf.write("\3\2\2\2\u059c\u059d\7~\2\2\u059d\u059f\5\u009aN\2\u059e")
        buf.write("\u05a0\5\u00fa~\2\u059f\u059e\3\2\2\2\u059f\u05a0\3\2")
        buf.write("\2\2\u05a0\u00ed\3\2\2\2\u05a1\u05a3\t\23\2\2\u05a2\u05a4")
        buf.write("\5\u00ceh\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4")
        buf.write("\u05b0\3\2\2\2\u05a5\u05a7\5\f\7\2\u05a6\u05a5\3\2\2\2")
        buf.write("\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05aa\7")
        buf.write("_\2\2\u05a9\u05ab\5\u00ceh\2\u05aa\u05a9\3\2\2\2\u05aa")
        buf.write("\u05ab\3\2\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05ae\5\u00f0")
        buf.write("y\2\u05ad\u05ac\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b0")
        buf.write("\3\2\2\2\u05af\u05a1\3\2\2\2\u05af\u05a6\3\2\2\2\u05b0")
        buf.write("\u00ef\3\2\2\2\u05b1\u05b3\5\u00f2z\2\u05b2\u05b1\3\2")
        buf.write("\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5")
        buf.write("\3\2\2\2\u05b5\u00f1\3\2\2\2\u05b6\u05b7\t\24\2\2\u05b7")
        buf.write("\u00f3\3\2\2\2\u05b8\u05b9\t\23\2\2\u05b9\u00f5\3\2\2")
        buf.write("\2\u05ba\u05bc\7\u0085\2\2\u05bb\u05ba\3\2\2\2\u05bb\u05bc")
        buf.write("\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\5\6\4\2\u05be")
        buf.write("\u00f7\3\2\2\2\u05bf\u05c1\5\u0098M\2\u05c0\u05c2\5\u00fa")
        buf.write("~\2\u05c1\u05c0\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u00f9")
        buf.write("\3\2\2\2\u05c3\u05cc\5\u00fc\177\2\u05c4\u05c6\5\u00fe")
        buf.write("\u0080\2\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6")
        buf.write("\u05c7\3\2\2\2\u05c7\u05c8\5\u00eav\2\u05c8\u05c9\5\u00ec")
        buf.write("w\2\u05c9\u05cc\3\2\2\2\u05ca\u05cc\5\u0100\u0081\2\u05cb")
        buf.write("\u05c3\3\2\2\2\u05cb\u05c5\3\2\2\2\u05cb\u05ca\3\2\2\2")
        buf.write("\u05cc\u00fb\3\2\2\2\u05cd\u05cf\5\u00eex\2\u05ce\u05cd")
        buf.write("\3\2\2\2\u05cf\u05d2\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d0")
        buf.write("\u05d1\3\2\2\2\u05d1\u05d5\3\2\2\2\u05d2\u05d0\3\2\2\2")
        buf.write("\u05d3\u05d6\5\u00fe\u0080\2\u05d4\u05d6\5\u00eex\2\u05d5")
        buf.write("\u05d3\3\2\2\2\u05d5\u05d4\3\2\2\2\u05d6\u00fd\3\2\2\2")
        buf.write("\u05d7\u05dd\5\u00eav\2\u05d8\u05d9\7W\2\2\u05d9\u05da")
        buf.write("\5\u00fc\177\2\u05da\u05db\7X\2\2\u05db\u05dd\3\2\2\2")
        buf.write("\u05dc\u05d7\3\2\2\2\u05dc\u05d8\3\2\2\2\u05dd\u05e9\3")
        buf.write("\2\2\2\u05de\u05e8\5\u00eav\2\u05df\u05e1\7Y\2\2\u05e0")
        buf.write("\u05e2\5^\60\2\u05e1\u05e0\3\2\2\2\u05e1\u05e2\3\2\2\2")
        buf.write("\u05e2\u05e3\3\2\2\2\u05e3\u05e5\7Z\2\2\u05e4\u05e6\5")
        buf.write("\u00ceh\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6")
        buf.write("\u05e8\3\2\2\2\u05e7\u05de\3\2\2\2\u05e7\u05df\3\2\2\2")
        buf.write("\u05e8\u05eb\3\2\2\2\u05e9\u05e7\3\2\2\2\u05e9\u05ea\3")
        buf.write("\2\2\2\u05ea\u00ff\3\2\2\2\u05eb\u05e9\3\2\2\2\u05ec\u05ee")
        buf.write("\5\u00eex\2\u05ed\u05ec\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef")
        buf.write("\u05ed\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2")
        buf.write("\u05f1\u05ef\3\2\2\2\u05f2\u05f3\5\u0102\u0082\2\u05f3")
        buf.write("\u0101\3\2\2\2\u05f4\u0600\7\u0085\2\2\u05f5\u05ff\5\u00ea")
        buf.write("v\2\u05f6\u05f8\7Y\2\2\u05f7\u05f9\5^\60\2\u05f8\u05f7")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa")
        buf.write("\u05fc\7Z\2\2\u05fb\u05fd\5\u00ceh\2\u05fc\u05fb\3\2\2")
        buf.write("\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\3\2\2\2\u05fe\u05f5")
        buf.write("\3\2\2\2\u05fe\u05f6\3\2\2\2\u05ff\u0602\3\2\2\2\u0600")
        buf.write("\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0103\3\2\2\2")
        buf.write("\u0602\u0600\3\2\2\2\u0603\u0608\5\u0106\u0084\2\u0604")
        buf.write("\u0606\7|\2\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2")
        buf.write("\u0606\u0607\3\2\2\2\u0607\u0609\7\u0085\2\2\u0608\u0605")
        buf.write("\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u0105\3\2\2\2\u060a")
        buf.write("\u060f\5\u0108\u0085\2\u060b\u060c\7|\2\2\u060c\u060e")
        buf.write("\5\u0108\u0085\2\u060d\u060b\3\2\2\2\u060e\u0611\3\2\2")
        buf.write("\2\u060f\u060d\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0107")
        buf.write("\3\2\2\2\u0611\u060f\3\2\2\2\u0612\u0614\5\u00ceh\2\u0613")
        buf.write("\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2\2")
        buf.write("\u0615\u061a\5\u008cG\2\u0616\u061b\5\u00e4s\2\u0617\u0619")
        buf.write("\5\u00fa~\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619")
        buf.write("\u061b\3\2\2\2\u061a\u0616\3\2\2\2\u061a\u0618\3\2\2\2")
        buf.write("\u061b\u061e\3\2\2\2\u061c\u061d\7g\2\2\u061d\u061f\5")
        buf.write("\u0112\u008a\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2")
        buf.write("\u061f\u0109\3\2\2\2\u0620\u0622\5\u00ceh\2\u0621\u0620")
        buf.write("\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623")
        buf.write("\u0625\5\u008cG\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2")
        buf.write("\2\2\u0625\u0626\3\2\2\2\u0626\u0628\5\u00e4s\2\u0627")
        buf.write("\u0629\5\u012c\u0097\2\u0628\u0627\3\2\2\2\u0628\u0629")
        buf.write("\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b\5\u010c\u0087")
        buf.write("\2\u062b\u010b\3\2\2\2\u062c\u062e\5\u0144\u00a3\2\u062d")
        buf.write("\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f\3\2\2\2")
        buf.write("\u062f\u0635\5f\64\2\u0630\u0635\5\u016a\u00b6\2\u0631")
        buf.write("\u0632\7g\2\2\u0632\u0633\t\25\2\2\u0633\u0635\7\u0082")
        buf.write("\2\2\u0634\u062d\3\2\2\2\u0634\u0630\3\2\2\2\u0634\u0631")
        buf.write("\3\2\2\2\u0635\u010d\3\2\2\2\u0636\u063c\5\u0110\u0089")
        buf.write("\2\u0637\u0638\7W\2\2\u0638\u0639\5$\23\2\u0639\u063a")
        buf.write("\7X\2\2\u063a\u063c\3\2\2\2\u063b\u0636\3\2\2\2\u063b")
        buf.write("\u0637\3\2\2\2\u063c\u010f\3\2\2\2\u063d\u063e\7g\2\2")
        buf.write("\u063e\u0641\5\u0112\u008a\2\u063f\u0641\5\u0116\u008c")
        buf.write("\2\u0640\u063d\3\2\2\2\u0640\u063f\3\2\2\2\u0641\u0111")
        buf.write("\3\2\2\2\u0642\u0645\5X-\2\u0643\u0645\5\u0116\u008c\2")
        buf.write("\u0644\u0642\3\2\2\2\u0644\u0643\3\2\2\2\u0645\u0113\3")
        buf.write("\2\2\2\u0646\u0648\5\u0112\u008a\2\u0647\u0649\7\u0085")
        buf.write("\2\2\u0648\u0647\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u0651")
        buf.write("\3\2\2\2\u064a\u064b\7|\2\2\u064b\u064d\5\u0112\u008a")
        buf.write("\2\u064c\u064e\7\u0085\2\2\u064d\u064c\3\2\2\2\u064d\u064e")
        buf.write("\3\2\2\2\u064e\u0650\3\2\2\2\u064f\u064a\3\2\2\2\u0650")
        buf.write("\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651\u0652\3\2\2\2")
        buf.write("\u0652\u0115\3\2\2\2\u0653\u0651\3\2\2\2\u0654\u0659\7")
        buf.write("[\2\2\u0655\u0657\5\u0114\u008b\2\u0656\u0658\7|\2\2\u0657")
        buf.write("\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\3\2\2\2")
        buf.write("\u0659\u0655\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3")
        buf.write("\2\2\2\u065b\u065c\7\\\2\2\u065c\u0117\3\2\2\2\u065d\u0660")
        buf.write("\7\u0086\2\2\u065e\u0660\5\u0158\u00ad\2\u065f\u065d\3")
        buf.write("\2\2\2\u065f\u065e\3\2\2\2\u0660\u0119\3\2\2\2\u0661\u0662")
        buf.write("\5\u011c\u008f\2\u0662\u0664\7[\2\2\u0663\u0665\5\u0124")
        buf.write("\u0093\2\u0664\u0663\3\2\2\2\u0664\u0665\3\2\2\2\u0665")
        buf.write("\u0666\3\2\2\2\u0666\u0667\7\\\2\2\u0667\u011b\3\2\2\2")
        buf.write("\u0668\u066a\5\u0122\u0092\2\u0669\u066b\5\u00ceh\2\u066a")
        buf.write("\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u0670\3\2\2\2")
        buf.write("\u066c\u066e\5\u011e\u0090\2\u066d\u066f\5\u0120\u0091")
        buf.write("\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671")
        buf.write("\3\2\2\2\u0670\u066c\3\2\2\2\u0670\u0671\3\2\2\2\u0671")
        buf.write("\u0673\3\2\2\2\u0672\u0674\5\u0132\u009a\2\u0673\u0672")
        buf.write("\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0680\3\2\2\2\u0675")
        buf.write("\u0677\7O\2\2\u0676\u0678\5\u00ceh\2\u0677\u0676\3\2\2")
        buf.write("\2\u0677\u0678\3\2\2\2\u0678\u067d\3\2\2\2\u0679\u067b")
        buf.write("\5\u011e\u0090\2\u067a\u067c\5\u0120\u0091\2\u067b\u067a")
        buf.write("\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067e\3\2\2\2\u067d")
        buf.write("\u0679\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0680\3\2\2\2")
        buf.write("\u067f\u0668\3\2\2\2\u067f\u0675\3\2\2\2\u0680\u011d\3")
        buf.write("\2\2\2\u0681\u0683\5\f\7\2\u0682\u0681\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u0685\5\u0118\u008d")
        buf.write("\2\u0685\u011f\3\2\2\2\u0686\u0687\7(\2\2\u0687\u0121")
        buf.write("\3\2\2\2\u0688\u0689\t\21\2\2\u0689\u0123\3\2\2\2\u068a")
        buf.write("\u068f\5\u0126\u0094\2\u068b\u068c\5\u013c\u009f\2\u068c")
        buf.write("\u068d\7\u0080\2\2\u068d\u068f\3\2\2\2\u068e\u068a\3\2")
        buf.write("\2\2\u068e\u068b\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u068e")
        buf.write("\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0125\3\2\2\2\u0692")
        buf.write("\u0694\5\u00ceh\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2")
        buf.write("\2\2\u0694\u0696\3\2\2\2\u0695\u0697\5\u008cG\2\u0696")
        buf.write("\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0699\3\2\2\2")
        buf.write("\u0698\u069a\5\u0128\u0095\2\u0699\u0698\3\2\2\2\u0699")
        buf.write("\u069a\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u06a3\7\u0082")
        buf.write("\2\2\u069c\u06a3\5\u010a\u0086\2\u069d\u06a3\5\u00c6d")
        buf.write("\2\u069e\u06a3\5\u0084C\2\u069f\u06a3\5\u0150\u00a9\2")
        buf.write("\u06a0\u06a3\5\u0080A\2\u06a1\u06a3\5\u0086D\2\u06a2\u0693")
        buf.write("\3\2\2\2\u06a2\u069c\3\2\2\2\u06a2\u069d\3\2\2\2\u06a2")
        buf.write("\u069e\3\2\2\2\u06a2\u069f\3\2\2\2\u06a2\u06a0\3\2\2\2")
        buf.write("\u06a2\u06a1\3\2\2\2\u06a3\u0127\3\2\2\2\u06a4\u06a9\5")
        buf.write("\u012a\u0096\2\u06a5\u06a6\7|\2\2\u06a6\u06a8\5\u012a")
        buf.write("\u0096\2\u06a7\u06a5\3\2\2\2\u06a8\u06ab\3\2\2\2\u06a9")
        buf.write("\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u0129\3\2\2\2")
        buf.write("\u06ab\u06a9\3\2\2\2\u06ac\u06b5\5\u00e4s\2\u06ad\u06b6")
        buf.write("\5\u012c\u0097\2\u06ae\u06af\6\u0096\t\2\u06af\u06b6\5")
        buf.write("\u0130\u0099\2\u06b0\u06b1\6\u0096\n\2\u06b1\u06b2\5\u012c")
        buf.write("\u0097\2\u06b2\u06b3\5\u0130\u0099\2\u06b3\u06b6\3\2\2")
        buf.write("\2\u06b4\u06b6\5\u0110\u0089\2\u06b5\u06ad\3\2\2\2\u06b5")
        buf.write("\u06ae\3\2\2\2\u06b5\u06b0\3\2\2\2\u06b5\u06b4\3\2\2\2")
        buf.write("\u06b6\u06c1\3\2\2\2\u06b7\u06c1\5\u00e4s\2\u06b8\u06ba")
        buf.write("\7\u0086\2\2\u06b9\u06b8\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba")
        buf.write("\u06bc\3\2\2\2\u06bb\u06bd\5\u00ceh\2\u06bc\u06bb\3\2")
        buf.write("\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06bf")
        buf.write("\7\u0080\2\2\u06bf\u06c1\5^\60\2\u06c0\u06ac\3\2\2\2\u06c0")
        buf.write("\u06b7\3\2\2\2\u06c0\u06b9\3\2\2\2\u06c1\u012b\3\2\2\2")
        buf.write("\u06c2\u06c4\5\u012e\u0098\2\u06c3\u06c2\3\2\2\2\u06c4")
        buf.write("\u06c5\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u012d\3\2\2\2\u06c7\u06c8\t\26\2\2\u06c8\u012f")
        buf.write("\3\2\2\2\u06c9\u06ca\7g\2\2\u06ca\u06cb\7\3\2\2\u06cb")
        buf.write("\u0131\3\2\2\2\u06cc\u06cd\7\u0080\2\2\u06cd\u06ce\5\u0134")
        buf.write("\u009b\2\u06ce\u0133\3\2\2\2\u06cf\u06d1\5\u0136\u009c")
        buf.write("\2\u06d0\u06d2\7\u0085\2\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2")
        buf.write("\3\2\2\2\u06d2\u06da\3\2\2\2\u06d3\u06d4\7|\2\2\u06d4")
        buf.write("\u06d6\5\u0136\u009c\2\u06d5\u06d7\7\u0085\2\2\u06d6\u06d5")
        buf.write("\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d9\3\2\2\2\u06d8")
        buf.write("\u06d3\3\2\2\2\u06d9\u06dc\3\2\2\2\u06da\u06d8\3\2\2\2")
        buf.write("\u06da\u06db\3\2\2\2\u06db\u0135\3\2\2\2\u06dc\u06da\3")
        buf.write("\2\2\2\u06dd\u06df\5\u00ceh\2\u06de\u06dd\3\2\2\2\u06de")
        buf.write("\u06df\3\2\2\2\u06df\u06ec\3\2\2\2\u06e0\u06ed\5\u013a")
        buf.write("\u009e\2\u06e1\u06e3\7R\2\2\u06e2\u06e4\5\u013c\u009f")
        buf.write("\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5")
        buf.write("\3\2\2\2\u06e5\u06ed\5\u013a\u009e\2\u06e6\u06e8\5\u013c")
        buf.write("\u009f\2\u06e7\u06e9\7R\2\2\u06e8\u06e7\3\2\2\2\u06e8")
        buf.write("\u06e9\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb\5\u013a")
        buf.write("\u009e\2\u06eb\u06ed\3\2\2\2\u06ec\u06e0\3\2\2\2\u06ec")
        buf.write("\u06e1\3\2\2\2\u06ec\u06e6\3\2\2\2\u06ed\u0137\3\2\2\2")
        buf.write("\u06ee\u06f0\5\f\7\2\u06ef\u06ee\3\2\2\2\u06ef\u06f0\3")
        buf.write("\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f4\5\u0118\u008d\2")
        buf.write("\u06f2\u06f4\5\u00a4S\2\u06f3\u06ef\3\2\2\2\u06f3\u06f2")
        buf.write("\3\2\2\2\u06f4\u0139\3\2\2\2\u06f5\u06f6\5\u0138\u009d")
        buf.write("\2\u06f6\u013b\3\2\2\2\u06f7\u06f8\t\27\2\2\u06f8\u013d")
        buf.write("\3\2\2\2\u06f9\u06fa\7\66\2\2\u06fa\u06fb\5\u0140\u00a1")
        buf.write("\2\u06fb\u013f\3\2\2\2\u06fc\u06fe\5\u0098M\2\u06fd\u06ff")
        buf.write("\5\u0142\u00a2\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff\3\2\2")
        buf.write("\2\u06ff\u0141\3\2\2\2\u0700\u0702\5\u00eex\2\u0701\u0703")
        buf.write("\5\u0142\u00a2\2\u0702\u0701\3\2\2\2\u0702\u0703\3\2\2")
        buf.write("\2\u0703\u0143\3\2\2\2\u0704\u0705\7\u0080\2\2\u0705\u0706")
        buf.write("\5\u0146\u00a4\2\u0706\u0145\3\2\2\2\u0707\u0709\5\u0148")
        buf.write("\u00a5\2\u0708\u070a\7\u0085\2\2\u0709\u0708\3\2\2\2\u0709")
        buf.write("\u070a\3\2\2\2\u070a\u0712\3\2\2\2\u070b\u070c\7|\2\2")
        buf.write("\u070c\u070e\5\u0148\u00a5\2\u070d\u070f\7\u0085\2\2\u070e")
        buf.write("\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0711\3\2\2\2")
        buf.write("\u0710\u070b\3\2\2\2\u0711\u0714\3\2\2\2\u0712\u0710\3")
        buf.write("\2\2\2\u0712\u0713\3\2\2\2\u0713\u0147\3\2\2\2\u0714\u0712")
        buf.write("\3\2\2\2\u0715\u071c\5\u014a\u00a6\2\u0716\u0718\7W\2")
        buf.write("\2\u0717\u0719\5$\23\2\u0718\u0717\3\2\2\2\u0718\u0719")
        buf.write("\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071d\7X\2\2\u071b")
        buf.write("\u071d\5\u0116\u008c\2\u071c\u0716\3\2\2\2\u071c\u071b")
        buf.write("\3\2\2\2\u071d\u0149\3\2\2\2\u071e\u0721\5\u0138\u009d")
        buf.write("\2\u071f\u0721\7\u0086\2\2\u0720\u071e\3\2\2\2\u0720\u071f")
        buf.write("\3\2\2\2\u0721\u014b\3\2\2\2\u0722\u0723\7\66\2\2\u0723")
        buf.write("\u0724\5\u017c\u00bf\2\u0724\u014d\3\2\2\2\u0725\u0729")
        buf.write("\7\66\2\2\u0726\u0727\7\6\2\2\u0727\u072a\7\u0086\2\2")
        buf.write("\u0728\u072a\7\u008e\2\2\u0729\u0726\3\2\2\2\u0729\u0728")
        buf.write("\3\2\2\2\u072a\u014f\3\2\2\2\u072b\u072c\7F\2\2\u072c")
        buf.write("\u072d\7h\2\2\u072d\u072e\5\u0152\u00aa\2\u072e\u072f")
        buf.write("\7i\2\2\u072f\u0730\5|?\2\u0730\u0151\3\2\2\2\u0731\u0736")
        buf.write("\5\u0154\u00ab\2\u0732\u0733\7|\2\2\u0733\u0735\5\u0154")
        buf.write("\u00ab\2\u0734\u0732\3\2\2\2\u0735\u0738\3\2\2\2\u0736")
        buf.write("\u0734\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0153\3\2\2\2")
        buf.write("\u0738\u0736\3\2\2\2\u0739\u073c\5\u0156\u00ac\2\u073a")
        buf.write("\u073c\5\u0108\u0085\2\u073b\u0739\3\2\2\2\u073b\u073a")
        buf.write("\3\2\2\2\u073c\u0155\3\2\2\2\u073d\u073e\7F\2\2\u073e")
        buf.write("\u073f\7h\2\2\u073f\u0740\5\u0152\u00aa\2\u0740\u0741")
        buf.write("\7i\2\2\u0741\u0743\3\2\2\2\u0742\u073d\3\2\2\2\u0742")
        buf.write("\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0747\7\27\2")
        buf.write("\2\u0745\u0747\7N\2\2\u0746\u0742\3\2\2\2\u0746\u0745")
        buf.write("\3\2\2\2\u0747\u0753\3\2\2\2\u0748\u074a\7\u0085\2\2\u0749")
        buf.write("\u0748\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074c\3\2\2\2")
        buf.write("\u074b\u074d\7\u0086\2\2\u074c\u074b\3\2\2\2\u074c\u074d")
        buf.write("\3\2\2\2\u074d\u0754\3\2\2\2\u074e\u0750\7\u0086\2\2\u074f")
        buf.write("\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2")
        buf.write("\u0751\u0752\7g\2\2\u0752\u0754\5\u00f8}\2\u0753\u0749")
        buf.write("\3\2\2\2\u0753\u074f\3\2\2\2\u0754\u0157\3\2\2\2\u0755")
        buf.write("\u0756\5\u015c\u00af\2\u0756\u0758\7h\2\2\u0757\u0759")
        buf.write("\5\u015e\u00b0\2\u0758\u0757\3\2\2\2\u0758\u0759\3\2\2")
        buf.write("\2\u0759\u075a\3\2\2\2\u075a\u075b\7i\2\2\u075b\u0159")
        buf.write("\3\2\2\2\u075c\u0768\5\u0158\u00ad\2\u075d\u0760\5\u014c")
        buf.write("\u00a7\2\u075e\u0760\5\u014e\u00a8\2\u075f\u075d\3\2\2")
        buf.write("\2\u075f\u075e\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0763")
        buf.write("\7h\2\2\u0762\u0764\5\u015e\u00b0\2\u0763\u0762\3\2\2")
        buf.write("\2\u0763\u0764\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766")
        buf.write("\7i\2\2\u0766\u0768\3\2\2\2\u0767\u075c\3\2\2\2\u0767")
        buf.write("\u075f\3\2\2\2\u0768\u015b\3\2\2\2\u0769\u076a\7\u0086")
        buf.write("\2\2\u076a\u015d\3\2\2\2\u076b\u076d\5\u0160\u00b1\2\u076c")
        buf.write("\u076e\7\u0085\2\2\u076d\u076c\3\2\2\2\u076d\u076e\3\2")
        buf.write("\2\2\u076e\u0776\3\2\2\2\u076f\u0770\7|\2\2\u0770\u0772")
        buf.write("\5\u0160\u00b1\2\u0771\u0773\7\u0085\2\2\u0772\u0771\3")
        buf.write("\2\2\2\u0772\u0773\3\2\2\2\u0773\u0775\3\2\2\2\u0774\u076f")
        buf.write("\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0776")
        buf.write("\u0777\3\2\2\2\u0777\u015f\3\2\2\2\u0778\u0776\3\2\2\2")
        buf.write("\u0779\u077d\5\u00f8}\2\u077a\u077d\5^\60\2\u077b\u077d")
        buf.write("\5\6\4\2\u077c\u0779\3\2\2\2\u077c\u077a\3\2\2\2\u077c")
        buf.write("\u077b\3\2\2\2\u077d\u0161\3\2\2\2\u077e\u077f\7N\2\2")
        buf.write("\u077f\u0785\5\f\7\2\u0780\u0786\7\u0086\2\2\u0781\u0783")
        buf.write("\7F\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2\2\2\u0783")
        buf.write("\u0784\3\2\2\2\u0784\u0786\5\u0158\u00ad\2\u0785\u0780")
        buf.write("\3\2\2\2\u0785\u0782\3\2\2\2\u0786\u0163\3\2\2\2\u0787")
        buf.write("\u0789\7&\2\2\u0788\u0787\3\2\2\2\u0788\u0789\3\2\2\2")
        buf.write("\u0789\u078a\3\2\2\2\u078a\u078b\7F\2\2\u078b\u078c\5")
        buf.write("|?\2\u078c\u0165\3\2\2\2\u078d\u078e\7F\2\2\u078e\u078f")
        buf.write("\7h\2\2\u078f\u0790\7i\2\2\u0790\u0791\5|?\2\u0791\u0167")
        buf.write("\3\2\2\2\u0792\u0793\7K\2\2\u0793\u0794\5f\64\2\u0794")
        buf.write("\u0795\5\u016c\u00b7\2\u0795\u0169\3\2\2\2\u0796\u0798")
        buf.write("\7K\2\2\u0797\u0799\5\u0144\u00a3\2\u0798\u0797\3\2\2")
        buf.write("\2\u0798\u0799\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b")
        buf.write("\5f\64\2\u079b\u079c\5\u016c\u00b7\2\u079c\u016b\3\2\2")
        buf.write("\2\u079d\u079f\5\u016e\u00b8\2\u079e\u079d\3\2\2\2\u079f")
        buf.write("\u07a0\3\2\2\2\u07a0\u079e\3\2\2\2\u07a0\u07a1\3\2\2\2")
        buf.write("\u07a1\u016d\3\2\2\2\u07a2\u07a3\7\23\2\2\u07a3\u07a4")
        buf.write("\7W\2\2\u07a4\u07a5\5\u0170\u00b9\2\u07a5\u07a6\7X\2\2")
        buf.write("\u07a6\u07a7\5f\64\2\u07a7\u016f\3\2\2\2\u07a8\u07aa\5")
        buf.write("\u00ceh\2\u07a9\u07a8\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa")
        buf.write("\u07ab\3\2\2\2\u07ab\u07ae\5\u0098M\2\u07ac\u07af\5\u00e4")
        buf.write("s\2\u07ad\u07af\5\u00fa~\2\u07ae\u07ac\3\2\2\2\u07ae\u07ad")
        buf.write("\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b2\3\2\2\2\u07b0")
        buf.write("\u07b2\7\u0085\2\2\u07b1\u07a9\3\2\2\2\u07b1\u07b0\3\2")
        buf.write("\2\2\u07b2\u0171\3\2\2\2\u07b3\u07b5\7I\2\2\u07b4\u07b6")
        buf.write("\5X-\2\u07b5\u07b4\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u0173")
        buf.write("\3\2\2\2\u07b7\u07ba\5\u0176\u00bc\2\u07b8\u07ba\5\u017a")
        buf.write("\u00be\2\u07b9\u07b7\3\2\2\2\u07b9\u07b8\3\2\2\2\u07ba")
        buf.write("\u0175\3\2\2\2\u07bb\u07bc\7I\2\2\u07bc\u07be\7W\2\2\u07bd")
        buf.write("\u07bf\5\u0178\u00bd\2\u07be\u07bd\3\2\2\2\u07be\u07bf")
        buf.write("\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\7X\2\2\u07c1")
        buf.write("\u0177\3\2\2\2\u07c2\u07c4\5\u00f8}\2\u07c3\u07c5\7\u0085")
        buf.write("\2\2\u07c4\u07c3\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07cd")
        buf.write("\3\2\2\2\u07c6\u07c7\7|\2\2\u07c7\u07c9\5\u00f8}\2\u07c8")
        buf.write("\u07ca\7\u0085\2\2\u07c9\u07c8\3\2\2\2\u07c9\u07ca\3\2")
        buf.write("\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c6\3\2\2\2\u07cc\u07cf")
        buf.write("\3\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce")
        buf.write("\u0179\3\2\2\2\u07cf\u07cd\3\2\2\2\u07d0\u07d1\7\64\2")
        buf.write("\2\u07d1\u07d2\7W\2\2\u07d2\u07d3\5^\60\2\u07d3\u07d4")
        buf.write("\7X\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d7\7\64\2\2\u07d6")
        buf.write("\u07d0\3\2\2\2\u07d6\u07d5\3\2\2\2\u07d7\u017b\3\2\2\2")
        buf.write("\u07d8\u07db\7\63\2\2\u07d9\u07da\7Y\2\2\u07da\u07dc\7")
        buf.write("Z\2\2\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u080c")
        buf.write("\3\2\2\2\u07dd\u07e0\7\36\2\2\u07de\u07df\7Y\2\2\u07df")
        buf.write("\u07e1\7Z\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2")
        buf.write("\u07e1\u080c\3\2\2\2\u07e2\u080c\7]\2\2\u07e3\u080c\7")
        buf.write("^\2\2\u07e4\u080c\7_\2\2\u07e5\u080c\7`\2\2\u07e6\u080c")
        buf.write("\7a\2\2\u07e7\u080c\7b\2\2\u07e8\u080c\7c\2\2\u07e9\u080c")
        buf.write("\7d\2\2\u07ea\u080c\7e\2\2\u07eb\u080c\7f\2\2\u07ec\u080c")
        buf.write("\7g\2\2\u07ed\u080c\7i\2\2\u07ee\u080c\7h\2\2\u07ef\u080c")
        buf.write("\7w\2\2\u07f0\u080c\7j\2\2\u07f1\u080c\7k\2\2\u07f2\u080c")
        buf.write("\7l\2\2\u07f3\u080c\7n\2\2\u07f4\u080c\7o\2\2\u07f5\u080c")
        buf.write("\7p\2\2\u07f6\u080c\7q\2\2\u07f7\u07f8\7h\2\2\u07f8\u080c")
        buf.write("\7h\2\2\u07f9\u07fa\7i\2\2\u07fa\u080c\7i\2\2\u07fb\u080c")
        buf.write("\7s\2\2\u07fc\u080c\7r\2\2\u07fd\u080c\7t\2\2\u07fe\u080c")
        buf.write("\7u\2\2\u07ff\u080c\7v\2\2\u0800\u080c\7x\2\2\u0801\u080c")
        buf.write("\7y\2\2\u0802\u080c\7z\2\2\u0803\u080c\7{\2\2\u0804\u080c")
        buf.write("\7|\2\2\u0805\u080c\7}\2\2\u0806\u080c\7~\2\2\u0807\u0808")
        buf.write("\7W\2\2\u0808\u080c\7X\2\2\u0809\u080a\7Y\2\2\u080a\u080c")
        buf.write("\7Z\2\2\u080b\u07d8\3\2\2\2\u080b\u07dd\3\2\2\2\u080b")
        buf.write("\u07e2\3\2\2\2\u080b\u07e3\3\2\2\2\u080b\u07e4\3\2\2\2")
        buf.write("\u080b\u07e5\3\2\2\2\u080b\u07e6\3\2\2\2\u080b\u07e7\3")
        buf.write("\2\2\2\u080b\u07e8\3\2\2\2\u080b\u07e9\3\2\2\2\u080b\u07ea")
        buf.write("\3\2\2\2\u080b\u07eb\3\2\2\2\u080b\u07ec\3\2\2\2\u080b")
        buf.write("\u07ed\3\2\2\2\u080b\u07ee\3\2\2\2\u080b\u07ef\3\2\2\2")
        buf.write("\u080b\u07f0\3\2\2\2\u080b\u07f1\3\2\2\2\u080b\u07f2\3")
        buf.write("\2\2\2\u080b\u07f3\3\2\2\2\u080b\u07f4\3\2\2\2\u080b\u07f5")
        buf.write("\3\2\2\2\u080b\u07f6\3\2\2\2\u080b\u07f7\3\2\2\2\u080b")
        buf.write("\u07f9\3\2\2\2\u080b\u07fb\3\2\2\2\u080b\u07fc\3\2\2\2")
        buf.write("\u080b\u07fd\3\2\2\2\u080b\u07fe\3\2\2\2\u080b\u07ff\3")
        buf.write("\2\2\2\u080b\u0800\3\2\2\2\u080b\u0801\3\2\2\2\u080b\u0802")
        buf.write("\3\2\2\2\u080b\u0803\3\2\2\2\u080b\u0804\3\2\2\2\u080b")
        buf.write("\u0805\3\2\2\2\u080b\u0806\3\2\2\2\u080b\u0807\3\2\2\2")
        buf.write("\u080b\u0809\3\2\2\2\u080c\u017d\3\2\2\2\u080d\u080e\t")
        buf.write("\30\2\2\u080e\u017f\3\2\2\2\u0125\u0181\u0188\u0191\u0195")
        buf.write("\u019e\u01a1\u01a5\u01ad\u01b4\u01b7\u01bc\u01c1\u01c7")
        buf.write("\u01cf\u01d1\u01da\u01de\u01e2\u01e5\u01e9\u01ec\u01f3")
        buf.write("\u01f7\u01fa\u01fd\u0200\u0206\u020a\u020e\u021c\u0220")
        buf.write("\u0226\u022d\u0233\u0237\u023b\u023d\u0245\u024a\u0257")
        buf.write("\u025e\u026a\u0274\u0279\u027d\u0284\u0287\u028f\u0293")
        buf.write("\u0296\u029d\u02a4\u02a8\u02ad\u02b1\u02b4\u02b9\u02c8")
        buf.write("\u02cf\u02d7\u02df\u02e8\u02ef\u02f6\u02fe\u0306\u030e")
        buf.write("\u0316\u031e\u0326\u032f\u0337\u0340\u0348\u0350\u0352")
        buf.write("\u0355\u035b\u0361\u0367\u036e\u0377\u037f\u0383\u038a")
        buf.write("\u038c\u03a0\u03a4\u03aa\u03af\u03b3\u03b6\u03bd\u03c4")
        buf.write("\u03c8\u03d1\u03dc\u03e6\u03eb\u03f2\u03f5\u03fa\u03ff")
        buf.write("\u0414\u0419\u041c\u0427\u042d\u0432\u0435\u043a\u043d")
        buf.write("\u0444\u045b\u0461\u0467\u046d\u0470\u0476\u047a\u047e")
        buf.write("\u0481\u0489\u048b\u0491\u0494\u0497\u049a\u049e\u04a2")
        buf.write("\u04a8\u04b2\u04b8\u04be\u04c3\u04c8\u04cc\u04d9\u04df")
        buf.write("\u04e3\u04e9\u04ee\u04fd\u0501\u0506\u050b\u0510\u0516")
        buf.write("\u0519\u0522\u0526\u052b\u052f\u0535\u053c\u054d\u054f")
        buf.write("\u0556\u055b\u0562\u0566\u056a\u0572\u0578\u057e\u0582")
        buf.write("\u0584\u0588\u058d\u0591\u0594\u0597\u059a\u059f\u05a3")
        buf.write("\u05a6\u05aa\u05ad\u05af\u05b4\u05bb\u05c1\u05c5\u05cb")
        buf.write("\u05d0\u05d5\u05dc\u05e1\u05e5\u05e7\u05e9\u05ef\u05f8")
        buf.write("\u05fc\u05fe\u0600\u0605\u0608\u060f\u0613\u0618\u061a")
        buf.write("\u061e\u0621\u0624\u0628\u062d\u0634\u063b\u0640\u0644")
        buf.write("\u0648\u064d\u0651\u0657\u0659\u065f\u0664\u066a\u066e")
        buf.write("\u0670\u0673\u0677\u067b\u067d\u067f\u0682\u068e\u0690")
        buf.write("\u0693\u0696\u0699\u06a2\u06a9\u06b5\u06b9\u06bc\u06c0")
        buf.write("\u06c5\u06d1\u06d6\u06da\u06de\u06e3\u06e8\u06ec\u06ef")
        buf.write("\u06f3\u06fe\u0702\u0709\u070e\u0712\u0718\u071c\u0720")
        buf.write("\u0729\u0736\u073b\u0742\u0746\u0749\u074c\u074f\u0753")
        buf.write("\u0758\u075f\u0763\u0767\u076d\u0772\u0776\u077c\u0782")
        buf.write("\u0785\u0788\u0798\u07a0\u07a9\u07ae\u07b1\u07b5\u07b9")
        buf.write("\u07be\u07c4\u07c9\u07cd\u07d6\u07db\u07e0\u080b")
        return buf.getvalue()


class cppParser ( CPP14ParserBase ):

    grammarFileName = "cppParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "<INVALID>", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                     "'>>='", "'=='", "'!='", "'<='", "'>='", "<INVALID>", 
                     "<INVALID>", "'++'", "'--'", "','", "'->*'", "'->'", 
                     "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "IntegerLiteral", "CharacterLiteral", 
                      "FloatingLiteral", "StringLiteral", "BooleanLiteral", 
                      "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False_", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True_", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
                      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
                      "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                      "Comma", "ArrowStar", "Arrow", "Question", "Colon", 
                      "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
                      "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
                      "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", 
                      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
                      "UserDefinedCharacterLiteral", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_translationUnit = 0
    RULE_primaryExpression = 1
    RULE_idExpression = 2
    RULE_unqualifiedId = 3
    RULE_qualifiedId = 4
    RULE_nestedNameSpecifier = 5
    RULE_lambdaExpression = 6
    RULE_lambdaIntroducer = 7
    RULE_lambdaCapture = 8
    RULE_captureDefault = 9
    RULE_captureList = 10
    RULE_capture = 11
    RULE_simpleCapture = 12
    RULE_initcapture = 13
    RULE_lambdaDeclarator = 14
    RULE_postfixExpression = 15
    RULE_typeIdOfTheTypeId = 16
    RULE_expressionList = 17
    RULE_pseudoDestructorName = 18
    RULE_unaryExpression = 19
    RULE_unaryOperator = 20
    RULE_newExpression_ = 21
    RULE_newPlacement = 22
    RULE_newTypeId = 23
    RULE_newDeclarator_ = 24
    RULE_noPointerNewDeclarator = 25
    RULE_newInitializer_ = 26
    RULE_deleteExpression = 27
    RULE_noExceptExpression = 28
    RULE_castExpression = 29
    RULE_pointerMemberExpression = 30
    RULE_multiplicativeExpression = 31
    RULE_additiveExpression = 32
    RULE_shiftExpression = 33
    RULE_shiftOperator = 34
    RULE_relationalExpression = 35
    RULE_equalityExpression = 36
    RULE_andExpression = 37
    RULE_exclusiveOrExpression = 38
    RULE_inclusiveOrExpression = 39
    RULE_logicalAndExpression = 40
    RULE_logicalOrExpression = 41
    RULE_conditionalExpression = 42
    RULE_assignmentExpression = 43
    RULE_assignmentOperator = 44
    RULE_expression = 45
    RULE_constantExpression = 46
    RULE_statement = 47
    RULE_labeledStatement = 48
    RULE_expressionStatement = 49
    RULE_compoundStatement = 50
    RULE_statementSeq = 51
    RULE_selectionStatement = 52
    RULE_condition = 53
    RULE_iterationStatement = 54
    RULE_forInitStatement = 55
    RULE_forRangeDeclaration = 56
    RULE_forRangeInitializer = 57
    RULE_jumpStatement = 58
    RULE_declarationStatement = 59
    RULE_declarationseq = 60
    RULE_declaration = 61
    RULE_blockDeclaration = 62
    RULE_aliasDeclaration = 63
    RULE_simpleDeclaration = 64
    RULE_staticAssertDeclaration = 65
    RULE_emptyDeclaration_ = 66
    RULE_attributeDeclaration = 67
    RULE_declSpecifier = 68
    RULE_declSpecifierSeq = 69
    RULE_storageClassSpecifier = 70
    RULE_functionSpecifier = 71
    RULE_typedefName = 72
    RULE_typeSpecifier = 73
    RULE_trailingTypeSpecifier = 74
    RULE_typeSpecifierSeq = 75
    RULE_trailingTypeSpecifierSeq = 76
    RULE_simpleTypeLengthModifier = 77
    RULE_simpleTypeSignednessModifier = 78
    RULE_simpleTypeSpecifier = 79
    RULE_theTypeName = 80
    RULE_decltypeSpecifier = 81
    RULE_elaboratedTypeSpecifier = 82
    RULE_enumName = 83
    RULE_enumSpecifier = 84
    RULE_enumHead = 85
    RULE_opaqueEnumDeclaration = 86
    RULE_enumkey = 87
    RULE_enumbase = 88
    RULE_enumeratorList = 89
    RULE_enumeratorDefinition = 90
    RULE_enumerator = 91
    RULE_namespaceName = 92
    RULE_originalNamespaceName = 93
    RULE_namespaceDefinition = 94
    RULE_namespaceAlias = 95
    RULE_namespaceAliasDefinition = 96
    RULE_qualifiednamespacespecifier = 97
    RULE_usingDeclaration = 98
    RULE_usingDirective = 99
    RULE_asmDefinition = 100
    RULE_linkageSpecification = 101
    RULE_attributeSpecifierSeq = 102
    RULE_attributeSpecifier = 103
    RULE_alignmentspecifier = 104
    RULE_attributeList = 105
    RULE_attribute = 106
    RULE_attributeNamespace = 107
    RULE_attributeArgumentClause = 108
    RULE_balancedTokenSeq = 109
    RULE_balancedtoken = 110
    RULE_initDeclaratorList = 111
    RULE_initDeclarator = 112
    RULE_declarator = 113
    RULE_pointerDeclarator = 114
    RULE_noPointerDeclarator = 115
    RULE_parametersAndQualifiers = 116
    RULE_trailingReturnType = 117
    RULE_pointerOperator = 118
    RULE_cvqualifierseq = 119
    RULE_cvQualifier = 120
    RULE_refqualifier = 121
    RULE_declaratorid = 122
    RULE_theTypeId = 123
    RULE_abstractDeclarator = 124
    RULE_pointerAbstractDeclarator = 125
    RULE_noPointerAbstractDeclarator = 126
    RULE_abstractPackDeclarator = 127
    RULE_noPointerAbstractPackDeclarator = 128
    RULE_parameterDeclarationClause = 129
    RULE_parameterDeclarationList = 130
    RULE_parameterDeclaration = 131
    RULE_functionDefinition = 132
    RULE_functionBody = 133
    RULE_initializer = 134
    RULE_braceOrEqualInitializer = 135
    RULE_initializerClause = 136
    RULE_initializerList = 137
    RULE_bracedInitList = 138
    RULE_className = 139
    RULE_classSpecifier = 140
    RULE_classHead = 141
    RULE_classHeadName = 142
    RULE_classVirtSpecifier = 143
    RULE_classKey = 144
    RULE_memberSpecification = 145
    RULE_memberdeclaration = 146
    RULE_memberDeclaratorList = 147
    RULE_memberDeclarator = 148
    RULE_virtualSpecifierSeq = 149
    RULE_virtualSpecifier = 150
    RULE_pureSpecifier = 151
    RULE_baseClause = 152
    RULE_baseSpecifierList = 153
    RULE_baseSpecifier = 154
    RULE_classOrDeclType = 155
    RULE_baseTypeSpecifier = 156
    RULE_accessSpecifier = 157
    RULE_conversionFunctionId = 158
    RULE_conversionTypeId = 159
    RULE_conversionDeclarator = 160
    RULE_constructorInitializer = 161
    RULE_memInitializerList = 162
    RULE_memInitializer = 163
    RULE_meminitializerid = 164
    RULE_operatorFunctionId = 165
    RULE_literalOperatorId = 166
    RULE_templateDeclaration = 167
    RULE_templateparameterList = 168
    RULE_templateParameter = 169
    RULE_typeParameter = 170
    RULE_simpleTemplateId = 171
    RULE_templateId = 172
    RULE_templateName = 173
    RULE_templateArgumentList = 174
    RULE_templateArgument = 175
    RULE_typeNameSpecifier = 176
    RULE_explicitInstantiation = 177
    RULE_explicitSpecialization = 178
    RULE_tryBlock = 179
    RULE_functionTryBlock = 180
    RULE_handlerSeq = 181
    RULE_handler = 182
    RULE_exceptionDeclaration = 183
    RULE_throwExpression = 184
    RULE_exceptionSpecification = 185
    RULE_dynamicExceptionSpecification = 186
    RULE_typeIdList = 187
    RULE_noeExceptSpecification = 188
    RULE_theOperator = 189
    RULE_literal = 190

    ruleNames =  [ "translationUnit", "primaryExpression", "idExpression", 
                   "unqualifiedId", "qualifiedId", "nestedNameSpecifier", 
                   "lambdaExpression", "lambdaIntroducer", "lambdaCapture", 
                   "captureDefault", "captureList", "capture", "simpleCapture", 
                   "initcapture", "lambdaDeclarator", "postfixExpression", 
                   "typeIdOfTheTypeId", "expressionList", "pseudoDestructorName", 
                   "unaryExpression", "unaryOperator", "newExpression_", 
                   "newPlacement", "newTypeId", "newDeclarator_", "noPointerNewDeclarator", 
                   "newInitializer_", "deleteExpression", "noExceptExpression", 
                   "castExpression", "pointerMemberExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "shiftOperator", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "statement", "labeledStatement", "expressionStatement", 
                   "compoundStatement", "statementSeq", "selectionStatement", 
                   "condition", "iterationStatement", "forInitStatement", 
                   "forRangeDeclaration", "forRangeInitializer", "jumpStatement", 
                   "declarationStatement", "declarationseq", "declaration", 
                   "blockDeclaration", "aliasDeclaration", "simpleDeclaration", 
                   "staticAssertDeclaration", "emptyDeclaration_", "attributeDeclaration", 
                   "declSpecifier", "declSpecifierSeq", "storageClassSpecifier", 
                   "functionSpecifier", "typedefName", "typeSpecifier", 
                   "trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq", 
                   "simpleTypeLengthModifier", "simpleTypeSignednessModifier", 
                   "simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", 
                   "elaboratedTypeSpecifier", "enumName", "enumSpecifier", 
                   "enumHead", "opaqueEnumDeclaration", "enumkey", "enumbase", 
                   "enumeratorList", "enumeratorDefinition", "enumerator", 
                   "namespaceName", "originalNamespaceName", "namespaceDefinition", 
                   "namespaceAlias", "namespaceAliasDefinition", "qualifiednamespacespecifier", 
                   "usingDeclaration", "usingDirective", "asmDefinition", 
                   "linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier", 
                   "alignmentspecifier", "attributeList", "attribute", "attributeNamespace", 
                   "attributeArgumentClause", "balancedTokenSeq", "balancedtoken", 
                   "initDeclaratorList", "initDeclarator", "declarator", 
                   "pointerDeclarator", "noPointerDeclarator", "parametersAndQualifiers", 
                   "trailingReturnType", "pointerOperator", "cvqualifierseq", 
                   "cvQualifier", "refqualifier", "declaratorid", "theTypeId", 
                   "abstractDeclarator", "pointerAbstractDeclarator", "noPointerAbstractDeclarator", 
                   "abstractPackDeclarator", "noPointerAbstractPackDeclarator", 
                   "parameterDeclarationClause", "parameterDeclarationList", 
                   "parameterDeclaration", "functionDefinition", "functionBody", 
                   "initializer", "braceOrEqualInitializer", "initializerClause", 
                   "initializerList", "bracedInitList", "className", "classSpecifier", 
                   "classHead", "classHeadName", "classVirtSpecifier", "classKey", 
                   "memberSpecification", "memberdeclaration", "memberDeclaratorList", 
                   "memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", 
                   "pureSpecifier", "baseClause", "baseSpecifierList", "baseSpecifier", 
                   "classOrDeclType", "baseTypeSpecifier", "accessSpecifier", 
                   "conversionFunctionId", "conversionTypeId", "conversionDeclarator", 
                   "constructorInitializer", "memInitializerList", "memInitializer", 
                   "meminitializerid", "operatorFunctionId", "literalOperatorId", 
                   "templateDeclaration", "templateparameterList", "templateParameter", 
                   "typeParameter", "simpleTemplateId", "templateId", "templateName", 
                   "templateArgumentList", "templateArgument", "typeNameSpecifier", 
                   "explicitInstantiation", "explicitSpecialization", "tryBlock", 
                   "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
                   "throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
                   "typeIdList", "noeExceptSpecification", "theOperator", 
                   "literal" ]

    EOF = Token.EOF
    IntegerLiteral=1
    CharacterLiteral=2
    FloatingLiteral=3
    StringLiteral=4
    BooleanLiteral=5
    PointerLiteral=6
    UserDefinedLiteral=7
    MultiLineMacro=8
    Directive=9
    Alignas=10
    Alignof=11
    Asm=12
    Auto=13
    Bool=14
    Break=15
    Case=16
    Catch=17
    Char=18
    Char16=19
    Char32=20
    Class=21
    Const=22
    Constexpr=23
    Const_cast=24
    Continue=25
    Decltype=26
    Default=27
    Delete=28
    Do=29
    Double=30
    Dynamic_cast=31
    Else=32
    Enum=33
    Explicit=34
    Export=35
    Extern=36
    False_=37
    Final=38
    Float=39
    For=40
    Friend=41
    Goto=42
    If=43
    Inline=44
    Int=45
    Long=46
    Mutable=47
    Namespace=48
    New=49
    Noexcept=50
    Nullptr=51
    Operator=52
    Override=53
    Private=54
    Protected=55
    Public=56
    Register=57
    Reinterpret_cast=58
    Return=59
    Short=60
    Signed=61
    Sizeof=62
    Static=63
    Static_assert=64
    Static_cast=65
    Struct=66
    Switch=67
    Template=68
    This=69
    Thread_local=70
    Throw=71
    True_=72
    Try=73
    Typedef=74
    Typeid_=75
    Typename_=76
    Union=77
    Unsigned=78
    Using=79
    Virtual=80
    Void=81
    Volatile=82
    Wchar=83
    While=84
    LeftParen=85
    RightParen=86
    LeftBracket=87
    RightBracket=88
    LeftBrace=89
    RightBrace=90
    Plus=91
    Minus=92
    Star=93
    Div=94
    Mod=95
    Caret=96
    And=97
    Or=98
    Tilde=99
    Not=100
    Assign=101
    Less=102
    Greater=103
    PlusAssign=104
    MinusAssign=105
    StarAssign=106
    DivAssign=107
    ModAssign=108
    XorAssign=109
    AndAssign=110
    OrAssign=111
    LeftShiftAssign=112
    RightShiftAssign=113
    Equal=114
    NotEqual=115
    LessEqual=116
    GreaterEqual=117
    AndAnd=118
    OrOr=119
    PlusPlus=120
    MinusMinus=121
    Comma=122
    ArrowStar=123
    Arrow=124
    Question=125
    Colon=126
    Doublecolon=127
    Semi=128
    Dot=129
    DotStar=130
    Ellipsis=131
    Identifier=132
    DecimalLiteral=133
    OctalLiteral=134
    HexadecimalLiteral=135
    BinaryLiteral=136
    Integersuffix=137
    UserDefinedIntegerLiteral=138
    UserDefinedFloatingLiteral=139
    UserDefinedStringLiteral=140
    UserDefinedCharacterLiteral=141
    Whitespace=142
    Newline=143
    BlockComment=144
    LineComment=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(cppParser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(cppParser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = cppParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Asm - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Namespace - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                self.state = 382
                self.declarationseq()


            self.state = 385
            self.match(cppParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.LiteralContext)
            else:
                return self.getTypedRuleContext(cppParser.LiteralContext,i)


        def This(self):
            return self.getToken(cppParser.This, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def idExpression(self):
            return self.getTypedRuleContext(cppParser.IdExpressionContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(cppParser.LambdaExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = cppParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryExpression)
        try:
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 388 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 387
                        self.literal()

                    else:
                        raise NoViableAltException(self)
                    self.state = 390 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass
            elif token in [cppParser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.match(cppParser.This)
                pass
            elif token in [cppParser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                self.match(cppParser.LeftParen)
                self.state = 394
                self.expression()
                self.state = 395
                self.match(cppParser.RightParen)
                pass
            elif token in [cppParser.Decltype, cppParser.Operator, cppParser.Tilde, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                self.idExpression()
                pass
            elif token in [cppParser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 398
                self.lambdaExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedId(self):
            return self.getTypedRuleContext(cppParser.UnqualifiedIdContext,0)


        def qualifiedId(self):
            return self.getTypedRuleContext(cppParser.QualifiedIdContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_idExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdExpression" ):
                listener.enterIdExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdExpression" ):
                listener.exitIdExpression(self)




    def idExpression(self):

        localctx = cppParser.IdExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idExpression)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.unqualifiedId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.qualifiedId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(cppParser.OperatorFunctionIdContext,0)


        def conversionFunctionId(self):
            return self.getTypedRuleContext(cppParser.ConversionFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(cppParser.LiteralOperatorIdContext,0)


        def Tilde(self):
            return self.getToken(cppParser.Tilde, 0)

        def className(self):
            return self.getTypedRuleContext(cppParser.ClassNameContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.DecltypeSpecifierContext,0)


        def templateId(self):
            return self.getTypedRuleContext(cppParser.TemplateIdContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_unqualifiedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedId" ):
                listener.enterUnqualifiedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedId" ):
                listener.exitUnqualifiedId(self)




    def unqualifiedId(self):

        localctx = cppParser.UnqualifiedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedId)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(cppParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.operatorFunctionId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.conversionFunctionId()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 408
                self.literalOperatorId()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 409
                self.match(cppParser.Tilde)
                self.state = 412
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.Identifier]:
                    self.state = 410
                    self.className()
                    pass
                elif token in [cppParser.Decltype]:
                    self.state = 411
                    self.decltypeSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 414
                self.templateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def unqualifiedId(self):
            return self.getTypedRuleContext(cppParser.UnqualifiedIdContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def getRuleIndex(self):
            return cppParser.RULE_qualifiedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedId" ):
                listener.enterQualifiedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedId" ):
                listener.exitQualifiedId(self)




    def qualifiedId(self):

        localctx = cppParser.QualifiedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.nestedNameSpecifier(0)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Template:
                self.state = 418
                self.match(cppParser.Template)


            self.state = 421
            self.unqualifiedId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedNameSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def theTypeName(self):
            return self.getTypedRuleContext(cppParser.TheTypeNameContext,0)


        def namespaceName(self):
            return self.getTypedRuleContext(cppParser.NamespaceNameContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.DecltypeSpecifierContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def getRuleIndex(self):
            return cppParser.RULE_nestedNameSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedNameSpecifier" ):
                listener.enterNestedNameSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedNameSpecifier" ):
                listener.exitNestedNameSpecifier(self)



    def nestedNameSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cppParser.NestedNameSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestedNameSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 424
                self.theTypeName()

            elif la_ == 2:
                self.state = 425
                self.namespaceName()

            elif la_ == 3:
                self.state = 426
                self.decltypeSpecifier()


            self.state = 429
            self.match(cppParser.Doublecolon)
            self._ctx.stop = self._input.LT(-1)
            self.state = 442
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = cppParser.NestedNameSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_nestedNameSpecifier)
                    self.state = 431
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 437
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 432
                        self.match(cppParser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cppParser.Template:
                            self.state = 433
                            self.match(cppParser.Template)


                        self.state = 436
                        self.simpleTemplateId()
                        pass


                    self.state = 439
                    self.match(cppParser.Doublecolon) 
                self.state = 444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LambdaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaIntroducer(self):
            return self.getTypedRuleContext(cppParser.LambdaIntroducerContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def lambdaDeclarator(self):
            return self.getTypedRuleContext(cppParser.LambdaDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = cppParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.lambdaIntroducer()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.LeftParen:
                self.state = 446
                self.lambdaDeclarator()


            self.state = 449
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaIntroducerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def lambdaCapture(self):
            return self.getTypedRuleContext(cppParser.LambdaCaptureContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_lambdaIntroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaIntroducer" ):
                listener.enterLambdaIntroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaIntroducer" ):
                listener.exitLambdaIntroducer(self)




    def lambdaIntroducer(self):

        localctx = cppParser.LambdaIntroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaIntroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(cppParser.LeftBracket)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (cppParser.This - 69)) | (1 << (cppParser.And - 69)) | (1 << (cppParser.Assign - 69)) | (1 << (cppParser.Identifier - 69)))) != 0):
                self.state = 452
                self.lambdaCapture()


            self.state = 455
            self.match(cppParser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaCaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def captureList(self):
            return self.getTypedRuleContext(cppParser.CaptureListContext,0)


        def captureDefault(self):
            return self.getTypedRuleContext(cppParser.CaptureDefaultContext,0)


        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def getRuleIndex(self):
            return cppParser.RULE_lambdaCapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaCapture" ):
                listener.enterLambdaCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaCapture" ):
                listener.exitLambdaCapture(self)




    def lambdaCapture(self):

        localctx = cppParser.LambdaCaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdaCapture)
        self._la = 0 # Token type
        try:
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.captureList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.captureDefault()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Comma:
                    self.state = 459
                    self.match(cppParser.Comma)
                    self.state = 460
                    self.captureList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(cppParser.And, 0)

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def getRuleIndex(self):
            return cppParser.RULE_captureDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaptureDefault" ):
                listener.enterCaptureDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaptureDefault" ):
                listener.exitCaptureDefault(self)




    def captureDefault(self):

        localctx = cppParser.CaptureDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_captureDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            _la = self._input.LA(1)
            if not(_la==cppParser.And or _la==cppParser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.CaptureContext)
            else:
                return self.getTypedRuleContext(cppParser.CaptureContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cppParser.RULE_captureList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaptureList" ):
                listener.enterCaptureList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaptureList" ):
                listener.exitCaptureList(self)




    def captureList(self):

        localctx = cppParser.CaptureListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_captureList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.capture()
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 468
                self.match(cppParser.Comma)
                self.state = 469
                self.capture()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 475
                self.match(cppParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCapture(self):
            return self.getTypedRuleContext(cppParser.SimpleCaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(cppParser.InitcaptureContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)




    def capture(self):

        localctx = cppParser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.simpleCapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleCaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def And(self):
            return self.getToken(cppParser.And, 0)

        def This(self):
            return self.getToken(cppParser.This, 0)

        def getRuleIndex(self):
            return cppParser.RULE_simpleCapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCapture" ):
                listener.enterSimpleCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCapture" ):
                listener.exitSimpleCapture(self)




    def simpleCapture(self):

        localctx = cppParser.SimpleCaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simpleCapture)
        self._la = 0 # Token type
        try:
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.And, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.And:
                    self.state = 482
                    self.match(cppParser.And)


                self.state = 485
                self.match(cppParser.Identifier)
                pass
            elif token in [cppParser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.match(cppParser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitcaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(cppParser.InitializerContext,0)


        def And(self):
            return self.getToken(cppParser.And, 0)

        def getRuleIndex(self):
            return cppParser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)




    def initcapture(self):

        localctx = cppParser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.And:
                self.state = 489
                self.match(cppParser.And)


            self.state = 492
            self.match(cppParser.Identifier)
            self.state = 493
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def parameterDeclarationClause(self):
            return self.getTypedRuleContext(cppParser.ParameterDeclarationClauseContext,0)


        def Mutable(self):
            return self.getToken(cppParser.Mutable, 0)

        def exceptionSpecification(self):
            return self.getTypedRuleContext(cppParser.ExceptionSpecificationContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(cppParser.TrailingReturnTypeContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_lambdaDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaDeclarator" ):
                listener.enterLambdaDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaDeclarator" ):
                listener.exitLambdaDeclarator(self)




    def lambdaDeclarator(self):

        localctx = cppParser.LambdaDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdaDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(cppParser.LeftParen)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                self.state = 496
                self.parameterDeclarationClause()


            self.state = 499
            self.match(cppParser.RightParen)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Mutable:
                self.state = 500
                self.match(cppParser.Mutable)


            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Noexcept or _la==cppParser.Throw:
                self.state = 503
                self.exceptionSpecification()


            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 506
                self.attributeSpecifierSeq()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Arrow:
                self.state = 509
                self.trailingReturnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(cppParser.PrimaryExpressionContext,0)


        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.SimpleTypeSpecifierContext,0)


        def typeNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.TypeNameSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(cppParser.ExpressionListContext,0)


        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def Dynamic_cast(self):
            return self.getToken(cppParser.Dynamic_cast, 0)

        def Static_cast(self):
            return self.getToken(cppParser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(cppParser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(cppParser.Const_cast, 0)

        def typeIdOfTheTypeId(self):
            return self.getTypedRuleContext(cppParser.TypeIdOfTheTypeIdContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(cppParser.PostfixExpressionContext,0)


        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(cppParser.Dot, 0)

        def Arrow(self):
            return self.getToken(cppParser.Arrow, 0)

        def idExpression(self):
            return self.getTypedRuleContext(cppParser.IdExpressionContext,0)


        def pseudoDestructorName(self):
            return self.getTypedRuleContext(cppParser.PseudoDestructorNameContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def PlusPlus(self):
            return self.getToken(cppParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(cppParser.MinusMinus, 0)

        def getRuleIndex(self):
            return cppParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cppParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 513
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Decltype, cppParser.Double, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.Short, cppParser.Signed, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.Doublecolon, cppParser.Identifier]:
                    self.state = 514
                    self.simpleTypeSpecifier()
                    pass
                elif token in [cppParser.Typename_]:
                    self.state = 515
                    self.typeNameSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 524
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.LeftParen]:
                    self.state = 518
                    self.match(cppParser.LeftParen)
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.LeftBrace - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                        self.state = 519
                        self.expressionList()


                    self.state = 522
                    self.match(cppParser.RightParen)
                    pass
                elif token in [cppParser.LeftBrace]:
                    self.state = 523
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 526
                _la = self._input.LA(1)
                if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (cppParser.Const_cast - 24)) | (1 << (cppParser.Dynamic_cast - 24)) | (1 << (cppParser.Reinterpret_cast - 24)) | (1 << (cppParser.Static_cast - 24)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 527
                self.match(cppParser.Less)
                self.state = 528
                self.theTypeId()
                self.state = 529
                self.match(cppParser.Greater)
                self.state = 530
                self.match(cppParser.LeftParen)
                self.state = 531
                self.expression()
                self.state = 532
                self.match(cppParser.RightParen)
                pass

            elif la_ == 4:
                self.state = 534
                self.typeIdOfTheTypeId()
                self.state = 535
                self.match(cppParser.LeftParen)
                self.state = 538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 536
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 537
                    self.theTypeId()
                    pass


                self.state = 540
                self.match(cppParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        localctx = cppParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 544
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 545
                        self.match(cppParser.LeftBracket)
                        self.state = 548
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.Alignof, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Const_cast, cppParser.Decltype, cppParser.Delete, cppParser.Double, cppParser.Dynamic_cast, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.New, cppParser.Noexcept, cppParser.Operator, cppParser.Reinterpret_cast, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static_cast, cppParser.This, cppParser.Throw, cppParser.Typeid_, cppParser.Typename_, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Doublecolon, cppParser.Identifier]:
                            self.state = 546
                            self.expression()
                            pass
                        elif token in [cppParser.LeftBrace]:
                            self.state = 547
                            self.bracedInitList()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 550
                        self.match(cppParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = cppParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 552
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 553
                        self.match(cppParser.LeftParen)
                        self.state = 555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.LeftBrace - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                            self.state = 554
                            self.expressionList()


                        self.state = 557
                        self.match(cppParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = cppParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 558
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 559
                        _la = self._input.LA(1)
                        if not(_la==cppParser.Arrow or _la==cppParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 565
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                        if la_ == 1:
                            self.state = 561
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==cppParser.Template:
                                self.state = 560
                                self.match(cppParser.Template)


                            self.state = 563
                            self.idExpression()
                            pass

                        elif la_ == 2:
                            self.state = 564
                            self.pseudoDestructorName()
                            pass


                        pass

                    elif la_ == 4:
                        localctx = cppParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 567
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 568
                        _la = self._input.LA(1)
                        if not(_la==cppParser.PlusPlus or _la==cppParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypeIdOfTheTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(cppParser.Typeid_, 0)

        def getRuleIndex(self):
            return cppParser.RULE_typeIdOfTheTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdOfTheTypeId" ):
                listener.enterTypeIdOfTheTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdOfTheTypeId" ):
                listener.exitTypeIdOfTheTypeId(self)




    def typeIdOfTheTypeId(self):

        localctx = cppParser.TypeIdOfTheTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeIdOfTheTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(cppParser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerList(self):
            return self.getTypedRuleContext(cppParser.InitializerListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = cppParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.initializerList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudoDestructorNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Tilde(self):
            return self.getToken(cppParser.Tilde, 0)

        def theTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TheTypeNameContext)
            else:
                return self.getTypedRuleContext(cppParser.TheTypeNameContext,i)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_pseudoDestructorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoDestructorName" ):
                listener.enterPseudoDestructorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoDestructorName" ):
                listener.exitPseudoDestructorName(self)




    def pseudoDestructorName(self):

        localctx = cppParser.PseudoDestructorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pseudoDestructorName)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 578
                    self.nestedNameSpecifier(0)


                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Identifier:
                    self.state = 581
                    self.theTypeName()
                    self.state = 582
                    self.match(cppParser.Doublecolon)


                self.state = 586
                self.match(cppParser.Tilde)
                self.state = 587
                self.theTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.nestedNameSpecifier(0)
                self.state = 589
                self.match(cppParser.Template)
                self.state = 590
                self.simpleTemplateId()
                self.state = 591
                self.match(cppParser.Doublecolon)
                self.state = 592
                self.match(cppParser.Tilde)
                self.state = 593
                self.theTypeName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 595
                self.match(cppParser.Tilde)
                self.state = 596
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(cppParser.PostfixExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(cppParser.UnaryExpressionContext,0)


        def PlusPlus(self):
            return self.getToken(cppParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(cppParser.MinusMinus, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(cppParser.UnaryOperatorContext,0)


        def Sizeof(self):
            return self.getToken(cppParser.Sizeof, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def Alignof(self):
            return self.getToken(cppParser.Alignof, 0)

        def noExceptExpression(self):
            return self.getTypedRuleContext(cppParser.NoExceptExpressionContext,0)


        def newExpression_(self):
            return self.getTypedRuleContext(cppParser.NewExpression_Context,0)


        def deleteExpression(self):
            return self.getTypedRuleContext(cppParser.DeleteExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = cppParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unaryExpression)
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.PlusPlus]:
                    self.state = 600
                    self.match(cppParser.PlusPlus)
                    pass
                elif token in [cppParser.MinusMinus]:
                    self.state = 601
                    self.match(cppParser.MinusMinus)
                    pass
                elif token in [cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not]:
                    self.state = 602
                    self.unaryOperator()
                    pass
                elif token in [cppParser.Sizeof]:
                    self.state = 603
                    self.match(cppParser.Sizeof)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 606
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.match(cppParser.Sizeof)
                self.state = 616
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.LeftParen]:
                    self.state = 608
                    self.match(cppParser.LeftParen)
                    self.state = 609
                    self.theTypeId()
                    self.state = 610
                    self.match(cppParser.RightParen)
                    pass
                elif token in [cppParser.Ellipsis]:
                    self.state = 612
                    self.match(cppParser.Ellipsis)
                    self.state = 613
                    self.match(cppParser.LeftParen)
                    self.state = 614
                    self.match(cppParser.Identifier)
                    self.state = 615
                    self.match(cppParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 618
                self.match(cppParser.Alignof)
                self.state = 619
                self.match(cppParser.LeftParen)
                self.state = 620
                self.theTypeId()
                self.state = 621
                self.match(cppParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 623
                self.noExceptExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 624
                self.newExpression_()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 625
                self.deleteExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(cppParser.Or, 0)

        def Star(self):
            return self.getToken(cppParser.Star, 0)

        def And(self):
            return self.getToken(cppParser.And, 0)

        def Plus(self):
            return self.getToken(cppParser.Plus, 0)

        def Tilde(self):
            return self.getToken(cppParser.Tilde, 0)

        def Minus(self):
            return self.getToken(cppParser.Minus, 0)

        def Not(self):
            return self.getToken(cppParser.Not, 0)

        def getRuleIndex(self):
            return cppParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = cppParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (cppParser.Plus - 91)) | (1 << (cppParser.Minus - 91)) | (1 << (cppParser.Star - 91)) | (1 << (cppParser.And - 91)) | (1 << (cppParser.Or - 91)) | (1 << (cppParser.Tilde - 91)) | (1 << (cppParser.Not - 91)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewExpression_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(cppParser.New, 0)

        def newTypeId(self):
            return self.getTypedRuleContext(cppParser.NewTypeIdContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def newPlacement(self):
            return self.getTypedRuleContext(cppParser.NewPlacementContext,0)


        def newInitializer_(self):
            return self.getTypedRuleContext(cppParser.NewInitializer_Context,0)


        def getRuleIndex(self):
            return cppParser.RULE_newExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression_" ):
                listener.enterNewExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression_" ):
                listener.exitNewExpression_(self)




    def newExpression_(self):

        localctx = cppParser.NewExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_newExpression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Doublecolon:
                self.state = 630
                self.match(cppParser.Doublecolon)


            self.state = 633
            self.match(cppParser.New)
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 634
                self.newPlacement()


            self.state = 642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.Short, cppParser.Signed, cppParser.Struct, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.Doublecolon, cppParser.Identifier]:
                self.state = 637
                self.newTypeId()
                pass
            elif token in [cppParser.LeftParen]:
                self.state = 638
                self.match(cppParser.LeftParen)
                self.state = 639
                self.theTypeId()
                self.state = 640
                self.match(cppParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.LeftParen or _la==cppParser.LeftBrace:
                self.state = 644
                self.newInitializer_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewPlacementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(cppParser.ExpressionListContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def getRuleIndex(self):
            return cppParser.RULE_newPlacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewPlacement" ):
                listener.enterNewPlacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewPlacement" ):
                listener.exitNewPlacement(self)




    def newPlacement(self):

        localctx = cppParser.NewPlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newPlacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(cppParser.LeftParen)
            self.state = 648
            self.expressionList()
            self.state = 649
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierSeqContext,0)


        def newDeclarator_(self):
            return self.getTypedRuleContext(cppParser.NewDeclarator_Context,0)


        def getRuleIndex(self):
            return cppParser.RULE_newTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewTypeId" ):
                listener.enterNewTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewTypeId" ):
                listener.exitNewTypeId(self)




    def newTypeId(self):

        localctx = cppParser.NewTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.typeSpecifierSeq()
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 652
                self.newDeclarator_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewDeclarator_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerOperator(self):
            return self.getTypedRuleContext(cppParser.PointerOperatorContext,0)


        def newDeclarator_(self):
            return self.getTypedRuleContext(cppParser.NewDeclarator_Context,0)


        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerNewDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_newDeclarator_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewDeclarator_" ):
                listener.enterNewDeclarator_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewDeclarator_" ):
                listener.exitNewDeclarator_(self)




    def newDeclarator_(self):

        localctx = cppParser.NewDeclarator_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newDeclarator_)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Decltype, cppParser.Star, cppParser.And, cppParser.AndAnd, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.pointerOperator()
                self.state = 657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self.newDeclarator_()


                pass
            elif token in [cppParser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.noPointerNewDeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoPointerNewDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerNewDeclaratorContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_noPointerNewDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerNewDeclarator" ):
                listener.enterNoPointerNewDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerNewDeclarator" ):
                listener.exitNoPointerNewDeclarator(self)



    def noPointerNewDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cppParser.NoPointerNewDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_noPointerNewDeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(cppParser.LeftBracket)
            self.state = 664
            self.expression()
            self.state = 665
            self.match(cppParser.RightBracket)
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 666
                self.attributeSpecifierSeq()


            self._ctx.stop = self._input.LT(-1)
            self.state = 678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = cppParser.NoPointerNewDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerNewDeclarator)
                    self.state = 669
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 670
                    self.match(cppParser.LeftBracket)
                    self.state = 671
                    self.constantExpression()
                    self.state = 672
                    self.match(cppParser.RightBracket)
                    self.state = 674
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 673
                        self.attributeSpecifierSeq()

             
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewInitializer_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(cppParser.ExpressionListContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_newInitializer_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewInitializer_" ):
                listener.enterNewInitializer_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewInitializer_" ):
                listener.exitNewInitializer_(self)




    def newInitializer_(self):

        localctx = cppParser.NewInitializer_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_newInitializer_)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.match(cppParser.LeftParen)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.LeftBrace - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                    self.state = 682
                    self.expressionList()


                self.state = 685
                self.match(cppParser.RightParen)
                pass
            elif token in [cppParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(cppParser.Delete, 0)

        def castExpression(self):
            return self.getTypedRuleContext(cppParser.CastExpressionContext,0)


        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def getRuleIndex(self):
            return cppParser.RULE_deleteExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)




    def deleteExpression(self):

        localctx = cppParser.DeleteExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_deleteExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Doublecolon:
                self.state = 689
                self.match(cppParser.Doublecolon)


            self.state = 692
            self.match(cppParser.Delete)
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 693
                self.match(cppParser.LeftBracket)
                self.state = 694
                self.match(cppParser.RightBracket)


            self.state = 697
            self.castExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoExceptExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(cppParser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def getRuleIndex(self):
            return cppParser.RULE_noExceptExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoExceptExpression" ):
                listener.enterNoExceptExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoExceptExpression" ):
                listener.exitNoExceptExpression(self)




    def noExceptExpression(self):

        localctx = cppParser.NoExceptExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noExceptExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(cppParser.Noexcept)
            self.state = 700
            self.match(cppParser.LeftParen)
            self.state = 701
            self.expression()
            self.state = 702
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(cppParser.UnaryExpressionContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(cppParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = cppParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_castExpression)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.match(cppParser.LeftParen)
                self.state = 706
                self.theTypeId()
                self.state = 707
                self.match(cppParser.RightParen)
                self.state = 708
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerMemberExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.CastExpressionContext,i)


        def DotStar(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.DotStar)
            else:
                return self.getToken(cppParser.DotStar, i)

        def ArrowStar(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.ArrowStar)
            else:
                return self.getToken(cppParser.ArrowStar, i)

        def getRuleIndex(self):
            return cppParser.RULE_pointerMemberExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerMemberExpression" ):
                listener.enterPointerMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerMemberExpression" ):
                listener.exitPointerMemberExpression(self)




    def pointerMemberExpression(self):

        localctx = cppParser.PointerMemberExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerMemberExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.castExpression()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.ArrowStar or _la==cppParser.DotStar:
                self.state = 713
                _la = self._input.LA(1)
                if not(_la==cppParser.ArrowStar or _la==cppParser.DotStar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 714
                self.castExpression()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerMemberExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.PointerMemberExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.PointerMemberExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Star)
            else:
                return self.getToken(cppParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Div)
            else:
                return self.getToken(cppParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Mod)
            else:
                return self.getToken(cppParser.Mod, i)

        def getRuleIndex(self):
            return cppParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = cppParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.pointerMemberExpression()
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (cppParser.Star - 93)) | (1 << (cppParser.Div - 93)) | (1 << (cppParser.Mod - 93)))) != 0):
                self.state = 721
                _la = self._input.LA(1)
                if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (cppParser.Star - 93)) | (1 << (cppParser.Div - 93)) | (1 << (cppParser.Mod - 93)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 722
                self.pointerMemberExpression()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Plus)
            else:
                return self.getToken(cppParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Minus)
            else:
                return self.getToken(cppParser.Minus, i)

        def getRuleIndex(self):
            return cppParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = cppParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.multiplicativeExpression()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Plus or _la==cppParser.Minus:
                self.state = 729
                _la = self._input.LA(1)
                if not(_la==cppParser.Plus or _la==cppParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 730
                self.multiplicativeExpression()
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.AdditiveExpressionContext,i)


        def shiftOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ShiftOperatorContext)
            else:
                return self.getTypedRuleContext(cppParser.ShiftOperatorContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = cppParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_shiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.additiveExpression()
            self.state = 742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 737
                    self.shiftOperator()
                    self.state = 738
                    self.additiveExpression() 
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Greater)
            else:
                return self.getToken(cppParser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Less)
            else:
                return self.getToken(cppParser.Less, i)

        def getRuleIndex(self):
            return cppParser.RULE_shiftOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperator" ):
                listener.enterShiftOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperator" ):
                listener.exitShiftOperator(self)




    def shiftOperator(self):

        localctx = cppParser.ShiftOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_shiftOperator)
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Greater]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.match(cppParser.Greater)
                self.state = 746
                self.match(cppParser.Greater)
                pass
            elif token in [cppParser.Less]:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(cppParser.Less)
                self.state = 748
                self.match(cppParser.Less)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Less)
            else:
                return self.getToken(cppParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Greater)
            else:
                return self.getToken(cppParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LessEqual)
            else:
                return self.getToken(cppParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.GreaterEqual)
            else:
                return self.getToken(cppParser.GreaterEqual, i)

        def getRuleIndex(self):
            return cppParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = cppParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.shiftExpression()
            self.state = 756
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 752
                    _la = self._input.LA(1)
                    if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (cppParser.Less - 102)) | (1 << (cppParser.Greater - 102)) | (1 << (cppParser.LessEqual - 102)) | (1 << (cppParser.GreaterEqual - 102)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 753
                    self.shiftExpression() 
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Equal)
            else:
                return self.getToken(cppParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.NotEqual)
            else:
                return self.getToken(cppParser.NotEqual, i)

        def getRuleIndex(self):
            return cppParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = cppParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.relationalExpression()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Equal or _la==cppParser.NotEqual:
                self.state = 760
                _la = self._input.LA(1)
                if not(_la==cppParser.Equal or _la==cppParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 761
                self.relationalExpression()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.And)
            else:
                return self.getToken(cppParser.And, i)

        def getRuleIndex(self):
            return cppParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = cppParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.equalityExpression()
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.And:
                self.state = 768
                self.match(cppParser.And)
                self.state = 769
                self.equalityExpression()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Caret)
            else:
                return self.getToken(cppParser.Caret, i)

        def getRuleIndex(self):
            return cppParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = cppParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.andExpression()
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Caret:
                self.state = 776
                self.match(cppParser.Caret)
                self.state = 777
                self.andExpression()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Or)
            else:
                return self.getToken(cppParser.Or, i)

        def getRuleIndex(self):
            return cppParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = cppParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.exclusiveOrExpression()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Or:
                self.state = 784
                self.match(cppParser.Or)
                self.state = 785
                self.exclusiveOrExpression()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.AndAnd)
            else:
                return self.getToken(cppParser.AndAnd, i)

        def getRuleIndex(self):
            return cppParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = cppParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.inclusiveOrExpression()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.AndAnd:
                self.state = 792
                self.match(cppParser.AndAnd)
                self.state = 793
                self.inclusiveOrExpression()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.OrOr)
            else:
                return self.getToken(cppParser.OrOr, i)

        def getRuleIndex(self):
            return cppParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = cppParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.logicalAndExpression()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.OrOr:
                self.state = 800
                self.match(cppParser.OrOr)
                self.state = 801
                self.logicalAndExpression()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(cppParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(cppParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(cppParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = cppParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.logicalOrExpression()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Question:
                self.state = 808
                self.match(cppParser.Question)
                self.state = 809
                self.expression()
                self.state = 810
                self.match(cppParser.Colon)
                self.state = 811
                self.assignmentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(cppParser.ConditionalExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(cppParser.LogicalOrExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(cppParser.AssignmentOperatorContext,0)


        def initializerClause(self):
            return self.getTypedRuleContext(cppParser.InitializerClauseContext,0)


        def throwExpression(self):
            return self.getTypedRuleContext(cppParser.ThrowExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = cppParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignmentExpression)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.logicalOrExpression()
                self.state = 817
                self.assignmentOperator()
                self.state = 818
                self.initializerClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.throwExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(cppParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(cppParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(cppParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(cppParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(cppParser.MinusAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(cppParser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(cppParser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(cppParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(cppParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(cppParser.OrAssign, 0)

        def getRuleIndex(self):
            return cppParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = cppParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (cppParser.Assign - 101)) | (1 << (cppParser.PlusAssign - 101)) | (1 << (cppParser.MinusAssign - 101)) | (1 << (cppParser.StarAssign - 101)) | (1 << (cppParser.DivAssign - 101)) | (1 << (cppParser.ModAssign - 101)) | (1 << (cppParser.XorAssign - 101)) | (1 << (cppParser.AndAssign - 101)) | (1 << (cppParser.OrAssign - 101)) | (1 << (cppParser.LeftShiftAssign - 101)) | (1 << (cppParser.RightShiftAssign - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = cppParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.assignmentExpression()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 826
                self.match(cppParser.Comma)
                self.state = 827
                self.assignmentExpression()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(cppParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = cppParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(cppParser.LabeledStatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(cppParser.DeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(cppParser.ExpressionStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(cppParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(cppParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(cppParser.JumpStatementContext,0)


        def tryBlock(self):
            return self.getTypedRuleContext(cppParser.TryBlockContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = cppParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_statement)
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 837
                    self.attributeSpecifierSeq()


                self.state = 846
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.Alignof, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Const_cast, cppParser.Decltype, cppParser.Delete, cppParser.Double, cppParser.Dynamic_cast, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.New, cppParser.Noexcept, cppParser.Operator, cppParser.Reinterpret_cast, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static_cast, cppParser.This, cppParser.Throw, cppParser.Typeid_, cppParser.Typename_, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Doublecolon, cppParser.Semi, cppParser.Identifier]:
                    self.state = 840
                    self.expressionStatement()
                    pass
                elif token in [cppParser.LeftBrace]:
                    self.state = 841
                    self.compoundStatement()
                    pass
                elif token in [cppParser.If, cppParser.Switch]:
                    self.state = 842
                    self.selectionStatement()
                    pass
                elif token in [cppParser.Do, cppParser.For, cppParser.While]:
                    self.state = 843
                    self.iterationStatement()
                    pass
                elif token in [cppParser.Break, cppParser.Continue, cppParser.Goto, cppParser.Return]:
                    self.state = 844
                    self.jumpStatement()
                    pass
                elif token in [cppParser.Try]:
                    self.state = 845
                    self.tryBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(cppParser.StatementContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def Case(self):
            return self.getToken(cppParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(cppParser.Default, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = cppParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 850
                self.attributeSpecifierSeq()


            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Identifier]:
                self.state = 853
                self.match(cppParser.Identifier)
                pass
            elif token in [cppParser.Case]:
                self.state = 854
                self.match(cppParser.Case)
                self.state = 855
                self.constantExpression()
                pass
            elif token in [cppParser.Default]:
                self.state = 856
                self.match(cppParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 859
            self.match(cppParser.Colon)
            self.state = 860
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = cppParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                self.state = 862
                self.expression()


            self.state = 865
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def statementSeq(self):
            return self.getTypedRuleContext(cppParser.StatementSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = cppParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(cppParser.LeftBrace)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignas) | (1 << cppParser.Alignof) | (1 << cppParser.Asm) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Break) | (1 << cppParser.Case) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Constexpr) | (1 << cppParser.Const_cast) | (1 << cppParser.Continue) | (1 << cppParser.Decltype) | (1 << cppParser.Default) | (1 << cppParser.Delete) | (1 << cppParser.Do) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Enum) | (1 << cppParser.Explicit) | (1 << cppParser.Extern) | (1 << cppParser.Float) | (1 << cppParser.For) | (1 << cppParser.Friend) | (1 << cppParser.Goto) | (1 << cppParser.If) | (1 << cppParser.Inline) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.Mutable) | (1 << cppParser.Namespace) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Register) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Return) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof) | (1 << cppParser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cppParser.Static_assert - 64)) | (1 << (cppParser.Static_cast - 64)) | (1 << (cppParser.Struct - 64)) | (1 << (cppParser.Switch - 64)) | (1 << (cppParser.This - 64)) | (1 << (cppParser.Thread_local - 64)) | (1 << (cppParser.Throw - 64)) | (1 << (cppParser.Try - 64)) | (1 << (cppParser.Typedef - 64)) | (1 << (cppParser.Typeid_ - 64)) | (1 << (cppParser.Typename_ - 64)) | (1 << (cppParser.Union - 64)) | (1 << (cppParser.Unsigned - 64)) | (1 << (cppParser.Using - 64)) | (1 << (cppParser.Virtual - 64)) | (1 << (cppParser.Void - 64)) | (1 << (cppParser.Volatile - 64)) | (1 << (cppParser.Wchar - 64)) | (1 << (cppParser.While - 64)) | (1 << (cppParser.LeftParen - 64)) | (1 << (cppParser.LeftBracket - 64)) | (1 << (cppParser.LeftBrace - 64)) | (1 << (cppParser.Plus - 64)) | (1 << (cppParser.Minus - 64)) | (1 << (cppParser.Star - 64)) | (1 << (cppParser.And - 64)) | (1 << (cppParser.Or - 64)) | (1 << (cppParser.Tilde - 64)) | (1 << (cppParser.Not - 64)) | (1 << (cppParser.AndAnd - 64)) | (1 << (cppParser.PlusPlus - 64)) | (1 << (cppParser.MinusMinus - 64)) | (1 << (cppParser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cppParser.Semi - 128)) | (1 << (cppParser.Ellipsis - 128)) | (1 << (cppParser.Identifier - 128)))) != 0):
                self.state = 868
                self.statementSeq()


            self.state = 871
            self.match(cppParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.StatementContext)
            else:
                return self.getTypedRuleContext(cppParser.StatementContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_statementSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSeq" ):
                listener.enterStatementSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSeq" ):
                listener.exitStatementSeq(self)




    def statementSeq(self):

        localctx = cppParser.StatementSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_statementSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 873
                self.statement()
                self.state = 876 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignas) | (1 << cppParser.Alignof) | (1 << cppParser.Asm) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Break) | (1 << cppParser.Case) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Constexpr) | (1 << cppParser.Const_cast) | (1 << cppParser.Continue) | (1 << cppParser.Decltype) | (1 << cppParser.Default) | (1 << cppParser.Delete) | (1 << cppParser.Do) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Enum) | (1 << cppParser.Explicit) | (1 << cppParser.Extern) | (1 << cppParser.Float) | (1 << cppParser.For) | (1 << cppParser.Friend) | (1 << cppParser.Goto) | (1 << cppParser.If) | (1 << cppParser.Inline) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.Mutable) | (1 << cppParser.Namespace) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Register) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Return) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof) | (1 << cppParser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cppParser.Static_assert - 64)) | (1 << (cppParser.Static_cast - 64)) | (1 << (cppParser.Struct - 64)) | (1 << (cppParser.Switch - 64)) | (1 << (cppParser.This - 64)) | (1 << (cppParser.Thread_local - 64)) | (1 << (cppParser.Throw - 64)) | (1 << (cppParser.Try - 64)) | (1 << (cppParser.Typedef - 64)) | (1 << (cppParser.Typeid_ - 64)) | (1 << (cppParser.Typename_ - 64)) | (1 << (cppParser.Union - 64)) | (1 << (cppParser.Unsigned - 64)) | (1 << (cppParser.Using - 64)) | (1 << (cppParser.Virtual - 64)) | (1 << (cppParser.Void - 64)) | (1 << (cppParser.Volatile - 64)) | (1 << (cppParser.Wchar - 64)) | (1 << (cppParser.While - 64)) | (1 << (cppParser.LeftParen - 64)) | (1 << (cppParser.LeftBracket - 64)) | (1 << (cppParser.LeftBrace - 64)) | (1 << (cppParser.Plus - 64)) | (1 << (cppParser.Minus - 64)) | (1 << (cppParser.Star - 64)) | (1 << (cppParser.And - 64)) | (1 << (cppParser.Or - 64)) | (1 << (cppParser.Tilde - 64)) | (1 << (cppParser.Not - 64)) | (1 << (cppParser.AndAnd - 64)) | (1 << (cppParser.PlusPlus - 64)) | (1 << (cppParser.MinusMinus - 64)) | (1 << (cppParser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cppParser.Semi - 128)) | (1 << (cppParser.Ellipsis - 128)) | (1 << (cppParser.Identifier - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(cppParser.If, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(cppParser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.StatementContext)
            else:
                return self.getTypedRuleContext(cppParser.StatementContext,i)


        def Else(self):
            return self.getToken(cppParser.Else, 0)

        def Switch(self):
            return self.getToken(cppParser.Switch, 0)

        def getRuleIndex(self):
            return cppParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = cppParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectionStatement)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(cppParser.If)
                self.state = 879
                self.match(cppParser.LeftParen)
                self.state = 880
                self.condition()
                self.state = 881
                self.match(cppParser.RightParen)
                self.state = 882
                self.statement()
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 883
                    self.match(cppParser.Else)
                    self.state = 884
                    self.statement()


                pass
            elif token in [cppParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.match(cppParser.Switch)
                self.state = 888
                self.match(cppParser.LeftParen)
                self.state = 889
                self.condition()
                self.state = 890
                self.match(cppParser.RightParen)
                self.state = 891
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(cppParser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = cppParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                    self.state = 896
                    self.attributeSpecifierSeq()


                self.state = 899
                self.declSpecifierSeq()
                self.state = 900
                self.declarator()
                self.state = 904
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.Assign]:
                    self.state = 901
                    self.match(cppParser.Assign)
                    self.state = 902
                    self.initializerClause()
                    pass
                elif token in [cppParser.LeftBrace]:
                    self.state = 903
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(cppParser.While, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(cppParser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(cppParser.StatementContext,0)


        def Do(self):
            return self.getToken(cppParser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def For(self):
            return self.getToken(cppParser.For, 0)

        def forInitStatement(self):
            return self.getTypedRuleContext(cppParser.ForInitStatementContext,0)


        def forRangeDeclaration(self):
            return self.getTypedRuleContext(cppParser.ForRangeDeclarationContext,0)


        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def forRangeInitializer(self):
            return self.getTypedRuleContext(cppParser.ForRangeInitializerContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = cppParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.match(cppParser.While)
                self.state = 909
                self.match(cppParser.LeftParen)
                self.state = 910
                self.condition()
                self.state = 911
                self.match(cppParser.RightParen)
                self.state = 912
                self.statement()
                pass
            elif token in [cppParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(cppParser.Do)
                self.state = 915
                self.statement()
                self.state = 916
                self.match(cppParser.While)
                self.state = 917
                self.match(cppParser.LeftParen)
                self.state = 918
                self.expression()
                self.state = 919
                self.match(cppParser.RightParen)
                self.state = 920
                self.match(cppParser.Semi)
                pass
            elif token in [cppParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 922
                self.match(cppParser.For)
                self.state = 923
                self.match(cppParser.LeftParen)
                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.forInitStatement()
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignas) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Constexpr) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Enum) | (1 << cppParser.Explicit) | (1 << cppParser.Extern) | (1 << cppParser.Float) | (1 << cppParser.Friend) | (1 << cppParser.Inline) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.Mutable) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Register) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof) | (1 << cppParser.Static))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.Struct - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Thread_local - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typedef - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Union - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Virtual - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Volatile - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                        self.state = 925
                        self.condition()


                    self.state = 928
                    self.match(cppParser.Semi)
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                        self.state = 929
                        self.expression()


                    pass

                elif la_ == 2:
                    self.state = 932
                    self.forRangeDeclaration()
                    self.state = 933
                    self.match(cppParser.Colon)
                    self.state = 934
                    self.forRangeInitializer()
                    pass


                self.state = 938
                self.match(cppParser.RightParen)
                self.state = 939
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(cppParser.ExpressionStatementContext,0)


        def simpleDeclaration(self):
            return self.getTypedRuleContext(cppParser.SimpleDeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_forInitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInitStatement" ):
                listener.enterForInitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInitStatement" ):
                listener.exitForInitStatement(self)




    def forInitStatement(self):

        localctx = cppParser.ForInitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forInitStatement)
        try:
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.simpleDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForRangeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_forRangeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForRangeDeclaration" ):
                listener.enterForRangeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForRangeDeclaration" ):
                listener.exitForRangeDeclaration(self)




    def forRangeDeclaration(self):

        localctx = cppParser.ForRangeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forRangeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 947
                self.attributeSpecifierSeq()


            self.state = 950
            self.declSpecifierSeq()
            self.state = 951
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForRangeInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_forRangeInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForRangeInitializer" ):
                listener.enterForRangeInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForRangeInitializer" ):
                listener.exitForRangeInitializer(self)




    def forRangeInitializer(self):

        localctx = cppParser.ForRangeInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forRangeInitializer)
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.Alignof, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Const_cast, cppParser.Decltype, cppParser.Delete, cppParser.Double, cppParser.Dynamic_cast, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.New, cppParser.Noexcept, cppParser.Operator, cppParser.Reinterpret_cast, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static_cast, cppParser.This, cppParser.Throw, cppParser.Typeid_, cppParser.Typename_, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.expression()
                pass
            elif token in [cppParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def Break(self):
            return self.getToken(cppParser.Break, 0)

        def Continue(self):
            return self.getToken(cppParser.Continue, 0)

        def Return(self):
            return self.getToken(cppParser.Return, 0)

        def Goto(self):
            return self.getToken(cppParser.Goto, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = cppParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_jumpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Break]:
                self.state = 957
                self.match(cppParser.Break)
                pass
            elif token in [cppParser.Continue]:
                self.state = 958
                self.match(cppParser.Continue)
                pass
            elif token in [cppParser.Return]:
                self.state = 959
                self.match(cppParser.Return)
                self.state = 962
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.Alignof, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Const_cast, cppParser.Decltype, cppParser.Delete, cppParser.Double, cppParser.Dynamic_cast, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.New, cppParser.Noexcept, cppParser.Operator, cppParser.Reinterpret_cast, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static_cast, cppParser.This, cppParser.Throw, cppParser.Typeid_, cppParser.Typename_, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Doublecolon, cppParser.Identifier]:
                    self.state = 960
                    self.expression()
                    pass
                elif token in [cppParser.LeftBrace]:
                    self.state = 961
                    self.bracedInitList()
                    pass
                elif token in [cppParser.Semi]:
                    pass
                else:
                    pass
                pass
            elif token in [cppParser.Goto]:
                self.state = 964
                self.match(cppParser.Goto)
                self.state = 965
                self.match(cppParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 968
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockDeclaration(self):
            return self.getTypedRuleContext(cppParser.BlockDeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = cppParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.blockDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(cppParser.DeclarationContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)




    def declarationseq(self):

        localctx = cppParser.DeclarationseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationseq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 972
                self.declaration()
                self.state = 975 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Asm - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Namespace - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockDeclaration(self):
            return self.getTypedRuleContext(cppParser.BlockDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(cppParser.FunctionDefinitionContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(cppParser.TemplateDeclarationContext,0)


        def explicitInstantiation(self):
            return self.getTypedRuleContext(cppParser.ExplicitInstantiationContext,0)


        def explicitSpecialization(self):
            return self.getTypedRuleContext(cppParser.ExplicitSpecializationContext,0)


        def linkageSpecification(self):
            return self.getTypedRuleContext(cppParser.LinkageSpecificationContext,0)


        def namespaceDefinition(self):
            return self.getTypedRuleContext(cppParser.NamespaceDefinitionContext,0)


        def emptyDeclaration_(self):
            return self.getTypedRuleContext(cppParser.EmptyDeclaration_Context,0)


        def attributeDeclaration(self):
            return self.getTypedRuleContext(cppParser.AttributeDeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = cppParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_declaration)
        try:
            self.state = 986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.blockDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.templateDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 980
                self.explicitInstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 981
                self.explicitSpecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 982
                self.linkageSpecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 983
                self.namespaceDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 984
                self.emptyDeclaration_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 985
                self.attributeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDeclaration(self):
            return self.getTypedRuleContext(cppParser.SimpleDeclarationContext,0)


        def asmDefinition(self):
            return self.getTypedRuleContext(cppParser.AsmDefinitionContext,0)


        def namespaceAliasDefinition(self):
            return self.getTypedRuleContext(cppParser.NamespaceAliasDefinitionContext,0)


        def usingDeclaration(self):
            return self.getTypedRuleContext(cppParser.UsingDeclarationContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(cppParser.UsingDirectiveContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(cppParser.StaticAssertDeclarationContext,0)


        def aliasDeclaration(self):
            return self.getTypedRuleContext(cppParser.AliasDeclarationContext,0)


        def opaqueEnumDeclaration(self):
            return self.getTypedRuleContext(cppParser.OpaqueEnumDeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_blockDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockDeclaration" ):
                listener.enterBlockDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockDeclaration" ):
                listener.exitBlockDeclaration(self)




    def blockDeclaration(self):

        localctx = cppParser.BlockDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_blockDeclaration)
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.simpleDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.asmDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.namespaceAliasDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 991
                self.usingDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 992
                self.usingDirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 993
                self.staticAssertDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 994
                self.aliasDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 995
                self.opaqueEnumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(cppParser.Using, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_aliasDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclaration" ):
                listener.enterAliasDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclaration" ):
                listener.exitAliasDeclaration(self)




    def aliasDeclaration(self):

        localctx = cppParser.AliasDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_aliasDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(cppParser.Using)
            self.state = 999
            self.match(cppParser.Identifier)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1000
                self.attributeSpecifierSeq()


            self.state = 1003
            self.match(cppParser.Assign)
            self.state = 1004
            self.theTypeId()
            self.state = 1005
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(cppParser.InitDeclaratorListContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_simpleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDeclaration" ):
                listener.enterSimpleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDeclaration" ):
                listener.exitSimpleDeclaration(self)




    def simpleDeclaration(self):

        localctx = cppParser.SimpleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simpleDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Constexpr, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Explicit, cppParser.Extern, cppParser.Float, cppParser.Friend, cppParser.Inline, cppParser.Int, cppParser.Long, cppParser.Mutable, cppParser.Operator, cppParser.Register, cppParser.Short, cppParser.Signed, cppParser.Static, cppParser.Struct, cppParser.Thread_local, cppParser.Typedef, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Virtual, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.LeftParen, cppParser.Star, cppParser.And, cppParser.Tilde, cppParser.AndAnd, cppParser.Doublecolon, cppParser.Semi, cppParser.Ellipsis, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1007
                    self.declSpecifierSeq()


                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Decltype or _la==cppParser.Operator or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (cppParser.LeftParen - 85)) | (1 << (cppParser.Star - 85)) | (1 << (cppParser.And - 85)) | (1 << (cppParser.Tilde - 85)) | (1 << (cppParser.AndAnd - 85)) | (1 << (cppParser.Doublecolon - 85)) | (1 << (cppParser.Ellipsis - 85)) | (1 << (cppParser.Identifier - 85)))) != 0):
                    self.state = 1010
                    self.initDeclaratorList()


                self.state = 1013
                self.match(cppParser.Semi)
                pass
            elif token in [cppParser.Alignas, cppParser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.attributeSpecifierSeq()
                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.declSpecifierSeq()


                self.state = 1018
                self.initDeclaratorList()
                self.state = 1019
                self.match(cppParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(cppParser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def StringLiteral(self):
            return self.getToken(cppParser.StringLiteral, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def getRuleIndex(self):
            return cppParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = cppParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_staticAssertDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(cppParser.Static_assert)
            self.state = 1024
            self.match(cppParser.LeftParen)
            self.state = 1025
            self.constantExpression()
            self.state = 1026
            self.match(cppParser.Comma)
            self.state = 1027
            self.match(cppParser.StringLiteral)
            self.state = 1028
            self.match(cppParser.RightParen)
            self.state = 1029
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyDeclaration_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def getRuleIndex(self):
            return cppParser.RULE_emptyDeclaration_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyDeclaration_" ):
                listener.enterEmptyDeclaration_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyDeclaration_" ):
                listener.exitEmptyDeclaration_(self)




    def emptyDeclaration_(self):

        localctx = cppParser.EmptyDeclaration_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_emptyDeclaration_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def getRuleIndex(self):
            return cppParser.RULE_attributeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeDeclaration" ):
                listener.enterAttributeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeDeclaration" ):
                listener.exitAttributeDeclaration(self)




    def attributeDeclaration(self):

        localctx = cppParser.AttributeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attributeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.attributeSpecifierSeq()
            self.state = 1034
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(cppParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(cppParser.FunctionSpecifierContext,0)


        def Friend(self):
            return self.getToken(cppParser.Friend, 0)

        def Typedef(self):
            return self.getToken(cppParser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(cppParser.Constexpr, 0)

        def getRuleIndex(self):
            return cppParser.RULE_declSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclSpecifier" ):
                listener.enterDeclSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclSpecifier" ):
                listener.exitDeclSpecifier(self)




    def declSpecifier(self):

        localctx = cppParser.DeclSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_declSpecifier)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Extern, cppParser.Mutable, cppParser.Register, cppParser.Static, cppParser.Thread_local]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.storageClassSpecifier()
                pass
            elif token in [cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.Short, cppParser.Signed, cppParser.Struct, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1037
                self.typeSpecifier()
                pass
            elif token in [cppParser.Explicit, cppParser.Inline, cppParser.Virtual]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1038
                self.functionSpecifier()
                pass
            elif token in [cppParser.Friend]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1039
                self.match(cppParser.Friend)
                pass
            elif token in [cppParser.Typedef]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1040
                self.match(cppParser.Typedef)
                pass
            elif token in [cppParser.Constexpr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1041
                self.match(cppParser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.DeclSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.DeclSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_declSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclSpecifierSeq" ):
                listener.enterDeclSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclSpecifierSeq" ):
                listener.exitDeclSpecifierSeq(self)




    def declSpecifierSeq(self):

        localctx = cppParser.DeclSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1044
                    self.declSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1047 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(cppParser.Register, 0)

        def Static(self):
            return self.getToken(cppParser.Static, 0)

        def Thread_local(self):
            return self.getToken(cppParser.Thread_local, 0)

        def Extern(self):
            return self.getToken(cppParser.Extern, 0)

        def Mutable(self):
            return self.getToken(cppParser.Mutable, 0)

        def getRuleIndex(self):
            return cppParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = cppParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            _la = self._input.LA(1)
            if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (cppParser.Extern - 36)) | (1 << (cppParser.Mutable - 36)) | (1 << (cppParser.Register - 36)) | (1 << (cppParser.Static - 36)) | (1 << (cppParser.Thread_local - 36)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(cppParser.Inline, 0)

        def Virtual(self):
            return self.getToken(cppParser.Virtual, 0)

        def Explicit(self):
            return self.getToken(cppParser.Explicit, 0)

        def getRuleIndex(self):
            return cppParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = cppParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & ((1 << (cppParser.Explicit - 34)) | (1 << (cppParser.Inline - 34)) | (1 << (cppParser.Virtual - 34)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = cppParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingTypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.TrailingTypeSpecifierContext,0)


        def classSpecifier(self):
            return self.getTypedRuleContext(cppParser.ClassSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(cppParser.EnumSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = cppParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typeSpecifier)
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.trailingTypeSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.classSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.enumSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.SimpleTypeSpecifierContext,0)


        def elaboratedTypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.ElaboratedTypeSpecifierContext,0)


        def typeNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.TypeNameSpecifierContext,0)


        def cvQualifier(self):
            return self.getTypedRuleContext(cppParser.CvQualifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_trailingTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingTypeSpecifier" ):
                listener.enterTrailingTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingTypeSpecifier" ):
                listener.exitTrailingTypeSpecifier(self)




    def trailingTypeSpecifier(self):

        localctx = cppParser.TrailingTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trailingTypeSpecifier)
        try:
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Decltype, cppParser.Double, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.Short, cppParser.Signed, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.simpleTypeSpecifier()
                pass
            elif token in [cppParser.Class, cppParser.Enum, cppParser.Struct]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.elaboratedTypeSpecifier()
                pass
            elif token in [cppParser.Typename_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.typeNameSpecifier()
                pass
            elif token in [cppParser.Const, cppParser.Volatile]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1066
                self.cvQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.TypeSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_typeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifierSeq" ):
                listener.enterTypeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifierSeq" ):
                listener.exitTypeSpecifierSeq(self)




    def typeSpecifierSeq(self):

        localctx = cppParser.TypeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1069
                    self.typeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1072 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingTypeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingTypeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TrailingTypeSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.TrailingTypeSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_trailingTypeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingTypeSpecifierSeq" ):
                listener.enterTrailingTypeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingTypeSpecifierSeq" ):
                listener.exitTrailingTypeSpecifierSeq(self)




    def trailingTypeSpecifierSeq(self):

        localctx = cppParser.TrailingTypeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_trailingTypeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1077
                    self.trailingTypeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1080 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1082
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleTypeLengthModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Short(self):
            return self.getToken(cppParser.Short, 0)

        def Long(self):
            return self.getToken(cppParser.Long, 0)

        def getRuleIndex(self):
            return cppParser.RULE_simpleTypeLengthModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeLengthModifier" ):
                listener.enterSimpleTypeLengthModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeLengthModifier" ):
                listener.exitSimpleTypeLengthModifier(self)




    def simpleTypeLengthModifier(self):

        localctx = cppParser.SimpleTypeLengthModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_simpleTypeLengthModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            _la = self._input.LA(1)
            if not(_la==cppParser.Long or _la==cppParser.Short):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleTypeSignednessModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unsigned(self):
            return self.getToken(cppParser.Unsigned, 0)

        def Signed(self):
            return self.getToken(cppParser.Signed, 0)

        def getRuleIndex(self):
            return cppParser.RULE_simpleTypeSignednessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeSignednessModifier" ):
                listener.enterSimpleTypeSignednessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeSignednessModifier" ):
                listener.exitSimpleTypeSignednessModifier(self)




    def simpleTypeSignednessModifier(self):

        localctx = cppParser.SimpleTypeSignednessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpleTypeSignednessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            _la = self._input.LA(1)
            if not(_la==cppParser.Signed or _la==cppParser.Unsigned):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeName(self):
            return self.getTypedRuleContext(cppParser.TheTypeNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def Char(self):
            return self.getToken(cppParser.Char, 0)

        def Char16(self):
            return self.getToken(cppParser.Char16, 0)

        def Char32(self):
            return self.getToken(cppParser.Char32, 0)

        def Wchar(self):
            return self.getToken(cppParser.Wchar, 0)

        def Bool(self):
            return self.getToken(cppParser.Bool, 0)

        def Short(self):
            return self.getToken(cppParser.Short, 0)

        def Int(self):
            return self.getToken(cppParser.Int, 0)

        def Long(self):
            return self.getToken(cppParser.Long, 0)

        def Float(self):
            return self.getToken(cppParser.Float, 0)

        def Signed(self):
            return self.getToken(cppParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(cppParser.Unsigned, 0)

        def Double(self):
            return self.getToken(cppParser.Double, 0)

        def Void(self):
            return self.getToken(cppParser.Void, 0)

        def Auto(self):
            return self.getToken(cppParser.Auto, 0)

        def decltypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_simpleTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeSpecifier" ):
                listener.enterSimpleTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeSpecifier" ):
                listener.exitSimpleTypeSpecifier(self)




    def simpleTypeSpecifier(self):

        localctx = cppParser.SimpleTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_simpleTypeSpecifier)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1089
                    self.nestedNameSpecifier(0)


                self.state = 1092
                self.theTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.nestedNameSpecifier(0)
                self.state = 1094
                self.match(cppParser.Template)
                self.state = 1095
                self.simpleTemplateId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1097
                self.match(cppParser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1098
                self.match(cppParser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1099
                self.match(cppParser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1100
                self.match(cppParser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1101
                self.match(cppParser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1102
                self.match(cppParser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1103
                self.match(cppParser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1104
                self.match(cppParser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1105
                self.match(cppParser.Float)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1106
                self.match(cppParser.Signed)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1107
                self.match(cppParser.Unsigned)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1108
                self.match(cppParser.Float)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1109
                self.match(cppParser.Double)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1110
                self.match(cppParser.Void)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1111
                self.match(cppParser.Auto)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1112
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(cppParser.ClassNameContext,0)


        def enumName(self):
            return self.getTypedRuleContext(cppParser.EnumNameContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(cppParser.TypedefNameContext,0)


        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_theTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheTypeName" ):
                listener.enterTheTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheTypeName" ):
                listener.exitTheTypeName(self)




    def theTypeName(self):

        localctx = cppParser.TheTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_theTypeName)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1116
                self.enumName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1117
                self.typedefName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1118
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(cppParser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cppParser.ExpressionContext,0)


        def Auto(self):
            return self.getToken(cppParser.Auto, 0)

        def getRuleIndex(self):
            return cppParser.RULE_decltypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypeSpecifier" ):
                listener.enterDecltypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypeSpecifier" ):
                listener.exitDecltypeSpecifier(self)




    def decltypeSpecifier(self):

        localctx = cppParser.DecltypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_decltypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(cppParser.Decltype)
            self.state = 1122
            self.match(cppParser.LeftParen)
            self.state = 1125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1123
                self.expression()
                pass

            elif la_ == 2:
                self.state = 1124
                self.match(cppParser.Auto)
                pass


            self.state = 1127
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElaboratedTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classKey(self):
            return self.getTypedRuleContext(cppParser.ClassKeyContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def Enum(self):
            return self.getToken(cppParser.Enum, 0)

        def getRuleIndex(self):
            return cppParser.RULE_elaboratedTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedTypeSpecifier" ):
                listener.enterElaboratedTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedTypeSpecifier" ):
                listener.exitElaboratedTypeSpecifier(self)




    def elaboratedTypeSpecifier(self):

        localctx = cppParser.ElaboratedTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_elaboratedTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Class, cppParser.Struct]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.classKey()
                self.state = 1144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                        self.state = 1130
                        self.attributeSpecifierSeq()


                    self.state = 1134
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        self.state = 1133
                        self.nestedNameSpecifier(0)


                    self.state = 1136
                    self.match(cppParser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1137
                    self.simpleTemplateId()
                    pass

                elif la_ == 3:
                    self.state = 1138
                    self.nestedNameSpecifier(0)
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Template:
                        self.state = 1139
                        self.match(cppParser.Template)


                    self.state = 1142
                    self.simpleTemplateId()
                    pass


                pass
            elif token in [cppParser.Enum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(cppParser.Enum)
                self.state = 1148
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1147
                    self.nestedNameSpecifier(0)


                self.state = 1150
                self.match(cppParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_enumName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumName" ):
                listener.enterEnumName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumName" ):
                listener.exitEnumName(self)




    def enumName(self):

        localctx = cppParser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumHead(self):
            return self.getTypedRuleContext(cppParser.EnumHeadContext,0)


        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(cppParser.EnumeratorListContext,0)


        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def getRuleIndex(self):
            return cppParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = cppParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.enumHead()
            self.state = 1156
            self.match(cppParser.LeftBrace)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Identifier:
                self.state = 1157
                self.enumeratorList()
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Comma:
                    self.state = 1158
                    self.match(cppParser.Comma)




            self.state = 1163
            self.match(cppParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(cppParser.EnumkeyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(cppParser.EnumbaseContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_enumHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumHead" ):
                listener.enterEnumHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumHead" ):
                listener.exitEnumHead(self)




    def enumHead(self):

        localctx = cppParser.EnumHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_enumHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.enumkey()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1166
                self.attributeSpecifierSeq()


            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Decltype or _la==cppParser.Doublecolon or _la==cppParser.Identifier:
                self.state = 1170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1169
                    self.nestedNameSpecifier(0)


                self.state = 1172
                self.match(cppParser.Identifier)


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Colon:
                self.state = 1175
                self.enumbase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpaqueEnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(cppParser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(cppParser.EnumbaseContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_opaqueEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueEnumDeclaration" ):
                listener.enterOpaqueEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueEnumDeclaration" ):
                listener.exitOpaqueEnumDeclaration(self)




    def opaqueEnumDeclaration(self):

        localctx = cppParser.OpaqueEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_opaqueEnumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.enumkey()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1179
                self.attributeSpecifierSeq()


            self.state = 1182
            self.match(cppParser.Identifier)
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Colon:
                self.state = 1183
                self.enumbase()


            self.state = 1186
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(cppParser.Enum, 0)

        def Class(self):
            return self.getToken(cppParser.Class, 0)

        def Struct(self):
            return self.getToken(cppParser.Struct, 0)

        def getRuleIndex(self):
            return cppParser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)




    def enumkey(self):

        localctx = cppParser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(cppParser.Enum)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Class or _la==cppParser.Struct:
                self.state = 1189
                _la = self._input.LA(1)
                if not(_la==cppParser.Class or _la==cppParser.Struct):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)




    def enumbase(self):

        localctx = cppParser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(cppParser.Colon)
            self.state = 1193
            self.typeSpecifierSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.EnumeratorDefinitionContext)
            else:
                return self.getTypedRuleContext(cppParser.EnumeratorDefinitionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = cppParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.enumeratorDefinition()
            self.state = 1200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1196
                    self.match(cppParser.Comma)
                    self.state = 1197
                    self.enumeratorDefinition() 
                self.state = 1202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(cppParser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_enumeratorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorDefinition" ):
                listener.enterEnumeratorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorDefinition" ):
                listener.exitEnumeratorDefinition(self)




    def enumeratorDefinition(self):

        localctx = cppParser.EnumeratorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumeratorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.enumerator()
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Assign:
                self.state = 1204
                self.match(cppParser.Assign)
                self.state = 1205
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = cppParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalNamespaceName(self):
            return self.getTypedRuleContext(cppParser.OriginalNamespaceNameContext,0)


        def namespaceAlias(self):
            return self.getTypedRuleContext(cppParser.NamespaceAliasContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_namespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceName" ):
                listener.enterNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceName" ):
                listener.exitNamespaceName(self)




    def namespaceName(self):

        localctx = cppParser.NamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_namespaceName)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.originalNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.namespaceAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OriginalNamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_originalNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalNamespaceName" ):
                listener.enterOriginalNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalNamespaceName" ):
                listener.exitOriginalNamespaceName(self)




    def originalNamespaceName(self):

        localctx = cppParser.OriginalNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_originalNamespaceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.namespaceBody = None # DeclarationseqContext

        def Namespace(self):
            return self.getToken(cppParser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def Inline(self):
            return self.getToken(cppParser.Inline, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def originalNamespaceName(self):
            return self.getTypedRuleContext(cppParser.OriginalNamespaceNameContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(cppParser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_namespaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDefinition" ):
                listener.enterNamespaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDefinition" ):
                listener.exitNamespaceDefinition(self)




    def namespaceDefinition(self):

        localctx = cppParser.NamespaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namespaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Inline:
                self.state = 1216
                self.match(cppParser.Inline)


            self.state = 1219
            self.match(cppParser.Namespace)
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1220
                self.match(cppParser.Identifier)

            elif la_ == 2:
                self.state = 1221
                self.originalNamespaceName()


            self.state = 1224
            self.match(cppParser.LeftBrace)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Asm - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Namespace - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                self.state = 1225
                localctx.namespaceBody = self.declarationseq()


            self.state = 1228
            self.match(cppParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_namespaceAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceAlias" ):
                listener.enterNamespaceAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceAlias" ):
                listener.exitNamespaceAlias(self)




    def namespaceAlias(self):

        localctx = cppParser.NamespaceAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_namespaceAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceAliasDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(cppParser.Namespace, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(cppParser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def getRuleIndex(self):
            return cppParser.RULE_namespaceAliasDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceAliasDefinition" ):
                listener.enterNamespaceAliasDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceAliasDefinition" ):
                listener.exitNamespaceAliasDefinition(self)




    def namespaceAliasDefinition(self):

        localctx = cppParser.NamespaceAliasDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_namespaceAliasDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(cppParser.Namespace)
            self.state = 1233
            self.match(cppParser.Identifier)
            self.state = 1234
            self.match(cppParser.Assign)
            self.state = 1235
            self.qualifiednamespacespecifier()
            self.state = 1236
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceName(self):
            return self.getTypedRuleContext(cppParser.NamespaceNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)




    def qualifiednamespacespecifier(self):

        localctx = cppParser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1238
                self.nestedNameSpecifier(0)


            self.state = 1241
            self.namespaceName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(cppParser.Using, 0)

        def unqualifiedId(self):
            return self.getTypedRuleContext(cppParser.UnqualifiedIdContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def Typename_(self):
            return self.getToken(cppParser.Typename_, 0)

        def getRuleIndex(self):
            return cppParser.RULE_usingDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDeclaration" ):
                listener.enterUsingDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDeclaration" ):
                listener.exitUsingDeclaration(self)




    def usingDeclaration(self):

        localctx = cppParser.UsingDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_usingDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(cppParser.Using)
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Typename_:
                    self.state = 1244
                    self.match(cppParser.Typename_)


                self.state = 1247
                self.nestedNameSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 1248
                self.match(cppParser.Doublecolon)
                pass


            self.state = 1251
            self.unqualifiedId()
            self.state = 1252
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(cppParser.Using, 0)

        def Namespace(self):
            return self.getToken(cppParser.Namespace, 0)

        def namespaceName(self):
            return self.getTypedRuleContext(cppParser.NamespaceNameContext,0)


        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_usingDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDirective" ):
                listener.enterUsingDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDirective" ):
                listener.exitUsingDirective(self)




    def usingDirective(self):

        localctx = cppParser.UsingDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_usingDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1254
                self.attributeSpecifierSeq()


            self.state = 1257
            self.match(cppParser.Using)
            self.state = 1258
            self.match(cppParser.Namespace)
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.nestedNameSpecifier(0)


            self.state = 1262
            self.namespaceName()
            self.state = 1263
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(cppParser.Asm, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def StringLiteral(self):
            return self.getToken(cppParser.StringLiteral, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def getRuleIndex(self):
            return cppParser.RULE_asmDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmDefinition" ):
                listener.enterAsmDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmDefinition" ):
                listener.exitAsmDefinition(self)




    def asmDefinition(self):

        localctx = cppParser.AsmDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_asmDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(cppParser.Asm)
            self.state = 1266
            self.match(cppParser.LeftParen)
            self.state = 1267
            self.match(cppParser.StringLiteral)
            self.state = 1268
            self.match(cppParser.RightParen)
            self.state = 1269
            self.match(cppParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkageSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(cppParser.Extern, 0)

        def StringLiteral(self):
            return self.getToken(cppParser.StringLiteral, 0)

        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def declaration(self):
            return self.getTypedRuleContext(cppParser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(cppParser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_linkageSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkageSpecification" ):
                listener.enterLinkageSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkageSpecification" ):
                listener.exitLinkageSpecification(self)




    def linkageSpecification(self):

        localctx = cppParser.LinkageSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_linkageSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(cppParser.Extern)
            self.state = 1272
            self.match(cppParser.StringLiteral)
            self.state = 1279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftBrace]:
                self.state = 1273
                self.match(cppParser.LeftBrace)
                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Asm - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Namespace - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                    self.state = 1274
                    self.declarationseq()


                self.state = 1277
                self.match(cppParser.RightBrace)
                pass
            elif token in [cppParser.Alignas, cppParser.Asm, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Constexpr, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Explicit, cppParser.Extern, cppParser.Float, cppParser.Friend, cppParser.Inline, cppParser.Int, cppParser.Long, cppParser.Mutable, cppParser.Namespace, cppParser.Operator, cppParser.Register, cppParser.Short, cppParser.Signed, cppParser.Static, cppParser.Static_assert, cppParser.Struct, cppParser.Template, cppParser.Thread_local, cppParser.Typedef, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Using, cppParser.Virtual, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Star, cppParser.And, cppParser.Tilde, cppParser.AndAnd, cppParser.Doublecolon, cppParser.Semi, cppParser.Ellipsis, cppParser.Identifier]:
                self.state = 1278
                self.declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.AttributeSpecifierContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_attributeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifierSeq" ):
                listener.enterAttributeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifierSeq" ):
                listener.exitAttributeSpecifierSeq(self)




    def attributeSpecifierSeq(self):

        localctx = cppParser.AttributeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_attributeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1281
                    self.attributeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1284 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftBracket)
            else:
                return self.getToken(cppParser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightBracket)
            else:
                return self.getToken(cppParser.RightBracket, i)

        def attributeList(self):
            return self.getTypedRuleContext(cppParser.AttributeListContext,0)


        def alignmentspecifier(self):
            return self.getTypedRuleContext(cppParser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_attributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifier" ):
                listener.enterAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifier" ):
                listener.exitAttributeSpecifier(self)




    def attributeSpecifier(self):

        localctx = cppParser.AttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_attributeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.match(cppParser.LeftBracket)
                self.state = 1287
                self.match(cppParser.LeftBracket)
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Identifier:
                    self.state = 1288
                    self.attributeList()


                self.state = 1291
                self.match(cppParser.RightBracket)
                self.state = 1292
                self.match(cppParser.RightBracket)
                pass
            elif token in [cppParser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(cppParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cppParser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)




    def alignmentspecifier(self):

        localctx = cppParser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(cppParser.Alignas)
            self.state = 1297
            self.match(cppParser.LeftParen)
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1298
                self.theTypeId()
                pass

            elif la_ == 2:
                self.state = 1299
                self.constantExpression()
                pass


            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1302
                self.match(cppParser.Ellipsis)


            self.state = 1305
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AttributeContext)
            else:
                return self.getTypedRuleContext(cppParser.AttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cppParser.RULE_attributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeList" ):
                listener.enterAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeList" ):
                listener.exitAttributeList(self)




    def attributeList(self):

        localctx = cppParser.AttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_attributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.attribute()
            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1308
                self.match(cppParser.Comma)
                self.state = 1309
                self.attribute()
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1315
                self.match(cppParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def attributeNamespace(self):
            return self.getTypedRuleContext(cppParser.AttributeNamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(cppParser.Doublecolon, 0)

        def attributeArgumentClause(self):
            return self.getTypedRuleContext(cppParser.AttributeArgumentClauseContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = cppParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1318
                self.attributeNamespace()
                self.state = 1319
                self.match(cppParser.Doublecolon)


            self.state = 1323
            self.match(cppParser.Identifier)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.LeftParen:
                self.state = 1324
                self.attributeArgumentClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeNamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_attributeNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamespace" ):
                listener.enterAttributeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamespace" ):
                listener.exitAttributeNamespace(self)




    def attributeNamespace(self):

        localctx = cppParser.AttributeNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributeNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeArgumentClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def balancedTokenSeq(self):
            return self.getTypedRuleContext(cppParser.BalancedTokenSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_attributeArgumentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeArgumentClause" ):
                listener.enterAttributeArgumentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeArgumentClause" ):
                listener.exitAttributeArgumentClause(self)




    def attributeArgumentClause(self):

        localctx = cppParser.AttributeArgumentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_attributeArgumentClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(cppParser.LeftParen)
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.MultiLineMacro) | (1 << cppParser.Directive) | (1 << cppParser.Alignas) | (1 << cppParser.Alignof) | (1 << cppParser.Asm) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Break) | (1 << cppParser.Case) | (1 << cppParser.Catch) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Constexpr) | (1 << cppParser.Const_cast) | (1 << cppParser.Continue) | (1 << cppParser.Decltype) | (1 << cppParser.Default) | (1 << cppParser.Delete) | (1 << cppParser.Do) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Else) | (1 << cppParser.Enum) | (1 << cppParser.Explicit) | (1 << cppParser.Export) | (1 << cppParser.Extern) | (1 << cppParser.False_) | (1 << cppParser.Final) | (1 << cppParser.Float) | (1 << cppParser.For) | (1 << cppParser.Friend) | (1 << cppParser.Goto) | (1 << cppParser.If) | (1 << cppParser.Inline) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.Mutable) | (1 << cppParser.Namespace) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Nullptr) | (1 << cppParser.Operator) | (1 << cppParser.Override) | (1 << cppParser.Private) | (1 << cppParser.Protected) | (1 << cppParser.Public) | (1 << cppParser.Register) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Return) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof) | (1 << cppParser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cppParser.Static_assert - 64)) | (1 << (cppParser.Static_cast - 64)) | (1 << (cppParser.Struct - 64)) | (1 << (cppParser.Switch - 64)) | (1 << (cppParser.Template - 64)) | (1 << (cppParser.This - 64)) | (1 << (cppParser.Thread_local - 64)) | (1 << (cppParser.Throw - 64)) | (1 << (cppParser.True_ - 64)) | (1 << (cppParser.Try - 64)) | (1 << (cppParser.Typedef - 64)) | (1 << (cppParser.Typeid_ - 64)) | (1 << (cppParser.Typename_ - 64)) | (1 << (cppParser.Union - 64)) | (1 << (cppParser.Unsigned - 64)) | (1 << (cppParser.Using - 64)) | (1 << (cppParser.Virtual - 64)) | (1 << (cppParser.Void - 64)) | (1 << (cppParser.Volatile - 64)) | (1 << (cppParser.Wchar - 64)) | (1 << (cppParser.While - 64)) | (1 << (cppParser.LeftParen - 64)) | (1 << (cppParser.LeftBracket - 64)) | (1 << (cppParser.LeftBrace - 64)) | (1 << (cppParser.Plus - 64)) | (1 << (cppParser.Minus - 64)) | (1 << (cppParser.Star - 64)) | (1 << (cppParser.Div - 64)) | (1 << (cppParser.Mod - 64)) | (1 << (cppParser.Caret - 64)) | (1 << (cppParser.And - 64)) | (1 << (cppParser.Or - 64)) | (1 << (cppParser.Tilde - 64)) | (1 << (cppParser.Not - 64)) | (1 << (cppParser.Assign - 64)) | (1 << (cppParser.Less - 64)) | (1 << (cppParser.Greater - 64)) | (1 << (cppParser.PlusAssign - 64)) | (1 << (cppParser.MinusAssign - 64)) | (1 << (cppParser.StarAssign - 64)) | (1 << (cppParser.DivAssign - 64)) | (1 << (cppParser.ModAssign - 64)) | (1 << (cppParser.XorAssign - 64)) | (1 << (cppParser.AndAssign - 64)) | (1 << (cppParser.OrAssign - 64)) | (1 << (cppParser.LeftShiftAssign - 64)) | (1 << (cppParser.RightShiftAssign - 64)) | (1 << (cppParser.Equal - 64)) | (1 << (cppParser.NotEqual - 64)) | (1 << (cppParser.LessEqual - 64)) | (1 << (cppParser.GreaterEqual - 64)) | (1 << (cppParser.AndAnd - 64)) | (1 << (cppParser.OrOr - 64)) | (1 << (cppParser.PlusPlus - 64)) | (1 << (cppParser.MinusMinus - 64)) | (1 << (cppParser.Comma - 64)) | (1 << (cppParser.ArrowStar - 64)) | (1 << (cppParser.Arrow - 64)) | (1 << (cppParser.Question - 64)) | (1 << (cppParser.Colon - 64)) | (1 << (cppParser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cppParser.Semi - 128)) | (1 << (cppParser.Dot - 128)) | (1 << (cppParser.DotStar - 128)) | (1 << (cppParser.Ellipsis - 128)) | (1 << (cppParser.Identifier - 128)) | (1 << (cppParser.DecimalLiteral - 128)) | (1 << (cppParser.OctalLiteral - 128)) | (1 << (cppParser.HexadecimalLiteral - 128)) | (1 << (cppParser.BinaryLiteral - 128)) | (1 << (cppParser.Integersuffix - 128)) | (1 << (cppParser.UserDefinedIntegerLiteral - 128)) | (1 << (cppParser.UserDefinedFloatingLiteral - 128)) | (1 << (cppParser.UserDefinedStringLiteral - 128)) | (1 << (cppParser.UserDefinedCharacterLiteral - 128)) | (1 << (cppParser.Whitespace - 128)) | (1 << (cppParser.Newline - 128)) | (1 << (cppParser.BlockComment - 128)) | (1 << (cppParser.LineComment - 128)))) != 0):
                self.state = 1330
                self.balancedTokenSeq()


            self.state = 1333
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedTokenSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(cppParser.BalancedtokenContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_balancedTokenSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedTokenSeq" ):
                listener.enterBalancedTokenSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedTokenSeq" ):
                listener.exitBalancedTokenSeq(self)




    def balancedTokenSeq(self):

        localctx = cppParser.BalancedTokenSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_balancedTokenSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1335
                self.balancedtoken()
                self.state = 1338 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.MultiLineMacro) | (1 << cppParser.Directive) | (1 << cppParser.Alignas) | (1 << cppParser.Alignof) | (1 << cppParser.Asm) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Break) | (1 << cppParser.Case) | (1 << cppParser.Catch) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Constexpr) | (1 << cppParser.Const_cast) | (1 << cppParser.Continue) | (1 << cppParser.Decltype) | (1 << cppParser.Default) | (1 << cppParser.Delete) | (1 << cppParser.Do) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Else) | (1 << cppParser.Enum) | (1 << cppParser.Explicit) | (1 << cppParser.Export) | (1 << cppParser.Extern) | (1 << cppParser.False_) | (1 << cppParser.Final) | (1 << cppParser.Float) | (1 << cppParser.For) | (1 << cppParser.Friend) | (1 << cppParser.Goto) | (1 << cppParser.If) | (1 << cppParser.Inline) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.Mutable) | (1 << cppParser.Namespace) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Nullptr) | (1 << cppParser.Operator) | (1 << cppParser.Override) | (1 << cppParser.Private) | (1 << cppParser.Protected) | (1 << cppParser.Public) | (1 << cppParser.Register) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Return) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof) | (1 << cppParser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cppParser.Static_assert - 64)) | (1 << (cppParser.Static_cast - 64)) | (1 << (cppParser.Struct - 64)) | (1 << (cppParser.Switch - 64)) | (1 << (cppParser.Template - 64)) | (1 << (cppParser.This - 64)) | (1 << (cppParser.Thread_local - 64)) | (1 << (cppParser.Throw - 64)) | (1 << (cppParser.True_ - 64)) | (1 << (cppParser.Try - 64)) | (1 << (cppParser.Typedef - 64)) | (1 << (cppParser.Typeid_ - 64)) | (1 << (cppParser.Typename_ - 64)) | (1 << (cppParser.Union - 64)) | (1 << (cppParser.Unsigned - 64)) | (1 << (cppParser.Using - 64)) | (1 << (cppParser.Virtual - 64)) | (1 << (cppParser.Void - 64)) | (1 << (cppParser.Volatile - 64)) | (1 << (cppParser.Wchar - 64)) | (1 << (cppParser.While - 64)) | (1 << (cppParser.LeftParen - 64)) | (1 << (cppParser.LeftBracket - 64)) | (1 << (cppParser.LeftBrace - 64)) | (1 << (cppParser.Plus - 64)) | (1 << (cppParser.Minus - 64)) | (1 << (cppParser.Star - 64)) | (1 << (cppParser.Div - 64)) | (1 << (cppParser.Mod - 64)) | (1 << (cppParser.Caret - 64)) | (1 << (cppParser.And - 64)) | (1 << (cppParser.Or - 64)) | (1 << (cppParser.Tilde - 64)) | (1 << (cppParser.Not - 64)) | (1 << (cppParser.Assign - 64)) | (1 << (cppParser.Less - 64)) | (1 << (cppParser.Greater - 64)) | (1 << (cppParser.PlusAssign - 64)) | (1 << (cppParser.MinusAssign - 64)) | (1 << (cppParser.StarAssign - 64)) | (1 << (cppParser.DivAssign - 64)) | (1 << (cppParser.ModAssign - 64)) | (1 << (cppParser.XorAssign - 64)) | (1 << (cppParser.AndAssign - 64)) | (1 << (cppParser.OrAssign - 64)) | (1 << (cppParser.LeftShiftAssign - 64)) | (1 << (cppParser.RightShiftAssign - 64)) | (1 << (cppParser.Equal - 64)) | (1 << (cppParser.NotEqual - 64)) | (1 << (cppParser.LessEqual - 64)) | (1 << (cppParser.GreaterEqual - 64)) | (1 << (cppParser.AndAnd - 64)) | (1 << (cppParser.OrOr - 64)) | (1 << (cppParser.PlusPlus - 64)) | (1 << (cppParser.MinusMinus - 64)) | (1 << (cppParser.Comma - 64)) | (1 << (cppParser.ArrowStar - 64)) | (1 << (cppParser.Arrow - 64)) | (1 << (cppParser.Question - 64)) | (1 << (cppParser.Colon - 64)) | (1 << (cppParser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cppParser.Semi - 128)) | (1 << (cppParser.Dot - 128)) | (1 << (cppParser.DotStar - 128)) | (1 << (cppParser.Ellipsis - 128)) | (1 << (cppParser.Identifier - 128)) | (1 << (cppParser.DecimalLiteral - 128)) | (1 << (cppParser.OctalLiteral - 128)) | (1 << (cppParser.HexadecimalLiteral - 128)) | (1 << (cppParser.BinaryLiteral - 128)) | (1 << (cppParser.Integersuffix - 128)) | (1 << (cppParser.UserDefinedIntegerLiteral - 128)) | (1 << (cppParser.UserDefinedFloatingLiteral - 128)) | (1 << (cppParser.UserDefinedStringLiteral - 128)) | (1 << (cppParser.UserDefinedCharacterLiteral - 128)) | (1 << (cppParser.Whitespace - 128)) | (1 << (cppParser.Newline - 128)) | (1 << (cppParser.BlockComment - 128)) | (1 << (cppParser.LineComment - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftParen)
            else:
                return self.getToken(cppParser.LeftParen, i)

        def balancedTokenSeq(self):
            return self.getTypedRuleContext(cppParser.BalancedTokenSeqContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightParen)
            else:
                return self.getToken(cppParser.RightParen, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftBracket)
            else:
                return self.getToken(cppParser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightBracket)
            else:
                return self.getToken(cppParser.RightBracket, i)

        def LeftBrace(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftBrace)
            else:
                return self.getToken(cppParser.LeftBrace, i)

        def RightBrace(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightBrace)
            else:
                return self.getToken(cppParser.RightBrace, i)

        def getRuleIndex(self):
            return cppParser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)




    def balancedtoken(self):

        localctx = cppParser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_balancedtoken)
        self._la = 0 # Token type
        try:
            self.state = 1357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.match(cppParser.LeftParen)
                self.state = 1341
                self.balancedTokenSeq()
                self.state = 1342
                self.match(cppParser.RightParen)
                pass
            elif token in [cppParser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.match(cppParser.LeftBracket)
                self.state = 1345
                self.balancedTokenSeq()
                self.state = 1346
                self.match(cppParser.RightBracket)
                pass
            elif token in [cppParser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.match(cppParser.LeftBrace)
                self.state = 1349
                self.balancedTokenSeq()
                self.state = 1350
                self.match(cppParser.RightBrace)
                pass
            elif token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.MultiLineMacro, cppParser.Directive, cppParser.Alignas, cppParser.Alignof, cppParser.Asm, cppParser.Auto, cppParser.Bool, cppParser.Break, cppParser.Case, cppParser.Catch, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Constexpr, cppParser.Const_cast, cppParser.Continue, cppParser.Decltype, cppParser.Default, cppParser.Delete, cppParser.Do, cppParser.Double, cppParser.Dynamic_cast, cppParser.Else, cppParser.Enum, cppParser.Explicit, cppParser.Export, cppParser.Extern, cppParser.False_, cppParser.Final, cppParser.Float, cppParser.For, cppParser.Friend, cppParser.Goto, cppParser.If, cppParser.Inline, cppParser.Int, cppParser.Long, cppParser.Mutable, cppParser.Namespace, cppParser.New, cppParser.Noexcept, cppParser.Nullptr, cppParser.Operator, cppParser.Override, cppParser.Private, cppParser.Protected, cppParser.Public, cppParser.Register, cppParser.Reinterpret_cast, cppParser.Return, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static, cppParser.Static_assert, cppParser.Static_cast, cppParser.Struct, cppParser.Switch, cppParser.Template, cppParser.This, cppParser.Thread_local, cppParser.Throw, cppParser.True_, cppParser.Try, cppParser.Typedef, cppParser.Typeid_, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Using, cppParser.Virtual, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.While, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.Div, cppParser.Mod, cppParser.Caret, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.Assign, cppParser.Less, cppParser.Greater, cppParser.PlusAssign, cppParser.MinusAssign, cppParser.StarAssign, cppParser.DivAssign, cppParser.ModAssign, cppParser.XorAssign, cppParser.AndAssign, cppParser.OrAssign, cppParser.LeftShiftAssign, cppParser.RightShiftAssign, cppParser.Equal, cppParser.NotEqual, cppParser.LessEqual, cppParser.GreaterEqual, cppParser.AndAnd, cppParser.OrOr, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Comma, cppParser.ArrowStar, cppParser.Arrow, cppParser.Question, cppParser.Colon, cppParser.Doublecolon, cppParser.Semi, cppParser.Dot, cppParser.DotStar, cppParser.Ellipsis, cppParser.Identifier, cppParser.DecimalLiteral, cppParser.OctalLiteral, cppParser.HexadecimalLiteral, cppParser.BinaryLiteral, cppParser.Integersuffix, cppParser.UserDefinedIntegerLiteral, cppParser.UserDefinedFloatingLiteral, cppParser.UserDefinedStringLiteral, cppParser.UserDefinedCharacterLiteral, cppParser.Whitespace, cppParser.Newline, cppParser.BlockComment, cppParser.LineComment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1353 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1352
                        _la = self._input.LA(1)
                        if _la <= 0 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (cppParser.LeftParen - 85)) | (1 << (cppParser.RightParen - 85)) | (1 << (cppParser.LeftBracket - 85)) | (1 << (cppParser.RightBracket - 85)) | (1 << (cppParser.LeftBrace - 85)) | (1 << (cppParser.RightBrace - 85)))) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1355 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(cppParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = cppParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.initDeclarator()
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1360
                self.match(cppParser.Comma)
                self.state = 1361
                self.initDeclarator()
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(cppParser.InitializerContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = cppParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.declarator()
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (cppParser.LeftParen - 85)) | (1 << (cppParser.LeftBrace - 85)) | (1 << (cppParser.Assign - 85)))) != 0):
                self.state = 1368
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerDeclarator(self):
            return self.getTypedRuleContext(cppParser.PointerDeclaratorContext,0)


        def noPointerDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(cppParser.ParametersAndQualifiersContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(cppParser.TrailingReturnTypeContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = cppParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_declarator)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.pointerDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.noPointerDeclarator(0)
                self.state = 1373
                self.parametersAndQualifiers()
                self.state = 1374
                self.trailingReturnType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(cppParser.PointerOperatorContext,i)


        def Const(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Const)
            else:
                return self.getToken(cppParser.Const, i)

        def getRuleIndex(self):
            return cppParser.RULE_pointerDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerDeclarator" ):
                listener.enterPointerDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerDeclarator" ):
                listener.exitPointerDeclarator(self)




    def pointerDeclarator(self):

        localctx = cppParser.PointerDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_pointerDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1378
                    self.pointerOperator()
                    self.state = 1380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Const:
                        self.state = 1379
                        self.match(cppParser.Const)

             
                self.state = 1386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1387
            self.noPointerDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoPointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(cppParser.DeclaratoridContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def pointerDeclarator(self):
            return self.getTypedRuleContext(cppParser.PointerDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(cppParser.ParametersAndQualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_noPointerDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerDeclarator" ):
                listener.enterNoPointerDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerDeclarator" ):
                listener.exitNoPointerDeclarator(self)



    def noPointerDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cppParser.NoPointerDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_noPointerDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Decltype, cppParser.Operator, cppParser.Tilde, cppParser.Doublecolon, cppParser.Ellipsis, cppParser.Identifier]:
                self.state = 1390
                self.declaratorid()
                self.state = 1392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.attributeSpecifierSeq()


                pass
            elif token in [cppParser.LeftParen]:
                self.state = 1394
                self.match(cppParser.LeftParen)
                self.state = 1395
                self.pointerDeclarator()
                self.state = 1396
                self.match(cppParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = cppParser.NoPointerDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerDeclarator)
                    self.state = 1400
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1410
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [cppParser.LeftParen]:
                        self.state = 1401
                        self.parametersAndQualifiers()
                        pass
                    elif token in [cppParser.LeftBracket]:
                        self.state = 1402
                        self.match(cppParser.LeftBracket)
                        self.state = 1404
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                            self.state = 1403
                            self.constantExpression()


                        self.state = 1406
                        self.match(cppParser.RightBracket)
                        self.state = 1408
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                        if la_ == 1:
                            self.state = 1407
                            self.attributeSpecifierSeq()


                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersAndQualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def parameterDeclarationClause(self):
            return self.getTypedRuleContext(cppParser.ParameterDeclarationClauseContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(cppParser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(cppParser.RefqualifierContext,0)


        def exceptionSpecification(self):
            return self.getTypedRuleContext(cppParser.ExceptionSpecificationContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_parametersAndQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersAndQualifiers" ):
                listener.enterParametersAndQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersAndQualifiers" ):
                listener.exitParametersAndQualifiers(self)




    def parametersAndQualifiers(self):

        localctx = cppParser.ParametersAndQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_parametersAndQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(cppParser.LeftParen)
            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                self.state = 1418
                self.parameterDeclarationClause()


            self.state = 1421
            self.match(cppParser.RightParen)
            self.state = 1423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1422
                self.cvqualifierseq()


            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1425
                self.refqualifier()


            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1428
                self.exceptionSpecification()


            self.state = 1432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1431
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingReturnTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(cppParser.Arrow, 0)

        def trailingTypeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TrailingTypeSpecifierSeqContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_trailingReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingReturnType" ):
                listener.enterTrailingReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingReturnType" ):
                listener.exitTrailingReturnType(self)




    def trailingReturnType(self):

        localctx = cppParser.TrailingReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_trailingReturnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(cppParser.Arrow)
            self.state = 1435
            self.trailingTypeSpecifierSeq()
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1436
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(cppParser.And, 0)

        def AndAnd(self):
            return self.getToken(cppParser.AndAnd, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def Star(self):
            return self.getToken(cppParser.Star, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(cppParser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_pointerOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerOperator" ):
                listener.enterPointerOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerOperator" ):
                listener.exitPointerOperator(self)




    def pointerOperator(self):

        localctx = cppParser.PointerOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_pointerOperator)
        self._la = 0 # Token type
        try:
            self.state = 1453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.And, cppParser.AndAnd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                _la = self._input.LA(1)
                if not(_la==cppParser.And or _la==cppParser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self.attributeSpecifierSeq()


                pass
            elif token in [cppParser.Decltype, cppParser.Star, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Decltype or _la==cppParser.Doublecolon or _la==cppParser.Identifier:
                    self.state = 1443
                    self.nestedNameSpecifier(0)


                self.state = 1446
                self.match(cppParser.Star)
                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1447
                    self.attributeSpecifierSeq()


                self.state = 1451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.CvQualifierContext)
            else:
                return self.getTypedRuleContext(cppParser.CvQualifierContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)




    def cvqualifierseq(self):

        localctx = cppParser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1455
                    self.cvQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1458 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(cppParser.Const, 0)

        def Volatile(self):
            return self.getToken(cppParser.Volatile, 0)

        def getRuleIndex(self):
            return cppParser.RULE_cvQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvQualifier" ):
                listener.enterCvQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvQualifier" ):
                listener.exitCvQualifier(self)




    def cvQualifier(self):

        localctx = cppParser.CvQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_cvQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            _la = self._input.LA(1)
            if not(_la==cppParser.Const or _la==cppParser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(cppParser.And, 0)

        def AndAnd(self):
            return self.getToken(cppParser.AndAnd, 0)

        def getRuleIndex(self):
            return cppParser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)




    def refqualifier(self):

        localctx = cppParser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            _la = self._input.LA(1)
            if not(_la==cppParser.And or _la==cppParser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idExpression(self):
            return self.getTypedRuleContext(cppParser.IdExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cppParser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)




    def declaratorid(self):

        localctx = cppParser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1464
                self.match(cppParser.Ellipsis)


            self.state = 1467
            self.idExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierSeqContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_theTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheTypeId" ):
                listener.enterTheTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheTypeId" ):
                listener.exitTheTypeId(self)




    def theTypeId(self):

        localctx = cppParser.TheTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_theTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.typeSpecifierSeq()
            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1470
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerAbstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.PointerAbstractDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(cppParser.ParametersAndQualifiersContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(cppParser.TrailingReturnTypeContext,0)


        def noPointerAbstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerAbstractDeclaratorContext,0)


        def abstractPackDeclarator(self):
            return self.getTypedRuleContext(cppParser.AbstractPackDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = cppParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_abstractDeclarator)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.pointerAbstractDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1474
                    self.noPointerAbstractDeclarator()


                self.state = 1477
                self.parametersAndQualifiers()
                self.state = 1478
                self.trailingReturnType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1480
                self.abstractPackDeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerAbstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerAbstractDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(cppParser.PointerOperatorContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_pointerAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerAbstractDeclarator" ):
                listener.enterPointerAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerAbstractDeclarator" ):
                listener.exitPointerAbstractDeclarator(self)




    def pointerAbstractDeclarator(self):

        localctx = cppParser.PointerAbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_pointerAbstractDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1483
                    self.pointerOperator() 
                self.state = 1488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

            self.state = 1491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftParen]:
                self.state = 1489
                self.noPointerAbstractDeclarator()
                pass
            elif token in [cppParser.Decltype, cppParser.Star, cppParser.And, cppParser.AndAnd, cppParser.Doublecolon, cppParser.Identifier]:
                self.state = 1490
                self.pointerOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoPointerAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersAndQualifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ParametersAndQualifiersContext)
            else:
                return self.getTypedRuleContext(cppParser.ParametersAndQualifiersContext,i)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def pointerAbstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.PointerAbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftBracket)
            else:
                return self.getToken(cppParser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightBracket)
            else:
                return self.getToken(cppParser.RightBracket, i)

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.ConstantExpressionContext,i)


        def attributeSpecifierSeq(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AttributeSpecifierSeqContext)
            else:
                return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_noPointerAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerAbstractDeclarator" ):
                listener.enterNoPointerAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerAbstractDeclarator" ):
                listener.exitNoPointerAbstractDeclarator(self)




    def noPointerAbstractDeclarator(self):

        localctx = cppParser.NoPointerAbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_noPointerAbstractDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1493
                self.parametersAndQualifiers()
                pass

            elif la_ == 2:
                self.state = 1494
                self.match(cppParser.LeftParen)
                self.state = 1495
                self.pointerAbstractDeclarator()
                self.state = 1496
                self.match(cppParser.RightParen)
                pass


            self.state = 1511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1509
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [cppParser.LeftParen]:
                        self.state = 1500
                        self.parametersAndQualifiers()
                        pass
                    elif token in [cppParser.LeftBracket]:
                        self.state = 1501
                        self.match(cppParser.LeftBracket)
                        self.state = 1503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                            self.state = 1502
                            self.constantExpression()


                        self.state = 1505
                        self.match(cppParser.RightBracket)
                        self.state = 1507
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                        if la_ == 1:
                            self.state = 1506
                            self.attributeSpecifierSeq()


                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractPackDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerAbstractPackDeclarator(self):
            return self.getTypedRuleContext(cppParser.NoPointerAbstractPackDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(cppParser.PointerOperatorContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_abstractPackDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractPackDeclarator" ):
                listener.enterAbstractPackDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractPackDeclarator" ):
                listener.exitAbstractPackDeclarator(self)




    def abstractPackDeclarator(self):

        localctx = cppParser.AbstractPackDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_abstractPackDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Decltype or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (cppParser.Star - 93)) | (1 << (cppParser.And - 93)) | (1 << (cppParser.AndAnd - 93)) | (1 << (cppParser.Doublecolon - 93)) | (1 << (cppParser.Identifier - 93)))) != 0):
                self.state = 1514
                self.pointerOperator()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1520
            self.noPointerAbstractPackDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoPointerAbstractPackDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def parametersAndQualifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ParametersAndQualifiersContext)
            else:
                return self.getTypedRuleContext(cppParser.ParametersAndQualifiersContext,i)


        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.LeftBracket)
            else:
                return self.getToken(cppParser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.RightBracket)
            else:
                return self.getToken(cppParser.RightBracket, i)

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(cppParser.ConstantExpressionContext,i)


        def attributeSpecifierSeq(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AttributeSpecifierSeqContext)
            else:
                return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_noPointerAbstractPackDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerAbstractPackDeclarator" ):
                listener.enterNoPointerAbstractPackDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerAbstractPackDeclarator" ):
                listener.exitNoPointerAbstractPackDeclarator(self)




    def noPointerAbstractPackDeclarator(self):

        localctx = cppParser.NoPointerAbstractPackDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_noPointerAbstractPackDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(cppParser.Ellipsis)
            self.state = 1534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1532
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [cppParser.LeftParen]:
                        self.state = 1523
                        self.parametersAndQualifiers()
                        pass
                    elif token in [cppParser.LeftBracket]:
                        self.state = 1524
                        self.match(cppParser.LeftBracket)
                        self.state = 1526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                            self.state = 1525
                            self.constantExpression()


                        self.state = 1528
                        self.match(cppParser.RightBracket)
                        self.state = 1530
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                        if la_ == 1:
                            self.state = 1529
                            self.attributeSpecifierSeq()


                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(cppParser.ParameterDeclarationListContext,0)


        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def getRuleIndex(self):
            return cppParser.RULE_parameterDeclarationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationClause" ):
                listener.enterParameterDeclarationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationClause" ):
                listener.exitParameterDeclarationClause(self)




    def parameterDeclarationClause(self):

        localctx = cppParser.ParameterDeclarationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_parameterDeclarationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.parameterDeclarationList()
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Comma or _la==cppParser.Ellipsis:
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Comma:
                    self.state = 1538
                    self.match(cppParser.Comma)


                self.state = 1541
                self.match(cppParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(cppParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_parameterDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationList" ):
                listener.enterParameterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationList" ):
                listener.exitParameterDeclarationList(self)




    def parameterDeclarationList(self):

        localctx = cppParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_parameterDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.parameterDeclaration()
            self.state = 1549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1545
                    self.match(cppParser.Comma)
                    self.state = 1546
                    self.parameterDeclaration() 
                self.state = 1551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(cppParser.InitializerClauseContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = cppParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1552
                self.attributeSpecifierSeq()


            self.state = 1555
            self.declSpecifierSeq()
            self.state = 1560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1556
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 1558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1557
                    self.abstractDeclarator()


                pass


            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Assign:
                self.state = 1562
                self.match(cppParser.Assign)
                self.state = 1563
                self.initializerClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(cppParser.FunctionBodyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def virtualSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.VirtualSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = cppParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1566
                self.attributeSpecifierSeq()


            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1569
                self.declSpecifierSeq()


            self.state = 1572
            self.declarator()
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Final or _la==cppParser.Override:
                self.state = 1573
                self.virtualSpecifierSeq()


            self.state = 1576
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def constructorInitializer(self):
            return self.getTypedRuleContext(cppParser.ConstructorInitializerContext,0)


        def functionTryBlock(self):
            return self.getTypedRuleContext(cppParser.FunctionTryBlockContext,0)


        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def Default(self):
            return self.getToken(cppParser.Default, 0)

        def Delete(self):
            return self.getToken(cppParser.Delete, 0)

        def getRuleIndex(self):
            return cppParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = cppParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.state = 1586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftBrace, cppParser.Colon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Colon:
                    self.state = 1578
                    self.constructorInitializer()


                self.state = 1581
                self.compoundStatement()
                pass
            elif token in [cppParser.Try]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.functionTryBlock()
                pass
            elif token in [cppParser.Assign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.match(cppParser.Assign)
                self.state = 1584
                _la = self._input.LA(1)
                if not(_la==cppParser.Default or _la==cppParser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1585
                self.match(cppParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(cppParser.BraceOrEqualInitializerContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(cppParser.ExpressionListContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def getRuleIndex(self):
            return cppParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = cppParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_initializer)
        try:
            self.state = 1593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftBrace, cppParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self.braceOrEqualInitializer()
                pass
            elif token in [cppParser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(cppParser.LeftParen)
                self.state = 1590
                self.expressionList()
                self.state = 1591
                self.match(cppParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceOrEqualInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(cppParser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_braceOrEqualInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceOrEqualInitializer" ):
                listener.enterBraceOrEqualInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceOrEqualInitializer" ):
                listener.exitBraceOrEqualInitializer(self)




    def braceOrEqualInitializer(self):

        localctx = cppParser.BraceOrEqualInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_braceOrEqualInitializer)
        try:
            self.state = 1598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self.match(cppParser.Assign)
                self.state = 1596
                self.initializerClause()
                pass
            elif token in [cppParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1597
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(cppParser.AssignmentExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_initializerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerClause" ):
                listener.enterInitializerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerClause" ):
                listener.exitInitializerClause(self)




    def initializerClause(self):

        localctx = cppParser.InitializerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_initializerClause)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.IntegerLiteral, cppParser.CharacterLiteral, cppParser.FloatingLiteral, cppParser.StringLiteral, cppParser.BooleanLiteral, cppParser.PointerLiteral, cppParser.UserDefinedLiteral, cppParser.Alignof, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Const_cast, cppParser.Decltype, cppParser.Delete, cppParser.Double, cppParser.Dynamic_cast, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.New, cppParser.Noexcept, cppParser.Operator, cppParser.Reinterpret_cast, cppParser.Short, cppParser.Signed, cppParser.Sizeof, cppParser.Static_cast, cppParser.This, cppParser.Throw, cppParser.Typeid_, cppParser.Typename_, cppParser.Unsigned, cppParser.Void, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Plus, cppParser.Minus, cppParser.Star, cppParser.And, cppParser.Or, cppParser.Tilde, cppParser.Not, cppParser.PlusPlus, cppParser.MinusMinus, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.assignmentExpression()
                pass
            elif token in [cppParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.InitializerClauseContext)
            else:
                return self.getTypedRuleContext(cppParser.InitializerClauseContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Ellipsis)
            else:
                return self.getToken(cppParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = cppParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.initializerClause()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1605
                self.match(cppParser.Ellipsis)


            self.state = 1615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1608
                    self.match(cppParser.Comma)
                    self.state = 1609
                    self.initializerClause()
                    self.state = 1611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Ellipsis:
                        self.state = 1610
                        self.match(cppParser.Ellipsis)

             
                self.state = 1617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BracedInitListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(cppParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def getRuleIndex(self):
            return cppParser.RULE_bracedInitList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedInitList" ):
                listener.enterBracedInitList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedInitList" ):
                listener.exitBracedInitList(self)




    def bracedInitList(self):

        localctx = cppParser.BracedInitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_bracedInitList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(cppParser.LeftBrace)
            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.LeftBrace - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                self.state = 1619
                self.initializerList()
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Comma:
                    self.state = 1620
                    self.match(cppParser.Comma)




            self.state = 1625
            self.match(cppParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassName" ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassName" ):
                listener.exitClassName(self)




    def className(self):

        localctx = cppParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_className)
        try:
            self.state = 1629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1627
                self.match(cppParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1628
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classHead(self):
            return self.getTypedRuleContext(cppParser.ClassHeadContext,0)


        def LeftBrace(self):
            return self.getToken(cppParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cppParser.RightBrace, 0)

        def memberSpecification(self):
            return self.getTypedRuleContext(cppParser.MemberSpecificationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_classSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassSpecifier" ):
                listener.enterClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassSpecifier" ):
                listener.exitClassSpecifier(self)




    def classSpecifier(self):

        localctx = cppParser.ClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_classSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.classHead()
            self.state = 1632
            self.match(cppParser.LeftBrace)
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Private - 10)) | (1 << (cppParser.Protected - 10)) | (1 << (cppParser.Public - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Colon - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0):
                self.state = 1633
                self.memberSpecification()


            self.state = 1636
            self.match(cppParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classKey(self):
            return self.getTypedRuleContext(cppParser.ClassKeyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def classHeadName(self):
            return self.getTypedRuleContext(cppParser.ClassHeadNameContext,0)


        def baseClause(self):
            return self.getTypedRuleContext(cppParser.BaseClauseContext,0)


        def classVirtSpecifier(self):
            return self.getTypedRuleContext(cppParser.ClassVirtSpecifierContext,0)


        def Union(self):
            return self.getToken(cppParser.Union, 0)

        def getRuleIndex(self):
            return cppParser.RULE_classHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHead" ):
                listener.enterClassHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHead" ):
                listener.exitClassHead(self)




    def classHead(self):

        localctx = cppParser.ClassHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_classHead)
        self._la = 0 # Token type
        try:
            self.state = 1661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Class, cppParser.Struct]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.classKey()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                    self.state = 1639
                    self.attributeSpecifierSeq()


                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Decltype or _la==cppParser.Doublecolon or _la==cppParser.Identifier:
                    self.state = 1642
                    self.classHeadName()
                    self.state = 1644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Final:
                        self.state = 1643
                        self.classVirtSpecifier()




                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Colon:
                    self.state = 1648
                    self.baseClause()


                pass
            elif token in [cppParser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(cppParser.Union)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                    self.state = 1652
                    self.attributeSpecifierSeq()


                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Decltype or _la==cppParser.Doublecolon or _la==cppParser.Identifier:
                    self.state = 1655
                    self.classHeadName()
                    self.state = 1657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cppParser.Final:
                        self.state = 1656
                        self.classVirtSpecifier()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassHeadNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(cppParser.ClassNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_classHeadName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHeadName" ):
                listener.enterClassHeadName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHeadName" ):
                listener.exitClassHeadName(self)




    def classHeadName(self):

        localctx = cppParser.ClassHeadNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_classHeadName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1663
                self.nestedNameSpecifier(0)


            self.state = 1666
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassVirtSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(cppParser.Final, 0)

        def getRuleIndex(self):
            return cppParser.RULE_classVirtSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassVirtSpecifier" ):
                listener.enterClassVirtSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassVirtSpecifier" ):
                listener.exitClassVirtSpecifier(self)




    def classVirtSpecifier(self):

        localctx = cppParser.ClassVirtSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_classVirtSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(cppParser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(cppParser.Class, 0)

        def Struct(self):
            return self.getToken(cppParser.Struct, 0)

        def getRuleIndex(self):
            return cppParser.RULE_classKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassKey" ):
                listener.enterClassKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassKey" ):
                listener.exitClassKey(self)




    def classKey(self):

        localctx = cppParser.ClassKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_classKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            _la = self._input.LA(1)
            if not(_la==cppParser.Class or _la==cppParser.Struct):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.MemberdeclarationContext)
            else:
                return self.getTypedRuleContext(cppParser.MemberdeclarationContext,i)


        def accessSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.AccessSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.AccessSpecifierContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Colon)
            else:
                return self.getToken(cppParser.Colon, i)

        def getRuleIndex(self):
            return cppParser.RULE_memberSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSpecification" ):
                listener.enterMemberSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSpecification" ):
                listener.exitMemberSpecification(self)




    def memberSpecification(self):

        localctx = cppParser.MemberSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_memberSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cppParser.Alignas, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Constexpr, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Explicit, cppParser.Extern, cppParser.Float, cppParser.Friend, cppParser.Inline, cppParser.Int, cppParser.Long, cppParser.Mutable, cppParser.Operator, cppParser.Register, cppParser.Short, cppParser.Signed, cppParser.Static, cppParser.Static_assert, cppParser.Struct, cppParser.Template, cppParser.Thread_local, cppParser.Typedef, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Using, cppParser.Virtual, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.LeftParen, cppParser.LeftBracket, cppParser.Star, cppParser.And, cppParser.Tilde, cppParser.AndAnd, cppParser.Colon, cppParser.Doublecolon, cppParser.Semi, cppParser.Ellipsis, cppParser.Identifier]:
                    self.state = 1672
                    self.memberdeclaration()
                    pass
                elif token in [cppParser.Private, cppParser.Protected, cppParser.Public]:
                    self.state = 1673
                    self.accessSpecifier()
                    self.state = 1674
                    self.match(cppParser.Colon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1678 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (cppParser.Alignas - 10)) | (1 << (cppParser.Auto - 10)) | (1 << (cppParser.Bool - 10)) | (1 << (cppParser.Char - 10)) | (1 << (cppParser.Char16 - 10)) | (1 << (cppParser.Char32 - 10)) | (1 << (cppParser.Class - 10)) | (1 << (cppParser.Const - 10)) | (1 << (cppParser.Constexpr - 10)) | (1 << (cppParser.Decltype - 10)) | (1 << (cppParser.Double - 10)) | (1 << (cppParser.Enum - 10)) | (1 << (cppParser.Explicit - 10)) | (1 << (cppParser.Extern - 10)) | (1 << (cppParser.Float - 10)) | (1 << (cppParser.Friend - 10)) | (1 << (cppParser.Inline - 10)) | (1 << (cppParser.Int - 10)) | (1 << (cppParser.Long - 10)) | (1 << (cppParser.Mutable - 10)) | (1 << (cppParser.Operator - 10)) | (1 << (cppParser.Private - 10)) | (1 << (cppParser.Protected - 10)) | (1 << (cppParser.Public - 10)) | (1 << (cppParser.Register - 10)) | (1 << (cppParser.Short - 10)) | (1 << (cppParser.Signed - 10)) | (1 << (cppParser.Static - 10)) | (1 << (cppParser.Static_assert - 10)) | (1 << (cppParser.Struct - 10)) | (1 << (cppParser.Template - 10)) | (1 << (cppParser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cppParser.Typedef - 74)) | (1 << (cppParser.Typename_ - 74)) | (1 << (cppParser.Union - 74)) | (1 << (cppParser.Unsigned - 74)) | (1 << (cppParser.Using - 74)) | (1 << (cppParser.Virtual - 74)) | (1 << (cppParser.Void - 74)) | (1 << (cppParser.Volatile - 74)) | (1 << (cppParser.Wchar - 74)) | (1 << (cppParser.LeftParen - 74)) | (1 << (cppParser.LeftBracket - 74)) | (1 << (cppParser.Star - 74)) | (1 << (cppParser.And - 74)) | (1 << (cppParser.Tilde - 74)) | (1 << (cppParser.AndAnd - 74)) | (1 << (cppParser.Colon - 74)) | (1 << (cppParser.Doublecolon - 74)) | (1 << (cppParser.Semi - 74)) | (1 << (cppParser.Ellipsis - 74)) | (1 << (cppParser.Identifier - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cppParser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.DeclSpecifierSeqContext,0)


        def memberDeclaratorList(self):
            return self.getTypedRuleContext(cppParser.MemberDeclaratorListContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(cppParser.FunctionDefinitionContext,0)


        def usingDeclaration(self):
            return self.getTypedRuleContext(cppParser.UsingDeclarationContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(cppParser.StaticAssertDeclarationContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(cppParser.TemplateDeclarationContext,0)


        def aliasDeclaration(self):
            return self.getTypedRuleContext(cppParser.AliasDeclarationContext,0)


        def emptyDeclaration_(self):
            return self.getTypedRuleContext(cppParser.EmptyDeclaration_Context,0)


        def getRuleIndex(self):
            return cppParser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)




    def memberdeclaration(self):

        localctx = cppParser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1680
                    self.attributeSpecifierSeq()


                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1683
                    self.declSpecifierSeq()


                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.Alignas) | (1 << cppParser.Decltype) | (1 << cppParser.Operator))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (cppParser.LeftParen - 85)) | (1 << (cppParser.LeftBracket - 85)) | (1 << (cppParser.Star - 85)) | (1 << (cppParser.And - 85)) | (1 << (cppParser.Tilde - 85)) | (1 << (cppParser.AndAnd - 85)) | (1 << (cppParser.Colon - 85)) | (1 << (cppParser.Doublecolon - 85)) | (1 << (cppParser.Ellipsis - 85)) | (1 << (cppParser.Identifier - 85)))) != 0):
                    self.state = 1686
                    self.memberDeclaratorList()


                self.state = 1689
                self.match(cppParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1691
                self.usingDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1692
                self.staticAssertDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1693
                self.templateDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1694
                self.aliasDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1695
                self.emptyDeclaration_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.MemberDeclaratorContext)
            else:
                return self.getTypedRuleContext(cppParser.MemberDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_memberDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaratorList" ):
                listener.enterMemberDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaratorList" ):
                listener.exitMemberDeclaratorList(self)




    def memberDeclaratorList(self):

        localctx = cppParser.MemberDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_memberDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.memberDeclarator()
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1699
                self.match(cppParser.Comma)
                self.state = 1700
                self.memberDeclarator()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def virtualSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.VirtualSpecifierSeqContext,0)


        def pureSpecifier(self):
            return self.getTypedRuleContext(cppParser.PureSpecifierContext,0)


        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(cppParser.BraceOrEqualInitializerContext,0)


        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_memberDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclarator" ):
                listener.enterMemberDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclarator" ):
                listener.exitMemberDeclarator(self)




    def memberDeclarator(self):

        localctx = cppParser.MemberDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_memberDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.declarator()
                self.state = 1715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1707
                    self.virtualSpecifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 1708
                    if not  this.IsPureSpecifierAllowed() :
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " this.IsPureSpecifierAllowed() ")
                    self.state = 1709
                    self.pureSpecifier()
                    pass

                elif la_ == 3:
                    self.state = 1710
                    if not  this.IsPureSpecifierAllowed() :
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " this.IsPureSpecifierAllowed() ")
                    self.state = 1711
                    self.virtualSpecifierSeq()
                    self.state = 1712
                    self.pureSpecifier()
                    pass

                elif la_ == 4:
                    self.state = 1714
                    self.braceOrEqualInitializer()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1717
                self.declarator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Identifier:
                    self.state = 1718
                    self.match(cppParser.Identifier)


                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                    self.state = 1721
                    self.attributeSpecifierSeq()


                self.state = 1724
                self.match(cppParser.Colon)
                self.state = 1725
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtualSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtualSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.VirtualSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.VirtualSpecifierContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_virtualSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualSpecifierSeq" ):
                listener.enterVirtualSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualSpecifierSeq" ):
                listener.exitVirtualSpecifierSeq(self)




    def virtualSpecifierSeq(self):

        localctx = cppParser.VirtualSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_virtualSpecifierSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1728
                self.virtualSpecifier()
                self.state = 1731 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==cppParser.Final or _la==cppParser.Override):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtualSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(cppParser.Override, 0)

        def Final(self):
            return self.getToken(cppParser.Final, 0)

        def getRuleIndex(self):
            return cppParser.RULE_virtualSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualSpecifier" ):
                listener.enterVirtualSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualSpecifier" ):
                listener.exitVirtualSpecifier(self)




    def virtualSpecifier(self):

        localctx = cppParser.VirtualSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_virtualSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            _la = self._input.LA(1)
            if not(_la==cppParser.Final or _la==cppParser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PureSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def IntegerLiteral(self):
            return self.getToken(cppParser.IntegerLiteral, 0)

        def getRuleIndex(self):
            return cppParser.RULE_pureSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureSpecifier" ):
                listener.enterPureSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureSpecifier" ):
                listener.exitPureSpecifier(self)




    def pureSpecifier(self):

        localctx = cppParser.PureSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_pureSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(cppParser.Assign)
            self.state = 1736
            self.match(cppParser.IntegerLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def baseSpecifierList(self):
            return self.getTypedRuleContext(cppParser.BaseSpecifierListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_baseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseClause" ):
                listener.enterBaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseClause" ):
                listener.exitBaseClause(self)




    def baseClause(self):

        localctx = cppParser.BaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_baseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.match(cppParser.Colon)
            self.state = 1739
            self.baseSpecifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseSpecifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.BaseSpecifierContext)
            else:
                return self.getTypedRuleContext(cppParser.BaseSpecifierContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Ellipsis)
            else:
                return self.getToken(cppParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_baseSpecifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseSpecifierList" ):
                listener.enterBaseSpecifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseSpecifierList" ):
                listener.exitBaseSpecifierList(self)




    def baseSpecifierList(self):

        localctx = cppParser.BaseSpecifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_baseSpecifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.baseSpecifier()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1742
                self.match(cppParser.Ellipsis)


            self.state = 1752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1745
                self.match(cppParser.Comma)
                self.state = 1746
                self.baseSpecifier()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Ellipsis:
                    self.state = 1747
                    self.match(cppParser.Ellipsis)


                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseTypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.BaseTypeSpecifierContext,0)


        def Virtual(self):
            return self.getToken(cppParser.Virtual, 0)

        def accessSpecifier(self):
            return self.getTypedRuleContext(cppParser.AccessSpecifierContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_baseSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseSpecifier" ):
                listener.enterBaseSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseSpecifier" ):
                listener.exitBaseSpecifier(self)




    def baseSpecifier(self):

        localctx = cppParser.BaseSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_baseSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                self.state = 1755
                self.attributeSpecifierSeq()


            self.state = 1770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Decltype, cppParser.Doublecolon, cppParser.Identifier]:
                self.state = 1758
                self.baseTypeSpecifier()
                pass
            elif token in [cppParser.Virtual]:
                self.state = 1759
                self.match(cppParser.Virtual)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.Private) | (1 << cppParser.Protected) | (1 << cppParser.Public))) != 0):
                    self.state = 1760
                    self.accessSpecifier()


                self.state = 1763
                self.baseTypeSpecifier()
                pass
            elif token in [cppParser.Private, cppParser.Protected, cppParser.Public]:
                self.state = 1764
                self.accessSpecifier()
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Virtual:
                    self.state = 1765
                    self.match(cppParser.Virtual)


                self.state = 1768
                self.baseTypeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrDeclTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(cppParser.ClassNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(cppParser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_classOrDeclType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrDeclType" ):
                listener.enterClassOrDeclType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrDeclType" ):
                listener.exitClassOrDeclType(self)




    def classOrDeclType(self):

        localctx = cppParser.ClassOrDeclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_classOrDeclType)
        try:
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.nestedNameSpecifier(0)


                self.state = 1775
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrDeclType(self):
            return self.getTypedRuleContext(cppParser.ClassOrDeclTypeContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_baseTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseTypeSpecifier" ):
                listener.enterBaseTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseTypeSpecifier" ):
                listener.exitBaseTypeSpecifier(self)




    def baseTypeSpecifier(self):

        localctx = cppParser.BaseTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_baseTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.classOrDeclType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(cppParser.Private, 0)

        def Protected(self):
            return self.getToken(cppParser.Protected, 0)

        def Public(self):
            return self.getToken(cppParser.Public, 0)

        def getRuleIndex(self):
            return cppParser.RULE_accessSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessSpecifier" ):
                listener.enterAccessSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessSpecifier" ):
                listener.exitAccessSpecifier(self)




    def accessSpecifier(self):

        localctx = cppParser.AccessSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_accessSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.Private) | (1 << cppParser.Protected) | (1 << cppParser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionFunctionIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(cppParser.Operator, 0)

        def conversionTypeId(self):
            return self.getTypedRuleContext(cppParser.ConversionTypeIdContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_conversionFunctionId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionFunctionId" ):
                listener.enterConversionFunctionId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionFunctionId" ):
                listener.exitConversionFunctionId(self)




    def conversionFunctionId(self):

        localctx = cppParser.ConversionFunctionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_conversionFunctionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.match(cppParser.Operator)
            self.state = 1784
            self.conversionTypeId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierSeqContext,0)


        def conversionDeclarator(self):
            return self.getTypedRuleContext(cppParser.ConversionDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_conversionTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionTypeId" ):
                listener.enterConversionTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionTypeId" ):
                listener.exitConversionTypeId(self)




    def conversionTypeId(self):

        localctx = cppParser.ConversionTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_conversionTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.typeSpecifierSeq()
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.conversionDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerOperator(self):
            return self.getTypedRuleContext(cppParser.PointerOperatorContext,0)


        def conversionDeclarator(self):
            return self.getTypedRuleContext(cppParser.ConversionDeclaratorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_conversionDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionDeclarator" ):
                listener.enterConversionDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionDeclarator" ):
                listener.exitConversionDeclarator(self)




    def conversionDeclarator(self):

        localctx = cppParser.ConversionDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_conversionDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.pointerOperator()
            self.state = 1792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1791
                self.conversionDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(cppParser.Colon, 0)

        def memInitializerList(self):
            return self.getTypedRuleContext(cppParser.MemInitializerListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_constructorInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInitializer" ):
                listener.enterConstructorInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInitializer" ):
                listener.exitConstructorInitializer(self)




    def constructorInitializer(self):

        localctx = cppParser.ConstructorInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_constructorInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.match(cppParser.Colon)
            self.state = 1795
            self.memInitializerList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemInitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.MemInitializerContext)
            else:
                return self.getTypedRuleContext(cppParser.MemInitializerContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Ellipsis)
            else:
                return self.getToken(cppParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_memInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemInitializerList" ):
                listener.enterMemInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemInitializerList" ):
                listener.exitMemInitializerList(self)




    def memInitializerList(self):

        localctx = cppParser.MemInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_memInitializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.memInitializer()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1798
                self.match(cppParser.Ellipsis)


            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1801
                self.match(cppParser.Comma)
                self.state = 1802
                self.memInitializer()
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Ellipsis:
                    self.state = 1803
                    self.match(cppParser.Ellipsis)


                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(cppParser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(cppParser.BracedInitListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(cppParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_memInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemInitializer" ):
                listener.enterMemInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemInitializer" ):
                listener.exitMemInitializer(self)




    def memInitializer(self):

        localctx = cppParser.MemInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_memInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.meminitializerid()
            self.state = 1818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.LeftParen]:
                self.state = 1812
                self.match(cppParser.LeftParen)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.LeftBrace - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                    self.state = 1813
                    self.expressionList()


                self.state = 1816
                self.match(cppParser.RightParen)
                pass
            elif token in [cppParser.LeftBrace]:
                self.state = 1817
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrDeclType(self):
            return self.getTypedRuleContext(cppParser.ClassOrDeclTypeContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)




    def meminitializerid(self):

        localctx = cppParser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_meminitializerid)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1820
                self.classOrDeclType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1821
                self.match(cppParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorFunctionIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(cppParser.Operator, 0)

        def theOperator(self):
            return self.getTypedRuleContext(cppParser.TheOperatorContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_operatorFunctionId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorFunctionId" ):
                listener.enterOperatorFunctionId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorFunctionId" ):
                listener.exitOperatorFunctionId(self)




    def operatorFunctionId(self):

        localctx = cppParser.OperatorFunctionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_operatorFunctionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(cppParser.Operator)
            self.state = 1825
            self.theOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralOperatorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(cppParser.Operator, 0)

        def StringLiteral(self):
            return self.getToken(cppParser.StringLiteral, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def UserDefinedStringLiteral(self):
            return self.getToken(cppParser.UserDefinedStringLiteral, 0)

        def getRuleIndex(self):
            return cppParser.RULE_literalOperatorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralOperatorId" ):
                listener.enterLiteralOperatorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralOperatorId" ):
                listener.exitLiteralOperatorId(self)




    def literalOperatorId(self):

        localctx = cppParser.LiteralOperatorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_literalOperatorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(cppParser.Operator)
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.StringLiteral]:
                self.state = 1828
                self.match(cppParser.StringLiteral)
                self.state = 1829
                self.match(cppParser.Identifier)
                pass
            elif token in [cppParser.UserDefinedStringLiteral]:
                self.state = 1830
                self.match(cppParser.UserDefinedStringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(cppParser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(cppParser.DeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_templateDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateDeclaration" ):
                listener.enterTemplateDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateDeclaration" ):
                listener.exitTemplateDeclaration(self)




    def templateDeclaration(self):

        localctx = cppParser.TemplateDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_templateDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(cppParser.Template)
            self.state = 1834
            self.match(cppParser.Less)
            self.state = 1835
            self.templateparameterList()
            self.state = 1836
            self.match(cppParser.Greater)
            self.state = 1837
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TemplateParameterContext)
            else:
                return self.getTypedRuleContext(cppParser.TemplateParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_templateparameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterList" ):
                listener.enterTemplateparameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterList" ):
                listener.exitTemplateparameterList(self)




    def templateparameterList(self):

        localctx = cppParser.TemplateparameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_templateparameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.templateParameter()
            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1840
                self.match(cppParser.Comma)
                self.state = 1841
                self.templateParameter()
                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self):
            return self.getTypedRuleContext(cppParser.TypeParameterContext,0)


        def parameterDeclaration(self):
            return self.getTypedRuleContext(cppParser.ParameterDeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_templateParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateParameter" ):
                listener.enterTemplateParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateParameter" ):
                listener.exitTemplateParameter(self)




    def templateParameter(self):

        localctx = cppParser.TemplateParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_templateParameter)
        try:
            self.state = 1849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1847
                self.typeParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1848
                self.parameterDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(cppParser.Class, 0)

        def Typename_(self):
            return self.getToken(cppParser.Typename_, 0)

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(cppParser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = cppParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Class, cppParser.Template]:
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Template:
                    self.state = 1851
                    self.match(cppParser.Template)
                    self.state = 1852
                    self.match(cppParser.Less)
                    self.state = 1853
                    self.templateparameterList()
                    self.state = 1854
                    self.match(cppParser.Greater)


                self.state = 1858
                self.match(cppParser.Class)
                pass
            elif token in [cppParser.Typename_]:
                self.state = 1859
                self.match(cppParser.Typename_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Ellipsis:
                    self.state = 1862
                    self.match(cppParser.Ellipsis)


                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Identifier:
                    self.state = 1865
                    self.match(cppParser.Identifier)


                pass

            elif la_ == 2:
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Identifier:
                    self.state = 1868
                    self.match(cppParser.Identifier)


                self.state = 1871
                self.match(cppParser.Assign)
                self.state = 1872
                self.theTypeId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleTemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateName(self):
            return self.getTypedRuleContext(cppParser.TemplateNameContext,0)


        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def templateArgumentList(self):
            return self.getTypedRuleContext(cppParser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_simpleTemplateId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTemplateId" ):
                listener.enterSimpleTemplateId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTemplateId" ):
                listener.exitSimpleTemplateId(self)




    def simpleTemplateId(self):

        localctx = cppParser.SimpleTemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_simpleTemplateId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.templateName()
            self.state = 1876
            self.match(cppParser.Less)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Enum) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.Struct - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Union - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Volatile - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                self.state = 1877
                self.templateArgumentList()


            self.state = 1880
            self.match(cppParser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(cppParser.OperatorFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(cppParser.LiteralOperatorIdContext,0)


        def templateArgumentList(self):
            return self.getTypedRuleContext(cppParser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_templateId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateId" ):
                listener.enterTemplateId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateId" ):
                listener.exitTemplateId(self)




    def templateId(self):

        localctx = cppParser.TemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_templateId)
        self._la = 0 # Token type
        try:
            self.state = 1893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1882
                self.simpleTemplateId()
                pass
            elif token in [cppParser.Operator]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1883
                    self.operatorFunctionId()
                    pass

                elif la_ == 2:
                    self.state = 1884
                    self.literalOperatorId()
                    pass


                self.state = 1887
                self.match(cppParser.Less)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Class) | (1 << cppParser.Const) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Enum) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.Struct - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Union - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Volatile - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                    self.state = 1888
                    self.templateArgumentList()


                self.state = 1891
                self.match(cppParser.Greater)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def getRuleIndex(self):
            return cppParser.RULE_templateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateName" ):
                listener.enterTemplateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateName" ):
                listener.exitTemplateName(self)




    def templateName(self):

        localctx = cppParser.TemplateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templateName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(cppParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TemplateArgumentContext)
            else:
                return self.getTypedRuleContext(cppParser.TemplateArgumentContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Ellipsis)
            else:
                return self.getToken(cppParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_templateArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateArgumentList" ):
                listener.enterTemplateArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateArgumentList" ):
                listener.exitTemplateArgumentList(self)




    def templateArgumentList(self):

        localctx = cppParser.TemplateArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_templateArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.templateArgument()
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1898
                self.match(cppParser.Ellipsis)


            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1901
                self.match(cppParser.Comma)
                self.state = 1902
                self.templateArgument()
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Ellipsis:
                    self.state = 1903
                    self.match(cppParser.Ellipsis)


                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeId(self):
            return self.getTypedRuleContext(cppParser.TheTypeIdContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def idExpression(self):
            return self.getTypedRuleContext(cppParser.IdExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_templateArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateArgument" ):
                listener.enterTemplateArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateArgument" ):
                listener.exitTemplateArgument(self)




    def templateArgument(self):

        localctx = cppParser.TemplateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateArgument)
        try:
            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.theTypeId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.constantExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1913
                self.idExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename_(self):
            return self.getToken(cppParser.Typename_, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(cppParser.NestedNameSpecifierContext,0)


        def Identifier(self):
            return self.getToken(cppParser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(cppParser.SimpleTemplateIdContext,0)


        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def getRuleIndex(self):
            return cppParser.RULE_typeNameSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameSpecifier" ):
                listener.enterTypeNameSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameSpecifier" ):
                listener.exitTypeNameSpecifier(self)




    def typeNameSpecifier(self):

        localctx = cppParser.TypeNameSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeNameSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(cppParser.Typename_)
            self.state = 1917
            self.nestedNameSpecifier(0)
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 1918
                self.match(cppParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Template:
                    self.state = 1919
                    self.match(cppParser.Template)


                self.state = 1922
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(cppParser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(cppParser.Extern, 0)

        def getRuleIndex(self):
            return cppParser.RULE_explicitInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitInstantiation" ):
                listener.enterExplicitInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitInstantiation" ):
                listener.exitExplicitInstantiation(self)




    def explicitInstantiation(self):

        localctx = cppParser.ExplicitInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_explicitInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Extern:
                self.state = 1925
                self.match(cppParser.Extern)


            self.state = 1928
            self.match(cppParser.Template)
            self.state = 1929
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitSpecializationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(cppParser.Template, 0)

        def Less(self):
            return self.getToken(cppParser.Less, 0)

        def Greater(self):
            return self.getToken(cppParser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(cppParser.DeclarationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_explicitSpecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitSpecialization" ):
                listener.enterExplicitSpecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitSpecialization" ):
                listener.exitExplicitSpecialization(self)




    def explicitSpecialization(self):

        localctx = cppParser.ExplicitSpecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_explicitSpecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(cppParser.Template)
            self.state = 1932
            self.match(cppParser.Less)
            self.state = 1933
            self.match(cppParser.Greater)
            self.state = 1934
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(cppParser.Try, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def handlerSeq(self):
            return self.getTypedRuleContext(cppParser.HandlerSeqContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_tryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryBlock" ):
                listener.enterTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryBlock" ):
                listener.exitTryBlock(self)




    def tryBlock(self):

        localctx = cppParser.TryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_tryBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(cppParser.Try)
            self.state = 1937
            self.compoundStatement()
            self.state = 1938
            self.handlerSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTryBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(cppParser.Try, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def handlerSeq(self):
            return self.getTypedRuleContext(cppParser.HandlerSeqContext,0)


        def constructorInitializer(self):
            return self.getTypedRuleContext(cppParser.ConstructorInitializerContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_functionTryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTryBlock" ):
                listener.enterFunctionTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTryBlock" ):
                listener.exitFunctionTryBlock(self)




    def functionTryBlock(self):

        localctx = cppParser.FunctionTryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_functionTryBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            self.match(cppParser.Try)
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Colon:
                self.state = 1941
                self.constructorInitializer()


            self.state = 1944
            self.compoundStatement()
            self.state = 1945
            self.handlerSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.HandlerContext)
            else:
                return self.getTypedRuleContext(cppParser.HandlerContext,i)


        def getRuleIndex(self):
            return cppParser.RULE_handlerSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerSeq" ):
                listener.enterHandlerSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerSeq" ):
                listener.exitHandlerSeq(self)




    def handlerSeq(self):

        localctx = cppParser.HandlerSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_handlerSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1947
                self.handler()
                self.state = 1950 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==cppParser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(cppParser.Catch, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def exceptionDeclaration(self):
            return self.getTypedRuleContext(cppParser.ExceptionDeclarationContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(cppParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)




    def handler(self):

        localctx = cppParser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.match(cppParser.Catch)
            self.state = 1953
            self.match(cppParser.LeftParen)
            self.state = 1954
            self.exceptionDeclaration()
            self.state = 1955
            self.match(cppParser.RightParen)
            self.state = 1956
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.TypeSpecifierSeqContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(cppParser.AttributeSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(cppParser.DeclaratorContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cppParser.AbstractDeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(cppParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cppParser.RULE_exceptionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionDeclaration" ):
                listener.enterExceptionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionDeclaration" ):
                listener.exitExceptionDeclaration(self)




    def exceptionDeclaration(self):

        localctx = cppParser.ExceptionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_exceptionDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Alignas, cppParser.Auto, cppParser.Bool, cppParser.Char, cppParser.Char16, cppParser.Char32, cppParser.Class, cppParser.Const, cppParser.Decltype, cppParser.Double, cppParser.Enum, cppParser.Float, cppParser.Int, cppParser.Long, cppParser.Short, cppParser.Signed, cppParser.Struct, cppParser.Typename_, cppParser.Union, cppParser.Unsigned, cppParser.Void, cppParser.Volatile, cppParser.Wchar, cppParser.LeftBracket, cppParser.Doublecolon, cppParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Alignas or _la==cppParser.LeftBracket:
                    self.state = 1958
                    self.attributeSpecifierSeq()


                self.state = 1961
                self.typeSpecifierSeq()
                self.state = 1964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 1962
                    self.declarator()

                elif la_ == 2:
                    self.state = 1963
                    self.abstractDeclarator()


                pass
            elif token in [cppParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1966
                self.match(cppParser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(cppParser.Throw, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(cppParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_throwExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowExpression" ):
                listener.enterThrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowExpression" ):
                listener.exitThrowExpression(self)




    def throwExpression(self):

        localctx = cppParser.ThrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_throwExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(cppParser.Throw)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral) | (1 << cppParser.Alignof) | (1 << cppParser.Auto) | (1 << cppParser.Bool) | (1 << cppParser.Char) | (1 << cppParser.Char16) | (1 << cppParser.Char32) | (1 << cppParser.Const_cast) | (1 << cppParser.Decltype) | (1 << cppParser.Delete) | (1 << cppParser.Double) | (1 << cppParser.Dynamic_cast) | (1 << cppParser.Float) | (1 << cppParser.Int) | (1 << cppParser.Long) | (1 << cppParser.New) | (1 << cppParser.Noexcept) | (1 << cppParser.Operator) | (1 << cppParser.Reinterpret_cast) | (1 << cppParser.Short) | (1 << cppParser.Signed) | (1 << cppParser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cppParser.Static_cast - 65)) | (1 << (cppParser.This - 65)) | (1 << (cppParser.Throw - 65)) | (1 << (cppParser.Typeid_ - 65)) | (1 << (cppParser.Typename_ - 65)) | (1 << (cppParser.Unsigned - 65)) | (1 << (cppParser.Void - 65)) | (1 << (cppParser.Wchar - 65)) | (1 << (cppParser.LeftParen - 65)) | (1 << (cppParser.LeftBracket - 65)) | (1 << (cppParser.Plus - 65)) | (1 << (cppParser.Minus - 65)) | (1 << (cppParser.Star - 65)) | (1 << (cppParser.And - 65)) | (1 << (cppParser.Or - 65)) | (1 << (cppParser.Tilde - 65)) | (1 << (cppParser.Not - 65)) | (1 << (cppParser.PlusPlus - 65)) | (1 << (cppParser.MinusMinus - 65)) | (1 << (cppParser.Doublecolon - 65)))) != 0) or _la==cppParser.Identifier:
                self.state = 1970
                self.assignmentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicExceptionSpecification(self):
            return self.getTypedRuleContext(cppParser.DynamicExceptionSpecificationContext,0)


        def noeExceptSpecification(self):
            return self.getTypedRuleContext(cppParser.NoeExceptSpecificationContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_exceptionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionSpecification" ):
                listener.enterExceptionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionSpecification" ):
                listener.exitExceptionSpecification(self)




    def exceptionSpecification(self):

        localctx = cppParser.ExceptionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_exceptionSpecification)
        try:
            self.state = 1975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cppParser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1973
                self.dynamicExceptionSpecification()
                pass
            elif token in [cppParser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1974
                self.noeExceptSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicExceptionSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(cppParser.Throw, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def typeIdList(self):
            return self.getTypedRuleContext(cppParser.TypeIdListContext,0)


        def getRuleIndex(self):
            return cppParser.RULE_dynamicExceptionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicExceptionSpecification" ):
                listener.enterDynamicExceptionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicExceptionSpecification" ):
                listener.exitDynamicExceptionSpecification(self)




    def dynamicExceptionSpecification(self):

        localctx = cppParser.DynamicExceptionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_dynamicExceptionSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self.match(cppParser.Throw)
            self.state = 1978
            self.match(cppParser.LeftParen)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (cppParser.Auto - 13)) | (1 << (cppParser.Bool - 13)) | (1 << (cppParser.Char - 13)) | (1 << (cppParser.Char16 - 13)) | (1 << (cppParser.Char32 - 13)) | (1 << (cppParser.Class - 13)) | (1 << (cppParser.Const - 13)) | (1 << (cppParser.Decltype - 13)) | (1 << (cppParser.Double - 13)) | (1 << (cppParser.Enum - 13)) | (1 << (cppParser.Float - 13)) | (1 << (cppParser.Int - 13)) | (1 << (cppParser.Long - 13)) | (1 << (cppParser.Short - 13)) | (1 << (cppParser.Signed - 13)) | (1 << (cppParser.Struct - 13)) | (1 << (cppParser.Typename_ - 13)))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (cppParser.Union - 77)) | (1 << (cppParser.Unsigned - 77)) | (1 << (cppParser.Void - 77)) | (1 << (cppParser.Volatile - 77)) | (1 << (cppParser.Wchar - 77)) | (1 << (cppParser.Doublecolon - 77)) | (1 << (cppParser.Identifier - 77)))) != 0):
                self.state = 1979
                self.typeIdList()


            self.state = 1982
            self.match(cppParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeIdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cppParser.TheTypeIdContext)
            else:
                return self.getTypedRuleContext(cppParser.TheTypeIdContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Ellipsis)
            else:
                return self.getToken(cppParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Comma)
            else:
                return self.getToken(cppParser.Comma, i)

        def getRuleIndex(self):
            return cppParser.RULE_typeIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdList" ):
                listener.enterTypeIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdList" ):
                listener.exitTypeIdList(self)




    def typeIdList(self):

        localctx = cppParser.TypeIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_typeIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.theTypeId()
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cppParser.Ellipsis:
                self.state = 1985
                self.match(cppParser.Ellipsis)


            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cppParser.Comma:
                self.state = 1988
                self.match(cppParser.Comma)
                self.state = 1989
                self.theTypeId()
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cppParser.Ellipsis:
                    self.state = 1990
                    self.match(cppParser.Ellipsis)


                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoeExceptSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(cppParser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cppParser.ConstantExpressionContext,0)


        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def getRuleIndex(self):
            return cppParser.RULE_noeExceptSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeExceptSpecification" ):
                listener.enterNoeExceptSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeExceptSpecification" ):
                listener.exitNoeExceptSpecification(self)




    def noeExceptSpecification(self):

        localctx = cppParser.NoeExceptSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_noeExceptSpecification)
        try:
            self.state = 2004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.match(cppParser.Noexcept)
                self.state = 1999
                self.match(cppParser.LeftParen)
                self.state = 2000
                self.constantExpression()
                self.state = 2001
                self.match(cppParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.match(cppParser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(cppParser.New, 0)

        def LeftBracket(self):
            return self.getToken(cppParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cppParser.RightBracket, 0)

        def Delete(self):
            return self.getToken(cppParser.Delete, 0)

        def Plus(self):
            return self.getToken(cppParser.Plus, 0)

        def Minus(self):
            return self.getToken(cppParser.Minus, 0)

        def Star(self):
            return self.getToken(cppParser.Star, 0)

        def Div(self):
            return self.getToken(cppParser.Div, 0)

        def Mod(self):
            return self.getToken(cppParser.Mod, 0)

        def Caret(self):
            return self.getToken(cppParser.Caret, 0)

        def And(self):
            return self.getToken(cppParser.And, 0)

        def Or(self):
            return self.getToken(cppParser.Or, 0)

        def Tilde(self):
            return self.getToken(cppParser.Tilde, 0)

        def Not(self):
            return self.getToken(cppParser.Not, 0)

        def Assign(self):
            return self.getToken(cppParser.Assign, 0)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Greater)
            else:
                return self.getToken(cppParser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(cppParser.Less)
            else:
                return self.getToken(cppParser.Less, i)

        def GreaterEqual(self):
            return self.getToken(cppParser.GreaterEqual, 0)

        def PlusAssign(self):
            return self.getToken(cppParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(cppParser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(cppParser.StarAssign, 0)

        def ModAssign(self):
            return self.getToken(cppParser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(cppParser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(cppParser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(cppParser.OrAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(cppParser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(cppParser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(cppParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(cppParser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(cppParser.LessEqual, 0)

        def AndAnd(self):
            return self.getToken(cppParser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(cppParser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(cppParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(cppParser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(cppParser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(cppParser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(cppParser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(cppParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cppParser.RightParen, 0)

        def getRuleIndex(self):
            return cppParser.RULE_theOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheOperator" ):
                listener.enterTheOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheOperator" ):
                listener.exitTheOperator(self)




    def theOperator(self):

        localctx = cppParser.TheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_theOperator)
        try:
            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2006
                self.match(cppParser.New)
                self.state = 2009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2007
                    self.match(cppParser.LeftBracket)
                    self.state = 2008
                    self.match(cppParser.RightBracket)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(cppParser.Delete)
                self.state = 2014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2012
                    self.match(cppParser.LeftBracket)
                    self.state = 2013
                    self.match(cppParser.RightBracket)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.match(cppParser.Plus)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2017
                self.match(cppParser.Minus)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2018
                self.match(cppParser.Star)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2019
                self.match(cppParser.Div)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2020
                self.match(cppParser.Mod)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2021
                self.match(cppParser.Caret)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2022
                self.match(cppParser.And)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2023
                self.match(cppParser.Or)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2024
                self.match(cppParser.Tilde)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2025
                self.match(cppParser.Not)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2026
                self.match(cppParser.Assign)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2027
                self.match(cppParser.Greater)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2028
                self.match(cppParser.Less)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2029
                self.match(cppParser.GreaterEqual)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2030
                self.match(cppParser.PlusAssign)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2031
                self.match(cppParser.MinusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2032
                self.match(cppParser.StarAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2033
                self.match(cppParser.ModAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2034
                self.match(cppParser.XorAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2035
                self.match(cppParser.AndAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2036
                self.match(cppParser.OrAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2037
                self.match(cppParser.Less)
                self.state = 2038
                self.match(cppParser.Less)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2039
                self.match(cppParser.Greater)
                self.state = 2040
                self.match(cppParser.Greater)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2041
                self.match(cppParser.RightShiftAssign)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2042
                self.match(cppParser.LeftShiftAssign)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2043
                self.match(cppParser.Equal)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2044
                self.match(cppParser.NotEqual)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2045
                self.match(cppParser.LessEqual)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2046
                self.match(cppParser.AndAnd)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2047
                self.match(cppParser.OrOr)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2048
                self.match(cppParser.PlusPlus)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2049
                self.match(cppParser.MinusMinus)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2050
                self.match(cppParser.Comma)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2051
                self.match(cppParser.ArrowStar)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2052
                self.match(cppParser.Arrow)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2053
                self.match(cppParser.LeftParen)
                self.state = 2054
                self.match(cppParser.RightParen)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2055
                self.match(cppParser.LeftBracket)
                self.state = 2056
                self.match(cppParser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(cppParser.IntegerLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(cppParser.CharacterLiteral, 0)

        def FloatingLiteral(self):
            return self.getToken(cppParser.FloatingLiteral, 0)

        def StringLiteral(self):
            return self.getToken(cppParser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(cppParser.BooleanLiteral, 0)

        def PointerLiteral(self):
            return self.getToken(cppParser.PointerLiteral, 0)

        def UserDefinedLiteral(self):
            return self.getToken(cppParser.UserDefinedLiteral, 0)

        def getRuleIndex(self):
            return cppParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = cppParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cppParser.IntegerLiteral) | (1 << cppParser.CharacterLiteral) | (1 << cppParser.FloatingLiteral) | (1 << cppParser.StringLiteral) | (1 << cppParser.BooleanLiteral) | (1 << cppParser.PointerLiteral) | (1 << cppParser.UserDefinedLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestedNameSpecifier_sempred
        self._predicates[15] = self.postfixExpression_sempred
        self._predicates[25] = self.noPointerNewDeclarator_sempred
        self._predicates[115] = self.noPointerDeclarator_sempred
        self._predicates[148] = self.memberDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestedNameSpecifier_sempred(self, localctx:NestedNameSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

    def noPointerNewDeclarator_sempred(self, localctx:NoPointerNewDeclaratorContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def noPointerDeclarator_sempred(self, localctx:NoPointerDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def memberDeclarator_sempred(self, localctx:MemberDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return  this.IsPureSpecifierAllowed() 
         

            if predIndex == 8:
                return  this.IsPureSpecifierAllowed() 
         




